
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00003c9c  00003d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080013c  0080013c  00003e0c  2**0
                  ALLOC
  3 .stab         00003474  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ee  00000000  00000000  00007280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000856e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000881e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c260  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 06 	call	0xd72	; 0xd72 <main>
      8a:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <error>:

/********************************************************************************************************
 *                                            Functions
********************************************************************************************************/
void error(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <error+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	static uint8 callNum = 1;

	switch (callNum)
     b50:	80 91 31 01 	lds	r24, 0x0131
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	31 f0       	breq	.+12     	; 0xb72 <error+0x2c>
     b66:	29 81       	ldd	r18, Y+1	; 0x01
     b68:	3a 81       	ldd	r19, Y+2	; 0x02
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	31 05       	cpc	r19, r1
     b6e:	91 f0       	breq	.+36     	; 0xb94 <error+0x4e>
     b70:	13 c0       	rjmp	.+38     	; 0xb98 <error+0x52>
	{
	case 1:
		LCD_clearScreen();
     b72:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 4, "ERROR");
     b76:	20 e6       	ldi	r18, 0x60	; 96
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	64 e0       	ldi	r22, 0x04	; 4
     b7e:	a9 01       	movw	r20, r18
     b80:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 4, "UNDETECTED");
     b84:	26 e6       	ldi	r18, 0x66	; 102
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	a9 01       	movw	r20, r18
     b8e:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_displayStringRowColumn>
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <error+0x52>
		break;
	case 2:
		LCD_clearScreen();
     b94:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
		break;
	}
	callNum++;
     b98:	80 91 31 01 	lds	r24, 0x0131
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 31 01 	sts	0x0131, r24
	if(callNum > 2)
     ba2:	80 91 31 01 	lds	r24, 0x0131
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	18 f0       	brcs	.+6      	; 0xbb0 <error+0x6a>
		callNum = 1;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 31 01 	sts	0x0131, r24
	g_countCompleted = TRUE;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 49 01 	sts	0x0149, r24

}
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <set_error>:


	void set_error(void)
	{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
		/* Set the call back function to error so that
		 * the timer calls the error function when
		 * it finishes counting*/
		Timer1_setCallBack(error);
     bc8:	83 ea       	ldi	r24, 0xA3	; 163
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Timer1_setCallBack>

		/* Call the error function once manually to start the error message*/
		error();
     bd0:	0e 94 a3 05 	call	0xb46	; 0xb46 <error>
		/* Reset the variable for the next iteration */
		g_countCompleted = FALSE;
     bd4:	10 92 49 01 	sts	0x0149, r1

		/* Set counter to count a minute*/
		TIM_Config.initial_value = 0;
     bd8:	10 92 2c 01 	sts	0x012C, r1
     bdc:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.compare_value = 58594;
     be0:	82 ee       	ldi	r24, 0xE2	; 226
     be2:	94 ee       	ldi	r25, 0xE4	; 228
     be4:	90 93 2e 01 	sts	0x012E, r25
     be8:	80 93 2d 01 	sts	0x012D, r24
		TIM_Config.prescaler = CLK_1024;
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	80 93 2f 01 	sts	0x012F, r24

		/* Start timer to count 60 seconds*/
		Timer1_init(&TIM_Config);
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

		/* wait for timer to finish counting !*/
		/* 60 seconds*/
		while(!g_countCompleted){}
     bfa:	80 91 49 01 	lds	r24, 0x0149
     bfe:	88 23       	and	r24, r24
     c00:	e1 f3       	breq	.-8      	; 0xbfa <set_error+0x3a>
		/* Reset the variable for the next iteration */
		g_countCompleted = FALSE;
     c02:	10 92 49 01 	sts	0x0149, r1

		/* Change configurations to STOP*/
		TIM_Config.initial_value = 0;
     c06:	10 92 2c 01 	sts	0x012C, r1
     c0a:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.prescaler = NO_CLK;
     c0e:	10 92 2f 01 	sts	0x012F, r1

		/* Stop the timer*/
		Timer1_init(&TIM_Config);
     c12:	8b e2       	ldi	r24, 0x2B	; 43
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

	}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <openDoor>:

	void openDoor(void)
	{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <openDoor+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
		static uint8 callNum = 1;

		switch (callNum)
     c2a:	80 91 32 01 	lds	r24, 0x0132
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	29 83       	std	Y+1, r18	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	91 05       	cpc	r25, r1
     c3e:	e9 f0       	breq	.+58     	; 0xc7a <openDoor+0x5a>
     c40:	29 81       	ldd	r18, Y+1	; 0x01
     c42:	3a 81       	ldd	r19, Y+2	; 0x02
     c44:	23 30       	cpi	r18, 0x03	; 3
     c46:	31 05       	cpc	r19, r1
     c48:	34 f4       	brge	.+12     	; 0xc56 <openDoor+0x36>
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	61 f0       	breq	.+24     	; 0xc6c <openDoor+0x4c>
     c54:	22 c0       	rjmp	.+68     	; 0xc9a <openDoor+0x7a>
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	23 30       	cpi	r18, 0x03	; 3
     c5c:	31 05       	cpc	r19, r1
     c5e:	a1 f0       	breq	.+40     	; 0xc88 <openDoor+0x68>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	91 05       	cpc	r25, r1
     c68:	b1 f0       	breq	.+44     	; 0xc96 <openDoor+0x76>
     c6a:	17 c0       	rjmp	.+46     	; 0xc9a <openDoor+0x7a>
		{
		case 1:
			LCD_clearScreen();
     c6c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
			LCD_displayString("Door Unlocking");
     c70:	81 e7       	ldi	r24, 0x71	; 113
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <openDoor+0x7a>
			break;
		case 2:
			LCD_clearScreen();
     c7a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
			LCD_displayString("Door Unlocked");
     c7e:	80 e8       	ldi	r24, 0x80	; 128
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <openDoor+0x7a>
			break;
		case 3:
			LCD_clearScreen();
     c88:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
			LCD_displayString("Door Locking");
     c8c:	8e e8       	ldi	r24, 0x8E	; 142
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <openDoor+0x7a>
			break;
		case 4:
			LCD_clearScreen();
     c96:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
			break;
		}
		callNum++;
     c9a:	80 91 32 01 	lds	r24, 0x0132
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	80 93 32 01 	sts	0x0132, r24
		if(callNum > 4)
     ca4:	80 91 32 01 	lds	r24, 0x0132
     ca8:	85 30       	cpi	r24, 0x05	; 5
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <openDoor+0x92>
			callNum = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 32 01 	sts	0x0132, r24
		g_countCompleted = TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 49 01 	sts	0x0149, r24
	}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <set_openDoor>:

	void set_openDoor(void)
	{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
		Timer1_setCallBack(openDoor);
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <Timer1_setCallBack>

		/* Call the call-back function once manually to
		 * start opening the door*/
		openDoor();
     cd2:	0e 94 10 06 	call	0xc20	; 0xc20 <openDoor>
		/* Reset the flag variable for the next time
		 * the function get's called*/
		g_countCompleted = FALSE;
     cd6:	10 92 49 01 	sts	0x0149, r1


		/* Change configurations to count 15 seconds*/
		TIM_Config.initial_value = 0;
     cda:	10 92 2c 01 	sts	0x012C, r1
     cde:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.compare_value =14558;
     ce2:	8e ed       	ldi	r24, 0xDE	; 222
     ce4:	98 e3       	ldi	r25, 0x38	; 56
     ce6:	90 93 2e 01 	sts	0x012E, r25
     cea:	80 93 2d 01 	sts	0x012D, r24
		TIM_Config.prescaler = CLK_1024;
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	80 93 2f 01 	sts	0x012F, r24

		/* Start timer to count 15 seconds*/
		Timer1_init(&TIM_Config);
     cf4:	8b e2       	ldi	r24, 0x2B	; 43
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

		/* wait for timer to finish counting !*/
		/* 15 seconds*/
		while(!g_countCompleted){}
     cfc:	80 91 49 01 	lds	r24, 0x0149
     d00:	88 23       	and	r24, r24
     d02:	e1 f3       	breq	.-8      	; 0xcfc <set_openDoor+0x3a>
		g_countCompleted = FALSE;
     d04:	10 92 49 01 	sts	0x0149, r1


		/* Change configurations to count 3 seconds*/
		TIM_Config.initial_value = 0;
     d08:	10 92 2c 01 	sts	0x012C, r1
     d0c:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.compare_value = 2700;
     d10:	8c e8       	ldi	r24, 0x8C	; 140
     d12:	9a e0       	ldi	r25, 0x0A	; 10
     d14:	90 93 2e 01 	sts	0x012E, r25
     d18:	80 93 2d 01 	sts	0x012D, r24

		/* Start timer to count 3 seconds*/
		Timer1_init(&TIM_Config);
     d1c:	8b e2       	ldi	r24, 0x2B	; 43
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

		/* wait for timer to finish counting !*/
		while(!g_countCompleted){}
     d24:	80 91 49 01 	lds	r24, 0x0149
     d28:	88 23       	and	r24, r24
     d2a:	e1 f3       	breq	.-8      	; 0xd24 <set_openDoor+0x62>
		g_countCompleted = FALSE;
     d2c:	10 92 49 01 	sts	0x0149, r1


		/* Change configurations to count 15 seconds*/
		TIM_Config.initial_value = 0;
     d30:	10 92 2c 01 	sts	0x012C, r1
     d34:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.compare_value =14588;
     d38:	8c ef       	ldi	r24, 0xFC	; 252
     d3a:	98 e3       	ldi	r25, 0x38	; 56
     d3c:	90 93 2e 01 	sts	0x012E, r25
     d40:	80 93 2d 01 	sts	0x012D, r24

		/* Start timer to count 15 seconds*/
		Timer1_init(&TIM_Config);
     d44:	8b e2       	ldi	r24, 0x2B	; 43
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

		/* wait for timer to finish counting !*/
		/* 15 seconds*/
		while(!g_countCompleted){}
     d4c:	80 91 49 01 	lds	r24, 0x0149
     d50:	88 23       	and	r24, r24
     d52:	e1 f3       	breq	.-8      	; 0xd4c <set_openDoor+0x8a>
		g_countCompleted = FALSE;
     d54:	10 92 49 01 	sts	0x0149, r1

		/* Change configurations to STOP*/
		TIM_Config.initial_value = 0;
     d58:	10 92 2c 01 	sts	0x012C, r1
     d5c:	10 92 2b 01 	sts	0x012B, r1
		TIM_Config.prescaler = NO_CLK;
     d60:	10 92 2f 01 	sts	0x012F, r1

		/* Stop the timer*/
		Timer1_init(&TIM_Config);
     d64:	8b e2       	ldi	r24, 0x2B	; 43
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer1_init>

	}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <main>:

/***********************************************************************************************************/


	int main()
	{
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	cf 56       	subi	r28, 0x6F	; 111
     d80:	d0 40       	sbci	r29, 0x00	; 0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
		/* Enable all interrupts */
		SREG|=(1<<7);
     d8c:	af e5       	ldi	r26, 0x5F	; 95
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ef e5       	ldi	r30, 0x5F	; 95
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	8c 93       	st	X, r24
		/* Adjust setting of the uart-driver */
		UART_ConfigType uart_config ={ASYNCH,DISABLE,ONEBIT,BITS_8,BAUD_96H};
     d9a:	ce 01       	movw	r24, r28
     d9c:	8d 59       	subi	r24, 0x9D	; 157
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	ad 96       	adiw	r28, 0x2d	; 45
     da2:	9f af       	std	Y+63, r25	; 0x3f
     da4:	8e af       	std	Y+62, r24	; 0x3e
     da6:	ad 97       	sbiw	r28, 0x2d	; 45
     da8:	83 e3       	ldi	r24, 0x33	; 51
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	af 96       	adiw	r28, 0x2f	; 47
     dae:	9f af       	std	Y+63, r25	; 0x3f
     db0:	8e af       	std	Y+62, r24	; 0x3e
     db2:	af 97       	sbiw	r28, 0x2f	; 47
     db4:	98 e0       	ldi	r25, 0x08	; 8
     db6:	e0 96       	adiw	r28, 0x30	; 48
     db8:	9f af       	std	Y+63, r25	; 0x3f
     dba:	e0 97       	sbiw	r28, 0x30	; 48
     dbc:	af 96       	adiw	r28, 0x2f	; 47
     dbe:	ee ad       	ldd	r30, Y+62	; 0x3e
     dc0:	ff ad       	ldd	r31, Y+63	; 0x3f
     dc2:	af 97       	sbiw	r28, 0x2f	; 47
     dc4:	00 80       	ld	r0, Z
     dc6:	af 96       	adiw	r28, 0x2f	; 47
     dc8:	8e ad       	ldd	r24, Y+62	; 0x3e
     dca:	9f ad       	ldd	r25, Y+63	; 0x3f
     dcc:	af 97       	sbiw	r28, 0x2f	; 47
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	af 96       	adiw	r28, 0x2f	; 47
     dd2:	9f af       	std	Y+63, r25	; 0x3f
     dd4:	8e af       	std	Y+62, r24	; 0x3e
     dd6:	af 97       	sbiw	r28, 0x2f	; 47
     dd8:	ad 96       	adiw	r28, 0x2d	; 45
     dda:	ee ad       	ldd	r30, Y+62	; 0x3e
     ddc:	ff ad       	ldd	r31, Y+63	; 0x3f
     dde:	ad 97       	sbiw	r28, 0x2d	; 45
     de0:	00 82       	st	Z, r0
     de2:	ad 96       	adiw	r28, 0x2d	; 45
     de4:	8e ad       	ldd	r24, Y+62	; 0x3e
     de6:	9f ad       	ldd	r25, Y+63	; 0x3f
     de8:	ad 97       	sbiw	r28, 0x2d	; 45
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	ad 96       	adiw	r28, 0x2d	; 45
     dee:	9f af       	std	Y+63, r25	; 0x3f
     df0:	8e af       	std	Y+62, r24	; 0x3e
     df2:	ad 97       	sbiw	r28, 0x2d	; 45
     df4:	e0 96       	adiw	r28, 0x30	; 48
     df6:	9f ad       	ldd	r25, Y+63	; 0x3f
     df8:	e0 97       	sbiw	r28, 0x30	; 48
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	e0 96       	adiw	r28, 0x30	; 48
     dfe:	9f af       	std	Y+63, r25	; 0x3f
     e00:	e0 97       	sbiw	r28, 0x30	; 48
     e02:	e0 96       	adiw	r28, 0x30	; 48
     e04:	ef ad       	ldd	r30, Y+63	; 0x3f
     e06:	e0 97       	sbiw	r28, 0x30	; 48
     e08:	ee 23       	and	r30, r30
     e0a:	c1 f6       	brne	.-80     	; 0xdbc <main+0x4a>
		/* Initialize the lcd-driver */
		LCD_init();
     e0c:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_init>
		/* Initialize the UART-Driver */
		UART_init(&uart_config);
     e10:	ce 01       	movw	r24, r28
     e12:	8d 59       	subi	r24, 0x9D	; 157
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <UART_init>

		LCD_displayString("plz enter pass:");
     e1a:	8b e9       	ldi	r24, 0x9B	; 155
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
		LCD_moveCursor(1,0);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>

		while(1)
		{
			/* Permission to start Step 1 */
			if (step1==0)
     e2a:	80 91 42 01 	lds	r24, 0x0142
     e2e:	88 23       	and	r24, r24
     e30:	09 f0       	breq	.+2      	; 0xe34 <main+0xc2>
     e32:	3c c2       	rjmp	.+1144   	; 0x12ac <main+0x53a>
			{
				/* To enter the first Password */
				if (confirm==0)
     e34:	80 91 41 01 	lds	r24, 0x0141
     e38:	88 23       	and	r24, r24
     e3a:	09 f5       	brne	.+66     	; 0xe7e <main+0x10c>
				{
					/* get the pressed button from the keypad */
					key=KEYPAD_getPressedKey();
     e3c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
     e40:	80 93 3e 01 	sts	0x013E, r24

					if(key>=0 && key<=9)
     e44:	80 91 3e 01 	lds	r24, 0x013E
     e48:	8a 30       	cpi	r24, 0x0A	; 10
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <main+0xdc>
     e4c:	45 c0       	rjmp	.+138    	; 0xed8 <main+0x166>
					{
						/* Save the first Password */
						pass[count1]=key;
     e4e:	80 91 3f 01 	lds	r24, 0x013F
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	20 91 3e 01 	lds	r18, 0x013E
     e5a:	fc 01       	movw	r30, r24
     e5c:	e3 5b       	subi	r30, 0xB3	; 179
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	20 83       	st	Z, r18
						++count1;
     e62:	80 91 3f 01 	lds	r24, 0x013F
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 3f 01 	sts	0x013F, r24
						/* display * character for each number*/
						LCD_displayCharacter('*');
     e6c:	8a e2       	ldi	r24, 0x2A	; 42
     e6e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayCharacter>
						pass[5]='#';
     e72:	83 e2       	ldi	r24, 0x23	; 35
     e74:	80 93 52 01 	sts	0x0152, r24
						pass[6]='\0';
     e78:	10 92 53 01 	sts	0x0153, r1
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <main+0x166>
					}
				}
				else
				{
					/* get the pressed button from the keypad */
					key=KEYPAD_getPressedKey();
     e7e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
     e82:	80 93 3e 01 	sts	0x013E, r24
					if(key>=0 && key<=9)
     e86:	80 91 3e 01 	lds	r24, 0x013E
     e8a:	8a 30       	cpi	r24, 0x0A	; 10
     e8c:	c0 f4       	brcc	.+48     	; 0xebe <main+0x14c>
					{
						/* Saved the Second Password */
						re_pass[count2]=key;
     e8e:	80 91 40 01 	lds	r24, 0x0140
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	20 91 3e 01 	lds	r18, 0x013E
     e9a:	fc 01       	movw	r30, r24
     e9c:	ec 5a       	subi	r30, 0xAC	; 172
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	20 83       	st	Z, r18
						++count2;
     ea2:	80 91 40 01 	lds	r24, 0x0140
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 93 40 01 	sts	0x0140, r24
						/* display * character for each number*/
						LCD_displayCharacter('*');
     eac:	8a e2       	ldi	r24, 0x2A	; 42
     eae:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayCharacter>
						re_pass[5]='#';
     eb2:	83 e2       	ldi	r24, 0x23	; 35
     eb4:	80 93 59 01 	sts	0x0159, r24
						re_pass[6]='\0';
     eb8:	10 92 5a 01 	sts	0x015A, r1
     ebc:	0d c0       	rjmp	.+26     	; 0xed8 <main+0x166>
					}
					else if(key=='=')
     ebe:	80 91 3e 01 	lds	r24, 0x013E
     ec2:	8d 33       	cpi	r24, 0x3D	; 61
     ec4:	49 f4       	brne	.+18     	; 0xed8 <main+0x166>
					{
						/* sending the second password to The Uart-Driver */
						UART_sendString(re_pass);
     ec6:	84 e5       	ldi	r24, 0x54	; 84
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <UART_sendString>
						ready=1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 45 01 	sts	0x0145, r24
						key=0;
     ed4:	10 92 3e 01 	sts	0x013E, r1
					}
				}
				/* check if enter button pressed */
				if(key=='=')
     ed8:	80 91 3e 01 	lds	r24, 0x013E
     edc:	8d 33       	cpi	r24, 0x3D	; 61
     ede:	f1 f4       	brne	.+60     	; 0xf1c <main+0x1aa>
				{
					/* sending the first password to The Uart-Driver */
					UART_sendString(pass);
     ee0:	8d e4       	ldi	r24, 0x4D	; 77
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <UART_sendString>
					LCD_clearScreen();
     ee8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
					LCD_displayString("plz re-enter the");
     eec:	8b ea       	ldi	r24, 0xAB	; 171
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
					LCD_moveCursor(1,0);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
					LCD_displayString("same pass:");
     efc:	8c eb       	ldi	r24, 0xBC	; 188
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
					LCD_moveCursor(1,11);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	6b e0       	ldi	r22, 0x0B	; 11
     f08:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
					/* To enter the Second Password */
					confirm=1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 41 01 	sts	0x0141, r24
					count1=0;
     f12:	10 92 3f 01 	sts	0x013F, r1
					count2=0;
     f16:	10 92 40 01 	sts	0x0140, r1
     f1a:	0e c0       	rjmp	.+28     	; 0xf38 <main+0x1c6>
				}

				/* check if clear button pressed to enter the num again */
				else if(key==13)
     f1c:	80 91 3e 01 	lds	r24, 0x013E
     f20:	8d 30       	cpi	r24, 0x0D	; 13
     f22:	51 f4       	brne	.+20     	; 0xf38 <main+0x1c6>
				{
					LCD_clearScreen();
     f24:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
					LCD_displayString("plz enter pass: ");
     f28:	87 ec       	ldi	r24, 0xC7	; 199
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
					LCD_moveCursor(1,0);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
     f38:	fe 01       	movw	r30, r28
     f3a:	e1 5a       	subi	r30, 0xA1	; 161
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	aa ef       	ldi	r26, 0xFA	; 250
     f44:	b3 e4       	ldi	r27, 0x43	; 67
     f46:	80 83       	st	Z, r24
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	a2 83       	std	Z+2, r26	; 0x02
     f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	8e 01       	movw	r16, r28
     f50:	05 5a       	subi	r16, 0xA5	; 165
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	fe 01       	movw	r30, r28
     f56:	e1 5a       	subi	r30, 0xA1	; 161
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	4a e7       	ldi	r20, 0x7A	; 122
     f68:	53 e4       	ldi	r21, 0x43	; 67
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	f8 01       	movw	r30, r16
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	a2 83       	std	Z+2, r26	; 0x02
     f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f7c:	fe 01       	movw	r30, r28
     f7e:	e5 5a       	subi	r30, 0xA5	; 165
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	44 f4       	brge	.+16     	; 0xfaa <main+0x238>
		__ticks = 1;
     f9a:	fe 01       	movw	r30, r28
     f9c:	e7 5a       	subi	r30, 0xA7	; 167
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
     fa8:	64 c0       	rjmp	.+200    	; 0x1072 <main+0x300>
	else if (__tmp > 65535)
     faa:	fe 01       	movw	r30, r28
     fac:	e5 5a       	subi	r30, 0xA5	; 165
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	0c f0       	brlt	.+2      	; 0xfca <main+0x258>
     fc8:	43 c0       	rjmp	.+134    	; 0x1050 <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fca:	fe 01       	movw	r30, r28
     fcc:	e1 5a       	subi	r30, 0xA1	; 161
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8e 01       	movw	r16, r28
     fea:	07 5a       	subi	r16, 0xA7	; 167
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	f8 01       	movw	r30, r16
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	1f c0       	rjmp	.+62     	; 0x1040 <main+0x2ce>
    1002:	fe 01       	movw	r30, r28
    1004:	e9 5a       	subi	r30, 0xA9	; 169
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	89 e1       	ldi	r24, 0x19	; 25
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1010:	fe 01       	movw	r30, r28
    1012:	e9 5a       	subi	r30, 0xA9	; 169
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <main+0x2a8>
    101e:	fe 01       	movw	r30, r28
    1020:	e9 5a       	subi	r30, 0xA9	; 169
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	de 01       	movw	r26, r28
    102a:	a7 5a       	subi	r26, 0xA7	; 167
    102c:	bf 4f       	sbci	r27, 0xFF	; 255
    102e:	fe 01       	movw	r30, r28
    1030:	e7 5a       	subi	r30, 0xA7	; 167
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	9c 93       	st	X, r25
    103e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	fe 01       	movw	r30, r28
    1042:	e7 5a       	subi	r30, 0xA7	; 167
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	d1 f6       	brne	.-76     	; 0x1002 <main+0x290>
    104e:	28 c0       	rjmp	.+80     	; 0x10a0 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	8e 01       	movw	r16, r28
    1052:	07 5a       	subi	r16, 0xA7	; 167
    1054:	1f 4f       	sbci	r17, 0xFF	; 255
    1056:	fe 01       	movw	r30, r28
    1058:	e5 5a       	subi	r30, 0xA5	; 165
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	f8 01       	movw	r30, r16
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    1072:	de 01       	movw	r26, r28
    1074:	ab 5a       	subi	r26, 0xAB	; 171
    1076:	bf 4f       	sbci	r27, 0xFF	; 255
    1078:	fe 01       	movw	r30, r28
    107a:	e7 5a       	subi	r30, 0xA7	; 167
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	11 96       	adiw	r26, 0x01	; 1
    1084:	9c 93       	st	X, r25
    1086:	8e 93       	st	-X, r24
    1088:	fe 01       	movw	r30, r28
    108a:	eb 5a       	subi	r30, 0xAB	; 171
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <main+0x320>
    1096:	fe 01       	movw	r30, r28
    1098:	eb 5a       	subi	r30, 0xAB	; 171
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
				}
				_delay_ms(500); /* Press time */
				if(ready==1)
    10a0:	80 91 45 01 	lds	r24, 0x0145
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <main+0x338>
    10a8:	1c c1       	rjmp	.+568    	; 0x12e2 <main+0x570>
				{
					/* Get the result if they matched or not  */
					step1=UART_recieveByte();
    10aa:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    10ae:	80 93 42 01 	sts	0x0142, r24
					if (step1)
    10b2:	80 91 42 01 	lds	r24, 0x0142
    10b6:	88 23       	and	r24, r24
    10b8:	09 f4       	brne	.+2      	; 0x10bc <main+0x34a>
    10ba:	d3 c0       	rjmp	.+422    	; 0x1262 <main+0x4f0>
					{
						/* Displaying The main system options */
						LCD_clearScreen();
    10bc:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
						LCD_displayString("+ : Open Door");
    10c0:	88 ed       	ldi	r24, 0xD8	; 216
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						LCD_moveCursor(1,0);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
						LCD_displayString("- : Change Pass");
    10d0:	86 ee       	ldi	r24, 0xE6	; 230
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						key=KEYPAD_getPressedKey();
    10d8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    10dc:	80 93 3e 01 	sts	0x013E, r24
    10e0:	fe 01       	movw	r30, r28
    10e2:	ef 5a       	subi	r30, 0xAF	; 175
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	aa ef       	ldi	r26, 0xFA	; 250
    10ec:	b3 e4       	ldi	r27, 0x43	; 67
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	8e 01       	movw	r16, r28
    10f8:	03 5b       	subi	r16, 0xB3	; 179
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	fe 01       	movw	r30, r28
    10fe:	ef 5a       	subi	r30, 0xAF	; 175
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a e7       	ldi	r20, 0x7A	; 122
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	f8 01       	movw	r30, r16
    111c:	80 83       	st	Z, r24
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1124:	fe 01       	movw	r30, r28
    1126:	e3 5b       	subi	r30, 0xB3	; 179
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	44 f4       	brge	.+16     	; 0x1152 <main+0x3e0>
		__ticks = 1;
    1142:	fe 01       	movw	r30, r28
    1144:	e5 5b       	subi	r30, 0xB5	; 181
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    1150:	64 c0       	rjmp	.+200    	; 0x121a <main+0x4a8>
	else if (__tmp > 65535)
    1152:	fe 01       	movw	r30, r28
    1154:	e3 5b       	subi	r30, 0xB3	; 179
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	0c f0       	brlt	.+2      	; 0x1172 <main+0x400>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	fe 01       	movw	r30, r28
    1174:	ef 5a       	subi	r30, 0xAF	; 175
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8e 01       	movw	r16, r28
    1192:	05 5b       	subi	r16, 0xB5	; 181
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
    11a8:	1f c0       	rjmp	.+62     	; 0x11e8 <main+0x476>
    11aa:	fe 01       	movw	r30, r28
    11ac:	e7 5b       	subi	r30, 0xB7	; 183
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	89 e1       	ldi	r24, 0x19	; 25
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	fe 01       	movw	r30, r28
    11ba:	e7 5b       	subi	r30, 0xB7	; 183
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <main+0x450>
    11c6:	fe 01       	movw	r30, r28
    11c8:	e7 5b       	subi	r30, 0xB7	; 183
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	de 01       	movw	r26, r28
    11d2:	a5 5b       	subi	r26, 0xB5	; 181
    11d4:	bf 4f       	sbci	r27, 0xFF	; 255
    11d6:	fe 01       	movw	r30, r28
    11d8:	e5 5b       	subi	r30, 0xB5	; 181
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	11 96       	adiw	r26, 0x01	; 1
    11e4:	9c 93       	st	X, r25
    11e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	fe 01       	movw	r30, r28
    11ea:	e5 5b       	subi	r30, 0xB5	; 181
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	d1 f6       	brne	.-76     	; 0x11aa <main+0x438>
    11f6:	28 c0       	rjmp	.+80     	; 0x1248 <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	8e 01       	movw	r16, r28
    11fa:	05 5b       	subi	r16, 0xB5	; 181
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	fe 01       	movw	r30, r28
    1200:	e3 5b       	subi	r30, 0xB3	; 179
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	82 81       	ldd	r24, Z+2	; 0x02
    120a:	93 81       	ldd	r25, Z+3	; 0x03
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	f8 01       	movw	r30, r16
    1216:	91 83       	std	Z+1, r25	; 0x01
    1218:	80 83       	st	Z, r24
    121a:	de 01       	movw	r26, r28
    121c:	a9 5b       	subi	r26, 0xB9	; 185
    121e:	bf 4f       	sbci	r27, 0xFF	; 255
    1220:	fe 01       	movw	r30, r28
    1222:	e5 5b       	subi	r30, 0xB5	; 181
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    1230:	fe 01       	movw	r30, r28
    1232:	e9 5b       	subi	r30, 0xB9	; 185
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	80 81       	ld	r24, Z
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <main+0x4c8>
    123e:	fe 01       	movw	r30, r28
    1240:	e9 5b       	subi	r30, 0xB9	; 185
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
						_delay_ms(500);
						if(key=='+'||key=='-')
    1248:	80 91 3e 01 	lds	r24, 0x013E
    124c:	8b 32       	cpi	r24, 0x2B	; 43
    124e:	29 f0       	breq	.+10     	; 0x125a <main+0x4e8>
    1250:	80 91 3e 01 	lds	r24, 0x013E
    1254:	8d 32       	cpi	r24, 0x2D	; 45
    1256:	09 f0       	breq	.+2      	; 0x125a <main+0x4e8>
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <main+0x570>
						{
							/* to go to OPTION List */
							step2=1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 43 01 	sts	0x0143, r24
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <main+0x570>
						}
					}
					/* If the two passwords are wrong */
					else if (step1==0&&ready==1)
    1262:	80 91 42 01 	lds	r24, 0x0142
    1266:	88 23       	and	r24, r24
    1268:	e1 f5       	brne	.+120    	; 0x12e2 <main+0x570>
    126a:	80 91 45 01 	lds	r24, 0x0145
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	c1 f5       	brne	.+112    	; 0x12e2 <main+0x570>
					{
						LCD_intgerToString(step1);
    1272:	80 91 42 01 	lds	r24, 0x0142
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 30 1c 	call	0x3860	; 0x3860 <LCD_intgerToString>
						LCD_clearScreen();
    127e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
						LCD_displayString("WRONG PASS ENTER");
    1282:	86 ef       	ldi	r24, 0xF6	; 246
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						LCD_moveCursor(1,0);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
						LCD_displayString("Enter again");
    1292:	87 e0       	ldi	r24, 0x07	; 7
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						LCD_moveCursor(1,11);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	6b e0       	ldi	r22, 0x0B	; 11
    129e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
						confirm=0;
    12a2:	10 92 41 01 	sts	0x0141, r1
						ready=0;
    12a6:	10 92 45 01 	sts	0x0145, r1
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <main+0x570>
					}
				}
			}
			//Start Step2
			else if(step2==1)
    12ac:	80 91 43 01 	lds	r24, 0x0143
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	b9 f4       	brne	.+46     	; 0x12e2 <main+0x570>
			{
				if(key=='+'||key=='-')
    12b4:	80 91 3e 01 	lds	r24, 0x013E
    12b8:	8b 32       	cpi	r24, 0x2B	; 43
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <main+0x552>
    12bc:	80 91 3e 01 	lds	r24, 0x013E
    12c0:	8d 32       	cpi	r24, 0x2D	; 45
    12c2:	79 f4       	brne	.+30     	; 0x12e2 <main+0x570>
				{
					LCD_clearScreen();
    12c4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    12c8:	8b e9       	ldi	r24, 0x9B	; 155
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
					LCD_moveCursor(1,0);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
					step3=1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 44 01 	sts	0x0144, r24
					count1=0;
    12de:	10 92 3f 01 	sts	0x013F, r1
				}
			}
			if(step3==1)
    12e2:	80 91 44 01 	lds	r24, 0x0144
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <main+0x57a>
    12ea:	9f cd       	rjmp	.-1218   	; 0xe2a <main+0xb8>
			{
				if(key=='+')
    12ec:	80 91 3e 01 	lds	r24, 0x013E
    12f0:	8b 32       	cpi	r24, 0x2B	; 43
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <main+0x584>
    12f4:	e8 c1       	rjmp	.+976    	; 0x16c6 <main+0x954>
    12f6:	9f c0       	rjmp	.+318    	; 0x1436 <main+0x6c4>
				{
					while(key!='=')
					{

						key=KEYPAD_getPressedKey();
    12f8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    12fc:	80 93 3e 01 	sts	0x013E, r24
						if(key>=0 && key<=9)
    1300:	80 91 3e 01 	lds	r24, 0x013E
    1304:	8a 30       	cpi	r24, 0x0A	; 10
    1306:	90 f4       	brcc	.+36     	; 0x132c <main+0x5ba>
						{
							pass[count1]=key;
    1308:	80 91 3f 01 	lds	r24, 0x013F
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	20 91 3e 01 	lds	r18, 0x013E
    1314:	fc 01       	movw	r30, r24
    1316:	e3 5b       	subi	r30, 0xB3	; 179
    1318:	fe 4f       	sbci	r31, 0xFE	; 254
    131a:	20 83       	st	Z, r18
							++count1;
    131c:	80 91 3f 01 	lds	r24, 0x013F
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	80 93 3f 01 	sts	0x013F, r24
							/* display * character for each number*/
							LCD_displayCharacter('*');
    1326:	8a e2       	ldi	r24, 0x2A	; 42
    1328:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayCharacter>
    132c:	fe 01       	movw	r30, r28
    132e:	ed 5b       	subi	r30, 0xBD	; 189
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	aa ef       	ldi	r26, 0xFA	; 250
    1338:	b3 e4       	ldi	r27, 0x43	; 67
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	8e 01       	movw	r16, r28
    1344:	01 5c       	subi	r16, 0xC1	; 193
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	fe 01       	movw	r30, r28
    134a:	ed 5b       	subi	r30, 0xBD	; 189
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a e7       	ldi	r20, 0x7A	; 122
    135c:	53 e4       	ldi	r21, 0x43	; 67
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	f8 01       	movw	r30, r16
    1368:	80 83       	st	Z, r24
    136a:	91 83       	std	Z+1, r25	; 0x01
    136c:	a2 83       	std	Z+2, r26	; 0x02
    136e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1370:	fe 01       	movw	r30, r28
    1372:	ff 96       	adiw	r30, 0x3f	; 63
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1388:	88 23       	and	r24, r24
    138a:	2c f4       	brge	.+10     	; 0x1396 <main+0x624>
		__ticks = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e af       	std	Y+62, r25	; 0x3e
    1392:	8d af       	std	Y+61, r24	; 0x3d
    1394:	46 c0       	rjmp	.+140    	; 0x1422 <main+0x6b0>
	else if (__tmp > 65535)
    1396:	fe 01       	movw	r30, r28
    1398:	ff 96       	adiw	r30, 0x3f	; 63
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	64 f5       	brge	.+88     	; 0x140a <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	fe 01       	movw	r30, r28
    13b4:	ed 5b       	subi	r30, 0xBD	; 189
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e2       	ldi	r20, 0x20	; 32
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9e af       	std	Y+62, r25	; 0x3e
    13de:	8d af       	std	Y+61, r24	; 0x3d
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <main+0x68e>
    13e2:	89 e1       	ldi	r24, 0x19	; 25
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c af       	std	Y+60, r25	; 0x3c
    13e8:	8b af       	std	Y+59, r24	; 0x3b
    13ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    13ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0x67c>
    13f2:	9c af       	std	Y+60, r25	; 0x3c
    13f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	9e af       	std	Y+62, r25	; 0x3e
    13fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	8d ad       	ldd	r24, Y+61	; 0x3d
    1402:	9e ad       	ldd	r25, Y+62	; 0x3e
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	69 f7       	brne	.-38     	; 0x13e2 <main+0x670>
    1408:	16 c0       	rjmp	.+44     	; 0x1436 <main+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140a:	fe 01       	movw	r30, r28
    140c:	ff 96       	adiw	r30, 0x3f	; 63
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e af       	std	Y+62, r25	; 0x3e
    1420:	8d af       	std	Y+61, r24	; 0x3d
    1422:	8d ad       	ldd	r24, Y+61	; 0x3d
    1424:	9e ad       	ldd	r25, Y+62	; 0x3e
    1426:	9a af       	std	Y+58, r25	; 0x3a
    1428:	89 af       	std	Y+57, r24	; 0x39
    142a:	89 ad       	ldd	r24, Y+57	; 0x39
    142c:	9a ad       	ldd	r25, Y+58	; 0x3a
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <main+0x6bc>
    1432:	9a af       	std	Y+58, r25	; 0x3a
    1434:	89 af       	std	Y+57, r24	; 0x39
			}
			if(step3==1)
			{
				if(key=='+')
				{
					while(key!='=')
    1436:	80 91 3e 01 	lds	r24, 0x013E
    143a:	8d 33       	cpi	r24, 0x3D	; 61
    143c:	09 f0       	breq	.+2      	; 0x1440 <main+0x6ce>
    143e:	5c cf       	rjmp	.-328    	; 0x12f8 <main+0x586>
							/* display * character for each number*/
							LCD_displayCharacter('*');
						}
						_delay_ms(500);
					}
					pass[5]='#';
    1440:	83 e2       	ldi	r24, 0x23	; 35
    1442:	80 93 52 01 	sts	0x0152, r24
					pass[6]='\0';
    1446:	10 92 53 01 	sts	0x0153, r1
					step2=0;
    144a:	10 92 43 01 	sts	0x0143, r1
					UART_sendString(pass);
    144e:	8d e4       	ldi	r24, 0x4D	; 77
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <UART_sendString>
					UART_sendByte('+');
    1456:	8b e2       	ldi	r24, 0x2B	; 43
    1458:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
					door_state=UART_recieveByte();
    145c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    1460:	80 93 4c 01 	sts	0x014C, r24
					LCD_clearScreen();
    1464:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
					if(door_state==1)
    1468:	80 91 4c 01 	lds	r24, 0x014C
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f0       	breq	.+2      	; 0x1472 <main+0x700>
    1470:	8a c0       	rjmp	.+276    	; 0x1586 <main+0x814>
					{
						set_openDoor();
    1472:	0e 94 61 06 	call	0xcc2	; 0xcc2 <set_openDoor>
						LCD_displayString("+ : Open Door");
    1476:	88 ed       	ldi	r24, 0xD8	; 216
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						LCD_moveCursor(1,0);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
						LCD_displayString("- : Change Pass");
    1486:	86 ee       	ldi	r24, 0xE6	; 230
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						key=KEYPAD_getPressedKey();
    148e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    1492:	80 93 3e 01 	sts	0x013E, r24
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	aa ef       	ldi	r26, 0xFA	; 250
    149c:	b3 e4       	ldi	r27, 0x43	; 67
    149e:	8d ab       	std	Y+53, r24	; 0x35
    14a0:	9e ab       	std	Y+54, r25	; 0x36
    14a2:	af ab       	std	Y+55, r26	; 0x37
    14a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6d a9       	ldd	r22, Y+53	; 0x35
    14a8:	7e a9       	ldd	r23, Y+54	; 0x36
    14aa:	8f a9       	ldd	r24, Y+55	; 0x37
    14ac:	98 ad       	ldd	r25, Y+56	; 0x38
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a e7       	ldi	r20, 0x7A	; 122
    14b4:	53 e4       	ldi	r21, 0x43	; 67
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	89 ab       	std	Y+49, r24	; 0x31
    14c0:	9a ab       	std	Y+50, r25	; 0x32
    14c2:	ab ab       	std	Y+51, r26	; 0x33
    14c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14c6:	69 a9       	ldd	r22, Y+49	; 0x31
    14c8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ca:	8b a9       	ldd	r24, Y+51	; 0x33
    14cc:	9c a9       	ldd	r25, Y+52	; 0x34
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <main+0x776>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	98 ab       	std	Y+48, r25	; 0x30
    14e4:	8f a7       	std	Y+47, r24	; 0x2f
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <main+0x7f4>
	else if (__tmp > 65535)
    14e8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ea:	7a a9       	ldd	r23, Y+50	; 0x32
    14ec:	8b a9       	ldd	r24, Y+51	; 0x33
    14ee:	9c a9       	ldd	r25, Y+52	; 0x34
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <main+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6d a9       	ldd	r22, Y+53	; 0x35
    1502:	7e a9       	ldd	r23, Y+54	; 0x36
    1504:	8f a9       	ldd	r24, Y+55	; 0x37
    1506:	98 ad       	ldd	r25, Y+56	; 0x38
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	98 ab       	std	Y+48, r25	; 0x30
    1526:	8f a7       	std	Y+47, r24	; 0x2f
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <main+0x7d6>
    152a:	89 e1       	ldi	r24, 0x19	; 25
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e a7       	std	Y+46, r25	; 0x2e
    1530:	8d a7       	std	Y+45, r24	; 0x2d
    1532:	8d a5       	ldd	r24, Y+45	; 0x2d
    1534:	9e a5       	ldd	r25, Y+46	; 0x2e
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <main+0x7c4>
    153a:	9e a7       	std	Y+46, r25	; 0x2e
    153c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1540:	98 a9       	ldd	r25, Y+48	; 0x30
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	98 ab       	std	Y+48, r25	; 0x30
    1546:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8f a5       	ldd	r24, Y+47	; 0x2f
    154a:	98 a9       	ldd	r25, Y+48	; 0x30
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <main+0x7b8>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <main+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	69 a9       	ldd	r22, Y+49	; 0x31
    1554:	7a a9       	ldd	r23, Y+50	; 0x32
    1556:	8b a9       	ldd	r24, Y+51	; 0x33
    1558:	9c a9       	ldd	r25, Y+52	; 0x34
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	98 ab       	std	Y+48, r25	; 0x30
    1564:	8f a7       	std	Y+47, r24	; 0x2f
    1566:	8f a5       	ldd	r24, Y+47	; 0x2f
    1568:	98 a9       	ldd	r25, Y+48	; 0x30
    156a:	9c a7       	std	Y+44, r25	; 0x2c
    156c:	8b a7       	std	Y+43, r24	; 0x2b
    156e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1570:	9c a5       	ldd	r25, Y+44	; 0x2c
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <main+0x800>
    1576:	9c a7       	std	Y+44, r25	; 0x2c
    1578:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						step2=1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 43 01 	sts	0x0143, r24
						step3=0;
    1580:	10 92 44 01 	sts	0x0144, r1
    1584:	52 cc       	rjmp	.-1884   	; 0xe2a <main+0xb8>
					}
					else
					{
						step2=1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 43 01 	sts	0x0143, r24
						key='+';
    158c:	8b e2       	ldi	r24, 0x2B	; 43
    158e:	80 93 3e 01 	sts	0x013E, r24
						++chances;
    1592:	80 91 46 01 	lds	r24, 0x0146
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 46 01 	sts	0x0146, r24
						UART_sendByte(chances);
    159c:	80 91 46 01 	lds	r24, 0x0146
    15a0:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
						if(chances==3)
    15a4:	80 91 46 01 	lds	r24, 0x0146
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	09 f0       	breq	.+2      	; 0x15ae <main+0x83c>
    15ac:	3e cc       	rjmp	.-1924   	; 0xe2a <main+0xb8>
						{
							set_error();
    15ae:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <set_error>
							LCD_displayString("+ : Open Door");
    15b2:	88 ed       	ldi	r24, 0xD8	; 216
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
							LCD_moveCursor(1,0);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
							LCD_displayString("- : Change Pass");
    15c2:	86 ee       	ldi	r24, 0xE6	; 230
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
							key=KEYPAD_getPressedKey();
    15ca:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    15ce:	80 93 3e 01 	sts	0x013E, r24
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	aa ef       	ldi	r26, 0xFA	; 250
    15d8:	b3 e4       	ldi	r27, 0x43	; 67
    15da:	8f a3       	std	Y+39, r24	; 0x27
    15dc:	98 a7       	std	Y+40, r25	; 0x28
    15de:	a9 a7       	std	Y+41, r26	; 0x29
    15e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	6f a1       	ldd	r22, Y+39	; 0x27
    15e4:	78 a5       	ldd	r23, Y+40	; 0x28
    15e6:	89 a5       	ldd	r24, Y+41	; 0x29
    15e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a e7       	ldi	r20, 0x7A	; 122
    15f0:	53 e4       	ldi	r21, 0x43	; 67
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	8b a3       	std	Y+35, r24	; 0x23
    15fc:	9c a3       	std	Y+36, r25	; 0x24
    15fe:	ad a3       	std	Y+37, r26	; 0x25
    1600:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	2c f4       	brge	.+10     	; 0x1624 <main+0x8b2>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9a a3       	std	Y+34, r25	; 0x22
    1620:	89 a3       	std	Y+33, r24	; 0x21
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <main+0x930>
	else if (__tmp > 65535)
    1624:	6b a1       	ldd	r22, Y+35	; 0x23
    1626:	7c a1       	ldd	r23, Y+36	; 0x24
    1628:	8d a1       	ldd	r24, Y+37	; 0x25
    162a:	9e a1       	ldd	r25, Y+38	; 0x26
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1638:	18 16       	cp	r1, r24
    163a:	4c f5       	brge	.+82     	; 0x168e <main+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	6f a1       	ldd	r22, Y+39	; 0x27
    163e:	78 a5       	ldd	r23, Y+40	; 0x28
    1640:	89 a5       	ldd	r24, Y+41	; 0x29
    1642:	9a a5       	ldd	r25, Y+42	; 0x2a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <main+0x912>
    1666:	89 e1       	ldi	r24, 0x19	; 25
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	98 a3       	std	Y+32, r25	; 0x20
    166c:	8f 8f       	std	Y+31, r24	; 0x1f
    166e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1670:	98 a1       	ldd	r25, Y+32	; 0x20
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <main+0x900>
    1676:	98 a3       	std	Y+32, r25	; 0x20
    1678:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	89 a1       	ldd	r24, Y+33	; 0x21
    167c:	9a a1       	ldd	r25, Y+34	; 0x22
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	9a a3       	std	Y+34, r25	; 0x22
    1682:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	89 a1       	ldd	r24, Y+33	; 0x21
    1686:	9a a1       	ldd	r25, Y+34	; 0x22
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <main+0x8f4>
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <main+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	6b a1       	ldd	r22, Y+35	; 0x23
    1690:	7c a1       	ldd	r23, Y+36	; 0x24
    1692:	8d a1       	ldd	r24, Y+37	; 0x25
    1694:	9e a1       	ldd	r25, Y+38	; 0x26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9a a3       	std	Y+34, r25	; 0x22
    16a0:	89 a3       	std	Y+33, r24	; 0x21
    16a2:	89 a1       	ldd	r24, Y+33	; 0x21
    16a4:	9a a1       	ldd	r25, Y+34	; 0x22
    16a6:	9e 8f       	std	Y+30, r25	; 0x1e
    16a8:	8d 8f       	std	Y+29, r24	; 0x1d
    16aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <main+0x93c>
    16b2:	9e 8f       	std	Y+30, r25	; 0x1e
    16b4:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(500);
							step2=1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 93 43 01 	sts	0x0143, r24
							step3=0;
    16bc:	10 92 44 01 	sts	0x0144, r1
							chances=0;
    16c0:	10 92 46 01 	sts	0x0146, r1
    16c4:	b2 cb       	rjmp	.-2204   	; 0xe2a <main+0xb8>
						}
					}
				}
				else if(key=='-')
    16c6:	80 91 3e 01 	lds	r24, 0x013E
    16ca:	8d 32       	cpi	r24, 0x2D	; 45
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <main+0x95e>
    16ce:	ad cb       	rjmp	.-2214   	; 0xe2a <main+0xb8>
    16d0:	8c c0       	rjmp	.+280    	; 0x17ea <main+0xa78>
				{
					while(key!='=')
					{
						key=KEYPAD_getPressedKey();
    16d2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    16d6:	80 93 3e 01 	sts	0x013E, r24
						if(key>=0 && key<=9)
    16da:	80 91 3e 01 	lds	r24, 0x013E
    16de:	8a 30       	cpi	r24, 0x0A	; 10
    16e0:	90 f4       	brcc	.+36     	; 0x1706 <main+0x994>
						{
							pass[count1]=key;
    16e2:	80 91 3f 01 	lds	r24, 0x013F
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	20 91 3e 01 	lds	r18, 0x013E
    16ee:	fc 01       	movw	r30, r24
    16f0:	e3 5b       	subi	r30, 0xB3	; 179
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	20 83       	st	Z, r18
							++count1;
    16f6:	80 91 3f 01 	lds	r24, 0x013F
    16fa:	8f 5f       	subi	r24, 0xFF	; 255
    16fc:	80 93 3f 01 	sts	0x013F, r24
							/* display * character for each number*/
							LCD_displayCharacter('*');
    1700:	8a e2       	ldi	r24, 0x2A	; 42
    1702:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayCharacter>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	aa ef       	ldi	r26, 0xFA	; 250
    170c:	b3 e4       	ldi	r27, 0x43	; 67
    170e:	89 8f       	std	Y+25, r24	; 0x19
    1710:	9a 8f       	std	Y+26, r25	; 0x1a
    1712:	ab 8f       	std	Y+27, r26	; 0x1b
    1714:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	69 8d       	ldd	r22, Y+25	; 0x19
    1718:	7a 8d       	ldd	r23, Y+26	; 0x1a
    171a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a e7       	ldi	r20, 0x7A	; 122
    1724:	53 e4       	ldi	r21, 0x43	; 67
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8d 8b       	std	Y+21, r24	; 0x15
    1730:	9e 8b       	std	Y+22, r25	; 0x16
    1732:	af 8b       	std	Y+23, r26	; 0x17
    1734:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1736:	6d 89       	ldd	r22, Y+21	; 0x15
    1738:	7e 89       	ldd	r23, Y+22	; 0x16
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <main+0x9e6>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <main+0xa64>
	else if (__tmp > 65535)
    1758:	6d 89       	ldd	r22, Y+21	; 0x15
    175a:	7e 89       	ldd	r23, Y+22	; 0x16
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	4c f5       	brge	.+82     	; 0x17c2 <main+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1770:	69 8d       	ldd	r22, Y+25	; 0x19
    1772:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1774:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1776:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9c 8b       	std	Y+20, r25	; 0x14
    1796:	8b 8b       	std	Y+19, r24	; 0x13
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <main+0xa46>
    179a:	89 e1       	ldi	r24, 0x19	; 25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9a 8b       	std	Y+18, r25	; 0x12
    17a0:	89 8b       	std	Y+17, r24	; 0x11
    17a2:	89 89       	ldd	r24, Y+17	; 0x11
    17a4:	9a 89       	ldd	r25, Y+18	; 0x12
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <main+0xa34>
    17aa:	9a 8b       	std	Y+18, r25	; 0x12
    17ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ba:	9c 89       	ldd	r25, Y+20	; 0x14
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	69 f7       	brne	.-38     	; 0x179a <main+0xa28>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <main+0xa78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	6d 89       	ldd	r22, Y+21	; 0x15
    17c4:	7e 89       	ldd	r23, Y+22	; 0x16
    17c6:	8f 89       	ldd	r24, Y+23	; 0x17
    17c8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9c 8b       	std	Y+20, r25	; 0x14
    17d4:	8b 8b       	std	Y+19, r24	; 0x13
    17d6:	8b 89       	ldd	r24, Y+19	; 0x13
    17d8:	9c 89       	ldd	r25, Y+20	; 0x14
    17da:	98 8b       	std	Y+16, r25	; 0x10
    17dc:	8f 87       	std	Y+15, r24	; 0x0f
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	98 89       	ldd	r25, Y+16	; 0x10
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <main+0xa70>
    17e6:	98 8b       	std	Y+16, r25	; 0x10
    17e8:	8f 87       	std	Y+15, r24	; 0x0f
						}
					}
				}
				else if(key=='-')
				{
					while(key!='=')
    17ea:	80 91 3e 01 	lds	r24, 0x013E
    17ee:	8d 33       	cpi	r24, 0x3D	; 61
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <main+0xa82>
    17f2:	6f cf       	rjmp	.-290    	; 0x16d2 <main+0x960>
							/* display * character for each number*/
							LCD_displayCharacter('*');
						}
						_delay_ms(500);
					}
					pass[5]='#';
    17f4:	83 e2       	ldi	r24, 0x23	; 35
    17f6:	80 93 52 01 	sts	0x0152, r24
					pass[6]='\0';
    17fa:	10 92 53 01 	sts	0x0153, r1
					UART_sendString(pass);
    17fe:	8d e4       	ldi	r24, 0x4D	; 77
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <UART_sendString>
					UART_sendByte('-');
    1806:	8d e2       	ldi	r24, 0x2D	; 45
    1808:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
					/* Receive if they matched or not  */
					check=UART_recieveByte();
    180c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    1810:	80 93 48 01 	sts	0x0148, r24
					/* Both Passwords are Matched */
					if(check)
    1814:	80 91 48 01 	lds	r24, 0x0148
    1818:	88 23       	and	r24, r24
    181a:	a9 f0       	breq	.+42     	; 0x1846 <main+0xad4>
					{
						LCD_clearScreen();
    181c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <LCD_clearScreen>
						LCD_displayString("Plz enter Pass:");
    1820:	83 e1       	ldi	r24, 0x13	; 19
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
						LCD_moveCursor(1,0);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
						/* To start the program from the begin */
						step1=0;
    1830:	10 92 42 01 	sts	0x0142, r1
						step2=0;
    1834:	10 92 43 01 	sts	0x0143, r1
						step3=0;
    1838:	10 92 44 01 	sts	0x0144, r1
						ready=0;
    183c:	10 92 45 01 	sts	0x0145, r1
						/* To send the first Pass */
						confirm=0;
    1840:	10 92 41 01 	sts	0x0141, r1
    1844:	f2 ca       	rjmp	.-2588   	; 0xe2a <main+0xb8>
					}
					/* They not matched */
					else
					{
						step2=1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 43 01 	sts	0x0143, r24
						key='-';
    184c:	8d e2       	ldi	r24, 0x2D	; 45
    184e:	80 93 3e 01 	sts	0x013E, r24
						++chances;
    1852:	80 91 46 01 	lds	r24, 0x0146
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	80 93 46 01 	sts	0x0146, r24
						UART_sendByte(chances);
    185c:	80 91 46 01 	lds	r24, 0x0146
    1860:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
						if(chances==3)
    1864:	80 91 46 01 	lds	r24, 0x0146
    1868:	83 30       	cpi	r24, 0x03	; 3
    186a:	09 f0       	breq	.+2      	; 0x186e <main+0xafc>
    186c:	de ca       	rjmp	.-2628   	; 0xe2a <main+0xb8>
						{
							set_error();
    186e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <set_error>
							LCD_displayString("+ : Open Door");
    1872:	88 ed       	ldi	r24, 0xD8	; 216
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
							LCD_moveCursor(1,0);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
							LCD_displayString("- : Change Pass");
    1882:	86 ee       	ldi	r24, 0xE6	; 230
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
							key=KEYPAD_getPressedKey();
    188a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <KEYPAD_getPressedKey>
    188e:	80 93 3e 01 	sts	0x013E, r24
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	aa ef       	ldi	r26, 0xFA	; 250
    1898:	b3 e4       	ldi	r27, 0x43	; 67
    189a:	8b 87       	std	Y+11, r24	; 0x0b
    189c:	9c 87       	std	Y+12, r25	; 0x0c
    189e:	ad 87       	std	Y+13, r26	; 0x0d
    18a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a e7       	ldi	r20, 0x7A	; 122
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8f 83       	std	Y+7, r24	; 0x07
    18bc:	98 87       	std	Y+8, r25	; 0x08
    18be:	a9 87       	std	Y+9, r26	; 0x09
    18c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c2:	6f 81       	ldd	r22, Y+7	; 0x07
    18c4:	78 85       	ldd	r23, Y+8	; 0x08
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <main+0xb72>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <main+0xbf0>
	else if (__tmp > 65535)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <main+0xbdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <main+0xbd2>
    1926:	89 e1       	ldi	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <main+0xbc0>
    1936:	9c 83       	std	Y+4, r25	; 0x04
    1938:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <main+0xbb4>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <main+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05
    1964:	9e 81       	ldd	r25, Y+6	; 0x06
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <main+0xbfc>
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(500);
							step2=1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	80 93 43 01 	sts	0x0143, r24
							step3=0;
    197c:	10 92 44 01 	sts	0x0144, r1
							chances=0;
    1980:	10 92 46 01 	sts	0x0146, r1
    1984:	52 ca       	rjmp	.-2908   	; 0xe2a <main+0xb8>

00001986 <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>

/* Interrupt Service Routine of COMPARE mode*/
ISR(TIMER1_COMPA_vect)
{
    1986:	1f 92       	push	r1
    1988:	0f 92       	push	r0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	2f 93       	push	r18
    1992:	3f 93       	push	r19
    1994:	4f 93       	push	r20
    1996:	5f 93       	push	r21
    1998:	6f 93       	push	r22
    199a:	7f 93       	push	r23
    199c:	8f 93       	push	r24
    199e:	9f 93       	push	r25
    19a0:	af 93       	push	r26
    19a2:	bf 93       	push	r27
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    19b0:	80 91 4a 01 	lds	r24, 0x014A
    19b4:	90 91 4b 01 	lds	r25, 0x014B
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <__vector_7+0x40>
		    /* Call the Call back function in the Application */
			g_Timer1_Call_Back_Ptr();}
    19bc:	e0 91 4a 01 	lds	r30, 0x014A
    19c0:	f0 91 4b 01 	lds	r31, 0x014B
    19c4:	09 95       	icall
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_9>:

/* Interrupt Service Routine of COMPARE mode*/
ISR(TIMER1_OVF_vect)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    1a16:	80 91 4a 01 	lds	r24, 0x014A
    1a1a:	90 91 4b 01 	lds	r25, 0x014B
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <__vector_9+0x40>
		    /* Call the Call back function in the Application */
			g_Timer1_Call_Back_Ptr();}
    1a22:	e0 91 4a 01 	lds	r30, 0x014A
    1a26:	f0 91 4b 01 	lds	r31, 0x014B
    1a2a:	09 95       	icall
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <Timer1_init>:

/*
 *  Description: Function to initialize the Timer driver.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <Timer1_init+0x6>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	 /* Set the Initial Value */
	     TCNT1 = Config_Ptr->initial_value;
    1a60:	ac e4       	ldi	r26, 0x4C	; 76
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	11 96       	adiw	r26, 0x01	; 1
    1a6e:	9c 93       	st	X, r25
    1a70:	8e 93       	st	-X, r24

	    /* Set the Compared Value */
	     OCR1A = Config_Ptr->compare_value;
    1a72:	aa e4       	ldi	r26, 0x4A	; 74
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
 * WGM11&WGM10 : Set 0 to select Normal or Compare Mode.
 *    COM1A1:0 : Set 1OR0 depends on the Selected Mode .
 *    COM1B1:0 : Set 1OR0 depends on the Selected Mode .
 */

	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1a84:	ef e4       	ldi	r30, 0x4F	; 79
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8c e0       	ldi	r24, 0x0C	; 12
    1a8a:	80 83       	st	Z, r24
 * WGM12&WGM13 : Set 0 to Select Normal or Compare Mode.
 *       ICNC1 : Set 0 to Disable The Noise Canceler.
 *       ICES1 : Set 0 to Disable The Input Capture Select Due to putting The Top Value in it .
 */

    TCCR1B = (TCCR1B & 0XF8) | ((Config_Ptr->prescaler & 0X07)<<0);
    1a8c:	ae e4       	ldi	r26, 0x4E	; 78
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	ee e4       	ldi	r30, 0x4E	; 78
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	98 2f       	mov	r25, r24
    1a98:	98 7f       	andi	r25, 0xF8	; 248
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	84 81       	ldd	r24, Z+4	; 0x04
    1aa0:	87 70       	andi	r24, 0x07	; 7
    1aa2:	89 2b       	or	r24, r25
    1aa4:	8c 93       	st	X, r24

    /* Set the Selected Mode */
    TCCR1B=  (TCCR1B & 0XE7) | ((Config_Ptr->mode & 0X01)<<3);
    1aa6:	ae e4       	ldi	r26, 0x4E	; 78
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ee e4       	ldi	r30, 0x4E	; 78
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	27 7e       	andi	r18, 0xE7	; 231
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	85 81       	ldd	r24, Z+5	; 0x05
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	90 70       	andi	r25, 0x00	; 0
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	82 2b       	or	r24, r18
    1ad0:	8c 93       	st	X, r24

    /* Enable The Interrupts of Timer1 */
     if(Config_Ptr->mode==0)
    1ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad6:	85 81       	ldd	r24, Z+5	; 0x05
    1ad8:	88 23       	and	r24, r24
    1ada:	41 f4       	brne	.+16     	; 0x1aec <Timer1_init+0x9a>
     {
    	 /* Enable The Overflow Interrupt */
    	 TIMSK |= (1<<TOIE1);
    1adc:	a9 e5       	ldi	r26, 0x59	; 89
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e9 e5       	ldi	r30, 0x59	; 89
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	84 60       	ori	r24, 0x04	; 4
    1ae8:	8c 93       	st	X, r24
    1aea:	07 c0       	rjmp	.+14     	; 0x1afa <Timer1_init+0xa8>
     }
     else
     {
    	 /* Enable The CTC Interrupt */
    	 TIMSK |= (1<<OCIE1A);
    1aec:	a9 e5       	ldi	r26, 0x59	; 89
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e9 e5       	ldi	r30, 0x59	; 89
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	80 61       	ori	r24, 0x10	; 16
    1af8:	8c 93       	st	X, r24
     }
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <Timer1_deInit>:

/*
 *  Description: Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1b0c:	ef e4       	ldi	r30, 0x4F	; 79
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
	TCCR1B=0;
    1b12:	ee e4       	ldi	r30, 0x4E	; 78
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	10 82       	st	Z, r1
	 OCR1A=0;
    1b18:	ea e4       	ldi	r30, 0x4A	; 74
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	11 82       	std	Z+1, r1	; 0x01
    1b1e:	10 82       	st	Z, r1
	 TCNT1=0;
    1b20:	ec e4       	ldi	r30, 0x4C	; 76
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	11 82       	std	Z+1, r1	; 0x01
    1b26:	10 82       	st	Z, r1
	 TIMSK=0;
    1b28:	e9 e5       	ldi	r30, 0x59	; 89
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	10 82       	st	Z, r1
}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <Timer1_setCallBack>:

/*
 *  Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <Timer1_setCallBack+0x6>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
	/* Put the Address of The CallBack Function in The Global Pointer */
	g_Timer1_Call_Back_Ptr=a_ptr;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	90 93 4b 01 	sts	0x014B, r25
    1b4a:	80 93 4a 01 	sts	0x014A, r24
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <GPIO_setupPinDirection+0x6>
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <GPIO_setupPinDirection+0x8>
    1b60:	0f 92       	push	r0
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	6a 83       	std	Y+2, r22	; 0x02
    1b6a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	08 f0       	brcs	.+2      	; 0x1b74 <GPIO_setupPinDirection+0x1c>
    1b72:	d5 c0       	rjmp	.+426    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <GPIO_setupPinDirection+0x24>
    1b7a:	d1 c0       	rjmp	.+418    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3d 83       	std	Y+5, r19	; 0x05
    1b84:	2c 83       	std	Y+4, r18	; 0x04
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <GPIO_setupPinDirection+0x3a>
    1b90:	43 c0       	rjmp	.+134    	; 0x1c18 <GPIO_setupPinDirection+0xc0>
    1b92:	2c 81       	ldd	r18, Y+4	; 0x04
    1b94:	3d 81       	ldd	r19, Y+5	; 0x05
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <GPIO_setupPinDirection+0x4e>
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	71 f0       	breq	.+28     	; 0x1bc0 <GPIO_setupPinDirection+0x68>
    1ba4:	bc c0       	rjmp	.+376    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
    1ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <GPIO_setupPinDirection+0x5a>
    1bb0:	5f c0       	rjmp	.+190    	; 0x1c70 <GPIO_setupPinDirection+0x118>
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <GPIO_setupPinDirection+0x66>
    1bbc:	85 c0       	rjmp	.+266    	; 0x1cc8 <GPIO_setupPinDirection+0x170>
    1bbe:	af c0       	rjmp	.+350    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	a1 f4       	brne	.+40     	; 0x1bee <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1bc6:	aa e3       	ldi	r26, 0x3A	; 58
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ea e3       	ldi	r30, 0x3A	; 58
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_setupPinDirection+0x8c>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_setupPinDirection+0x88>
    1be8:	84 2b       	or	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	98 c0       	rjmp	.+304    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1bee:	aa e3       	ldi	r26, 0x3A	; 58
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ea e3       	ldi	r30, 0x3A	; 58
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <GPIO_setupPinDirection+0xb4>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <GPIO_setupPinDirection+0xb0>
    1c10:	80 95       	com	r24
    1c12:	84 23       	and	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	83 c0       	rjmp	.+262    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	a1 f4       	brne	.+40     	; 0x1c46 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c1e:	a7 e3       	ldi	r26, 0x37	; 55
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e7 e3       	ldi	r30, 0x37	; 55
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <GPIO_setupPinDirection+0xe4>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <GPIO_setupPinDirection+0xe0>
    1c40:	84 2b       	or	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	6c c0       	rjmp	.+216    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c46:	a7 e3       	ldi	r26, 0x37	; 55
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e3       	ldi	r30, 0x37	; 55
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_setupPinDirection+0x10c>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_setupPinDirection+0x108>
    1c68:	80 95       	com	r24
    1c6a:	84 23       	and	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	57 c0       	rjmp	.+174    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1c76:	a4 e3       	ldi	r26, 0x34	; 52
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <GPIO_setupPinDirection+0x13c>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <GPIO_setupPinDirection+0x138>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	40 c0       	rjmp	.+128    	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_setupPinDirection+0x164>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_setupPinDirection+0x160>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	2b c0       	rjmp	.+86     	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	a1 f4       	brne	.+40     	; 0x1cf6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1cce:	a1 e3       	ldi	r26, 0x31	; 49
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e1 e3       	ldi	r30, 0x31	; 49
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_setupPinDirection+0x194>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_setupPinDirection+0x190>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1cf6:	a1 e3       	ldi	r26, 0x31	; 49
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e1 e3       	ldi	r30, 0x31	; 49
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_setupPinDirection+0x1bc>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_setupPinDirection+0x1b8>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <GPIO_writePin+0x6>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_writePin+0x8>
    1d36:	0f 92       	push	r0
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	6a 83       	std	Y+2, r22	; 0x02
    1d40:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	85 30       	cpi	r24, 0x05	; 5
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <GPIO_writePin+0x1c>
    1d48:	d5 c0       	rjmp	.+426    	; 0x1ef4 <GPIO_writePin+0x1c6>
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	89 30       	cpi	r24, 0x09	; 9
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <GPIO_writePin+0x24>
    1d50:	d1 c0       	rjmp	.+418    	; 0x1ef4 <GPIO_writePin+0x1c6>
	{
		/* do nothing */
	}
	else
	{
		switch (port_num)
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	3d 83       	std	Y+5, r19	; 0x05
    1d5a:	2c 83       	std	Y+4, r18	; 0x04
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	91 05       	cpc	r25, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <GPIO_writePin+0x3a>
    1d66:	43 c0       	rjmp	.+134    	; 0x1dee <GPIO_writePin+0xc0>
    1d68:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <GPIO_writePin+0x4e>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <GPIO_writePin+0x68>
    1d7a:	bc c0       	rjmp	.+376    	; 0x1ef4 <GPIO_writePin+0x1c6>
    1d7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <GPIO_writePin+0x5a>
    1d86:	5f c0       	rjmp	.+190    	; 0x1e46 <GPIO_writePin+0x118>
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	91 05       	cpc	r25, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <GPIO_writePin+0x66>
    1d92:	85 c0       	rjmp	.+266    	; 0x1e9e <GPIO_writePin+0x170>
    1d94:	af c0       	rjmp	.+350    	; 0x1ef4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	a1 f4       	brne	.+40     	; 0x1dc4 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1d9c:	ab e3       	ldi	r26, 0x3B	; 59
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e3       	ldi	r30, 0x3B	; 59
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <GPIO_writePin+0x8c>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <GPIO_writePin+0x88>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	98 c0       	rjmp	.+304    	; 0x1ef4 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <GPIO_writePin+0xb4>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <GPIO_writePin+0xb0>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	83 c0       	rjmp	.+262    	; 0x1ef4 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	a1 f4       	brne	.+40     	; 0x1e1c <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <GPIO_writePin+0xe4>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <GPIO_writePin+0xe0>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	6c c0       	rjmp	.+216    	; 0x1ef4 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1e1c:	a8 e3       	ldi	r26, 0x38	; 56
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e8 e3       	ldi	r30, 0x38	; 56
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <GPIO_writePin+0x10c>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <GPIO_writePin+0x108>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	57 c0       	rjmp	.+174    	; 0x1ef4 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	a1 f4       	brne	.+40     	; 0x1e74 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1e4c:	a5 e3       	ldi	r26, 0x35	; 53
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e3       	ldi	r30, 0x35	; 53
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_writePin+0x13c>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_writePin+0x138>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	40 c0       	rjmp	.+128    	; 0x1ef4 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1e74:	a5 e3       	ldi	r26, 0x35	; 53
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <GPIO_writePin+0x164>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <GPIO_writePin+0x160>
    1e96:	80 95       	com	r24
    1e98:	84 23       	and	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	2b c0       	rjmp	.+86     	; 0x1ef4 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	a1 f4       	brne	.+40     	; 0x1ecc <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_writePin+0x194>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_writePin+0x190>
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    1ecc:	a2 e3       	ldi	r26, 0x32	; 50
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e2 e3       	ldi	r30, 0x32	; 50
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_writePin+0x1bc>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_writePin+0x1b8>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
			break;
		}
	}
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <GPIO_readPin+0x6>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <GPIO_readPin+0x8>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <GPIO_readPin+0xa>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	85 30       	cpi	r24, 0x05	; 5
    1f1a:	18 f4       	brcc	.+6      	; 0x1f22 <GPIO_readPin+0x1e>
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	89 30       	cpi	r24, 0x09	; 9
    1f20:	10 f0       	brcs	.+4      	; 0x1f26 <GPIO_readPin+0x22>
	{
		/* do nothing */
		return LOGIC_LOW;
    1f22:	1d 82       	std	Y+5, r1	; 0x05
    1f24:	82 c0       	rjmp	.+260    	; 0x202a <GPIO_readPin+0x126>
	}
	else
	{
		switch (port_num)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	3c 83       	std	Y+4, r19	; 0x04
    1f2e:	2b 83       	std	Y+3, r18	; 0x03
    1f30:	4b 81       	ldd	r20, Y+3	; 0x03
    1f32:	5c 81       	ldd	r21, Y+4	; 0x04
    1f34:	41 30       	cpi	r20, 0x01	; 1
    1f36:	51 05       	cpc	r21, r1
    1f38:	79 f1       	breq	.+94     	; 0x1f98 <GPIO_readPin+0x94>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	91 05       	cpc	r25, r1
    1f42:	34 f4       	brge	.+12     	; 0x1f50 <GPIO_readPin+0x4c>
    1f44:	2b 81       	ldd	r18, Y+3	; 0x03
    1f46:	3c 81       	ldd	r19, Y+4	; 0x04
    1f48:	21 15       	cp	r18, r1
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	69 f0       	breq	.+26     	; 0x1f68 <GPIO_readPin+0x64>
    1f4e:	6c c0       	rjmp	.+216    	; 0x2028 <GPIO_readPin+0x124>
    1f50:	4b 81       	ldd	r20, Y+3	; 0x03
    1f52:	5c 81       	ldd	r21, Y+4	; 0x04
    1f54:	42 30       	cpi	r20, 0x02	; 2
    1f56:	51 05       	cpc	r21, r1
    1f58:	b9 f1       	breq	.+110    	; 0x1fc8 <GPIO_readPin+0xc4>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <GPIO_readPin+0x62>
    1f64:	49 c0       	rjmp	.+146    	; 0x1ff8 <GPIO_readPin+0xf4>
    1f66:	60 c0       	rjmp	.+192    	; 0x2028 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1f68:	e9 e3       	ldi	r30, 0x39	; 57
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a9 01       	movw	r20, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <GPIO_readPin+0x7c>
    1f7c:	55 95       	asr	r21
    1f7e:	47 95       	ror	r20
    1f80:	8a 95       	dec	r24
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <GPIO_readPin+0x78>
    1f84:	ca 01       	movw	r24, r20
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	90 70       	andi	r25, 0x00	; 0
    1f8a:	88 23       	and	r24, r24
    1f8c:	19 f0       	breq	.+6      	; 0x1f94 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    1f8e:	51 e0       	ldi	r21, 0x01	; 1
    1f90:	5d 83       	std	Y+5, r21	; 0x05
    1f92:	4b c0       	rjmp	.+150    	; 0x202a <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1f94:	1d 82       	std	Y+5, r1	; 0x05
    1f96:	49 c0       	rjmp	.+146    	; 0x202a <GPIO_readPin+0x126>
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1f98:	e6 e3       	ldi	r30, 0x36	; 54
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a9 01       	movw	r20, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <GPIO_readPin+0xac>
    1fac:	55 95       	asr	r21
    1fae:	47 95       	ror	r20
    1fb0:	8a 95       	dec	r24
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <GPIO_readPin+0xa8>
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	81 70       	andi	r24, 0x01	; 1
    1fb8:	90 70       	andi	r25, 0x00	; 0
    1fba:	88 23       	and	r24, r24
    1fbc:	19 f0       	breq	.+6      	; 0x1fc4 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    1fbe:	51 e0       	ldi	r21, 0x01	; 1
    1fc0:	5d 83       	std	Y+5, r21	; 0x05
    1fc2:	33 c0       	rjmp	.+102    	; 0x202a <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1fc4:	1d 82       	std	Y+5, r1	; 0x05
    1fc6:	31 c0       	rjmp	.+98     	; 0x202a <GPIO_readPin+0x126>
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1fc8:	e3 e3       	ldi	r30, 0x33	; 51
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <GPIO_readPin+0xdc>
    1fdc:	55 95       	asr	r21
    1fde:	47 95       	ror	r20
    1fe0:	8a 95       	dec	r24
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <GPIO_readPin+0xd8>
    1fe4:	ca 01       	movw	r24, r20
    1fe6:	81 70       	andi	r24, 0x01	; 1
    1fe8:	90 70       	andi	r25, 0x00	; 0
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    1fee:	51 e0       	ldi	r21, 0x01	; 1
    1ff0:	5d 83       	std	Y+5, r21	; 0x05
    1ff2:	1b c0       	rjmp	.+54     	; 0x202a <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1ff4:	1d 82       	std	Y+5, r1	; 0x05
    1ff6:	19 c0       	rjmp	.+50     	; 0x202a <GPIO_readPin+0x126>
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ff8:	e0 e3       	ldi	r30, 0x30	; 48
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <GPIO_readPin+0x10c>
    200c:	55 95       	asr	r21
    200e:	47 95       	ror	r20
    2010:	8a 95       	dec	r24
    2012:	e2 f7       	brpl	.-8      	; 0x200c <GPIO_readPin+0x108>
    2014:	ca 01       	movw	r24, r20
    2016:	81 70       	andi	r24, 0x01	; 1
    2018:	90 70       	andi	r25, 0x00	; 0
    201a:	88 23       	and	r24, r24
    201c:	19 f0       	breq	.+6      	; 0x2024 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    201e:	51 e0       	ldi	r21, 0x01	; 1
    2020:	5d 83       	std	Y+5, r21	; 0x05
    2022:	03 c0       	rjmp	.+6      	; 0x202a <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    2024:	1d 82       	std	Y+5, r1	; 0x05
    2026:	01 c0       	rjmp	.+2      	; 0x202a <GPIO_readPin+0x126>
    2028:	02 c0       	rjmp	.+4      	; 0x202e <GPIO_readPin+0x12a>
			break;
		}
	}
}
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	8e 83       	std	Y+6, r24	; 0x06
    202e:	8e 81       	ldd	r24, Y+6	; 0x06
    2030:	26 96       	adiw	r28, 0x06	; 6
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <GPIO_setupPortDirection+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <GPIO_setupPortDirection+0x8>
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	90 f5       	brcc	.+100    	; 0x20bc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3c 83       	std	Y+4, r19	; 0x04
    2060:	2b 83       	std	Y+3, r18	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	d1 f0       	breq	.+52     	; 0x20a0 <GPIO_setupPortDirection+0x5e>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <GPIO_setupPortDirection+0x3e>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 f0       	breq	.+24     	; 0x2096 <GPIO_setupPortDirection+0x54>
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <GPIO_setupPortDirection+0x7a>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	81 f0       	breq	.+32     	; 0x20aa <GPIO_setupPortDirection+0x68>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	91 05       	cpc	r25, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <GPIO_setupPortDirection+0x72>
    2094:	13 c0       	rjmp	.+38     	; 0x20bc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2096:	ea e3       	ldi	r30, 0x3A	; 58
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20a0:	e7 e3       	ldi	r30, 0x37	; 55
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	80 83       	st	Z, r24
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20aa:	e4 e3       	ldi	r30, 0x34	; 52
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	80 83       	st	Z, r24
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    20b4:	e1 e3       	ldi	r30, 0x31	; 49
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	80 83       	st	Z, r24
			break;
		}
	}
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <GPIO_writePort+0x6>
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <GPIO_writePort+0x8>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	85 30       	cpi	r24, 0x05	; 5
    20de:	90 f5       	brcc	.+100    	; 0x2144 <GPIO_writePort+0x7a>
	{
		/* do nothing */
	}
	else
	{
		switch(port_num)
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3c 83       	std	Y+4, r19	; 0x04
    20e8:	2b 83       	std	Y+3, r18	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	9c 81       	ldd	r25, Y+4	; 0x04
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	91 05       	cpc	r25, r1
    20f2:	d1 f0       	breq	.+52     	; 0x2128 <GPIO_writePort+0x5e>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	2c f4       	brge	.+10     	; 0x2108 <GPIO_writePort+0x3e>
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	61 f0       	breq	.+24     	; 0x211e <GPIO_writePort+0x54>
    2106:	1e c0       	rjmp	.+60     	; 0x2144 <GPIO_writePort+0x7a>
    2108:	2b 81       	ldd	r18, Y+3	; 0x03
    210a:	3c 81       	ldd	r19, Y+4	; 0x04
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	81 f0       	breq	.+32     	; 0x2132 <GPIO_writePort+0x68>
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	91 05       	cpc	r25, r1
    211a:	81 f0       	breq	.+32     	; 0x213c <GPIO_writePort+0x72>
    211c:	13 c0       	rjmp	.+38     	; 0x2144 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    211e:	eb e3       	ldi	r30, 0x3B	; 59
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	80 83       	st	Z, r24
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB= value;
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	80 83       	st	Z, r24
    2130:	09 c0       	rjmp	.+18     	; 0x2144 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC= value;
    2132:	e5 e3       	ldi	r30, 0x35	; 53
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	80 83       	st	Z, r24
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD= value;
    213c:	e2 e3       	ldi	r30, 0x32	; 50
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	80 83       	st	Z, r24
			break;
		}
	}
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <GPIO_readPort+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <GPIO_readPort+0x8>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
	if(port_num > NUM_OF_PORTS)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	85 30       	cpi	r24, 0x05	; 5
    2166:	10 f0       	brcs	.+4      	; 0x216c <GPIO_readPort+0x1a>
	{
		/* do nothing */
		return LOGIC_LOW;
    2168:	1c 82       	std	Y+4, r1	; 0x04
    216a:	34 c0       	rjmp	.+104    	; 0x21d4 <GPIO_readPort+0x82>
	}
	else
	{
		switch(port_num)
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	3b 83       	std	Y+3, r19	; 0x03
    2174:	2a 83       	std	Y+2, r18	; 0x02
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	91 05       	cpc	r25, r1
    217e:	d1 f0       	breq	.+52     	; 0x21b4 <GPIO_readPort+0x62>
    2180:	2a 81       	ldd	r18, Y+2	; 0x02
    2182:	3b 81       	ldd	r19, Y+3	; 0x03
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	2c f4       	brge	.+10     	; 0x2194 <GPIO_readPort+0x42>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	61 f0       	breq	.+24     	; 0x21aa <GPIO_readPort+0x58>
    2192:	1f c0       	rjmp	.+62     	; 0x21d2 <GPIO_readPort+0x80>
    2194:	2a 81       	ldd	r18, Y+2	; 0x02
    2196:	3b 81       	ldd	r19, Y+3	; 0x03
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	31 05       	cpc	r19, r1
    219c:	81 f0       	breq	.+32     	; 0x21be <GPIO_readPort+0x6c>
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	9b 81       	ldd	r25, Y+3	; 0x03
    21a2:	83 30       	cpi	r24, 0x03	; 3
    21a4:	91 05       	cpc	r25, r1
    21a6:	81 f0       	breq	.+32     	; 0x21c8 <GPIO_readPort+0x76>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			return PINA;//it will read what was written in all 8-pins
    21aa:	e9 e3       	ldi	r30, 0x39	; 57
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	90 81       	ld	r25, Z
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	10 c0       	rjmp	.+32     	; 0x21d4 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    21b4:	e6 e3       	ldi	r30, 0x36	; 54
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	20 81       	ld	r18, Z
    21ba:	2c 83       	std	Y+4, r18	; 0x04
    21bc:	0b c0       	rjmp	.+22     	; 0x21d4 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    21be:	e3 e3       	ldi	r30, 0x33	; 51
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	30 81       	ld	r19, Z
    21c4:	3c 83       	std	Y+4, r19	; 0x04
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    21c8:	e0 e3       	ldi	r30, 0x30	; 48
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8c 83       	std	Y+4, r24	; 0x04
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <GPIO_readPort+0x82>
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <GPIO_readPort+0x86>
			break;
		}
	}
}
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	9d 83       	std	Y+5, r25	; 0x05
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <KEYPAD_getPressedKey+0x6>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	62 e0       	ldi	r22, 0x02	; 2
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	63 e0       	ldi	r22, 0x03	; 3
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	65 e0       	ldi	r22, 0x05	; 5
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	66 e0       	ldi	r22, 0x06	; 6
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	67 e0       	ldi	r22, 0x07	; 7
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2244:	19 82       	std	Y+1, r1	; 0x01
    2246:	35 c0       	rjmp	.+106    	; 0x22b2 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	69 81       	ldd	r22, Y+1	; 0x01
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	69 81       	ldd	r22, Y+1	; 0x01
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    225c:	1a 82       	std	Y+2, r1	; 0x02
    225e:	1e c0       	rjmp	.+60     	; 0x229c <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	98 2f       	mov	r25, r24
    2264:	9c 5f       	subi	r25, 0xFC	; 252
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	69 2f       	mov	r22, r25
    226a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <GPIO_readPin>
    226e:	88 23       	and	r24, r24
    2270:	91 f4       	brne	.+36     	; 0x2296 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	98 2f       	mov	r25, r24
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	89 0f       	add	r24, r25
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	0e 94 5d 11 	call	0x22ba	; 0x22ba <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	8f 5f       	subi	r24, 0xFF	; 255
    229a:	8a 83       	std	Y+2, r24	; 0x02
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	84 30       	cpi	r24, 0x04	; 4
    22a0:	f8 f2       	brcs	.-66     	; 0x2260 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	69 81       	ldd	r22, Y+1	; 0x01
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	84 30       	cpi	r24, 0x04	; 4
    22b6:	40 f2       	brcs	.-112    	; 0x2248 <KEYPAD_getPressedKey+0x5e>
    22b8:	c5 cf       	rjmp	.-118    	; 0x2244 <KEYPAD_getPressedKey+0x5a>

000022ba <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    22c8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3c 83       	std	Y+4, r19	; 0x04
    22d2:	2b 83       	std	Y+3, r18	; 0x03
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	88 30       	cpi	r24, 0x08	; 8
    22da:	91 05       	cpc	r25, r1
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    22de:	70 c0       	rjmp	.+224    	; 0x23c0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	29 30       	cpi	r18, 0x09	; 9
    22e6:	31 05       	cpc	r19, r1
    22e8:	5c f5       	brge	.+86     	; 0x2340 <KEYPAD_4x4_adjustKeyNumber+0x86>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	84 30       	cpi	r24, 0x04	; 4
    22f0:	91 05       	cpc	r25, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    22f4:	59 c0       	rjmp	.+178    	; 0x23a8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    22f6:	2b 81       	ldd	r18, Y+3	; 0x03
    22f8:	3c 81       	ldd	r19, Y+4	; 0x04
    22fa:	25 30       	cpi	r18, 0x05	; 5
    22fc:	31 05       	cpc	r19, r1
    22fe:	9c f4       	brge	.+38     	; 0x2326 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	91 05       	cpc	r25, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x52>
    230a:	48 c0       	rjmp	.+144    	; 0x239c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	23 30       	cpi	r18, 0x03	; 3
    2312:	31 05       	cpc	r19, r1
    2314:	0c f0       	brlt	.+2      	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2316:	45 c0       	rjmp	.+138    	; 0x23a2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2322:	39 c0       	rjmp	.+114    	; 0x2396 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2324:	67 c0       	rjmp	.+206    	; 0x23f4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2326:	2b 81       	ldd	r18, Y+3	; 0x03
    2328:	3c 81       	ldd	r19, Y+4	; 0x04
    232a:	26 30       	cpi	r18, 0x06	; 6
    232c:	31 05       	cpc	r19, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2330:	41 c0       	rjmp	.+130    	; 0x23b4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	87 30       	cpi	r24, 0x07	; 7
    2338:	91 05       	cpc	r25, r1
    233a:	0c f0       	brlt	.+2      	; 0x233e <KEYPAD_4x4_adjustKeyNumber+0x84>
    233c:	3e c0       	rjmp	.+124    	; 0x23ba <KEYPAD_4x4_adjustKeyNumber+0x100>
    233e:	37 c0       	rjmp	.+110    	; 0x23ae <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	2c 30       	cpi	r18, 0x0C	; 12
    2346:	31 05       	cpc	r19, r1
    2348:	09 f4       	brne	.+2      	; 0x234c <KEYPAD_4x4_adjustKeyNumber+0x92>
    234a:	46 c0       	rjmp	.+140    	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	8d 30       	cpi	r24, 0x0D	; 13
    2352:	91 05       	cpc	r25, r1
    2354:	5c f4       	brge	.+22     	; 0x236c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2356:	2b 81       	ldd	r18, Y+3	; 0x03
    2358:	3c 81       	ldd	r19, Y+4	; 0x04
    235a:	2a 30       	cpi	r18, 0x0A	; 10
    235c:	31 05       	cpc	r19, r1
    235e:	b1 f1       	breq	.+108    	; 0x23cc <KEYPAD_4x4_adjustKeyNumber+0x112>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	8b 30       	cpi	r24, 0x0B	; 11
    2366:	91 05       	cpc	r25, r1
    2368:	a4 f5       	brge	.+104    	; 0x23d2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    236a:	2d c0       	rjmp	.+90     	; 0x23c6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    236c:	2b 81       	ldd	r18, Y+3	; 0x03
    236e:	3c 81       	ldd	r19, Y+4	; 0x04
    2370:	2e 30       	cpi	r18, 0x0E	; 14
    2372:	31 05       	cpc	r19, r1
    2374:	b9 f1       	breq	.+110    	; 0x23e4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	8e 30       	cpi	r24, 0x0E	; 14
    237c:	91 05       	cpc	r25, r1
    237e:	7c f1       	brlt	.+94     	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x124>
    2380:	2b 81       	ldd	r18, Y+3	; 0x03
    2382:	3c 81       	ldd	r19, Y+4	; 0x04
    2384:	2f 30       	cpi	r18, 0x0F	; 15
    2386:	31 05       	cpc	r19, r1
    2388:	79 f1       	breq	.+94     	; 0x23e8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	80 31       	cpi	r24, 0x10	; 16
    2390:	91 05       	cpc	r25, r1
    2392:	69 f1       	breq	.+90     	; 0x23ee <KEYPAD_4x4_adjustKeyNumber+0x134>
    2394:	2f c0       	rjmp	.+94     	; 0x23f4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2396:	87 e0       	ldi	r24, 0x07	; 7
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	2e c0       	rjmp	.+92     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    239c:	88 e0       	ldi	r24, 0x08	; 8
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	2b c0       	rjmp	.+86     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23a2:	89 e0       	ldi	r24, 0x09	; 9
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	28 c0       	rjmp	.+80     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    23a8:	85 e2       	ldi	r24, 0x25	; 37
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	25 c0       	rjmp	.+74     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    23ae:	84 e0       	ldi	r24, 0x04	; 4
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	22 c0       	rjmp	.+68     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    23b4:	85 e0       	ldi	r24, 0x05	; 5
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	1f c0       	rjmp	.+62     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    23ba:	86 e0       	ldi	r24, 0x06	; 6
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	1c c0       	rjmp	.+56     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    23c0:	8a e2       	ldi	r24, 0x2A	; 42
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	19 c0       	rjmp	.+50     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	16 c0       	rjmp	.+44     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	13 c0       	rjmp	.+38     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	10 c0       	rjmp	.+32     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    23d8:	8d e2       	ldi	r24, 0x2D	; 45
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    23de:	8d e0       	ldi	r24, 0x0D	; 13
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	0a c0       	rjmp	.+20     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    23e4:	19 82       	std	Y+1, r1	; 0x01
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    23e8:	8d e3       	ldi	r24, 0x3D	; 61
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    23ee:	8b e2       	ldi	r24, 0x2B	; 43
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	2e 97       	sbiw	r28, 0x0e	; 14
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	a0 ea       	ldi	r26, 0xA0	; 160
    2436:	b1 e4       	ldi	r27, 0x41	; 65
    2438:	8b 87       	std	Y+11, r24	; 0x0b
    243a:	9c 87       	std	Y+12, r25	; 0x0c
    243c:	ad 87       	std	Y+13, r26	; 0x0d
    243e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2440:	6b 85       	ldd	r22, Y+11	; 0x0b
    2442:	7c 85       	ldd	r23, Y+12	; 0x0c
    2444:	8d 85       	ldd	r24, Y+13	; 0x0d
    2446:	9e 85       	ldd	r25, Y+14	; 0x0e
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	53 e4       	ldi	r21, 0x43	; 67
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	8f 83       	std	Y+7, r24	; 0x07
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	a9 87       	std	Y+9, r26	; 0x09
    245e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	2c f4       	brge	.+10     	; 0x2482 <LCD_init+0x7a>
		__ticks = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2496:	18 16       	cp	r1, r24
    2498:	4c f5       	brge	.+82     	; 0x24ec <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249a:	6b 85       	ldd	r22, Y+11	; 0x0b
    249c:	7c 85       	ldd	r23, Y+12	; 0x0c
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	bc 01       	movw	r22, r24
    24b4:	cd 01       	movw	r24, r26
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	0f c0       	rjmp	.+30     	; 0x24e2 <LCD_init+0xda>
    24c4:	89 e1       	ldi	r24, 0x19	; 25
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9c 83       	std	Y+4, r25	; 0x04
    24ca:	8b 83       	std	Y+3, r24	; 0x03
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_init+0xc8>
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	9e 83       	std	Y+6, r25	; 0x06
    24e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f7       	brne	.-38     	; 0x24c4 <LCD_init+0xbc>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	9a 81       	ldd	r25, Y+2	; 0x02
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_init+0x104>
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	62 e0       	ldi	r22, 0x02	; 2
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	63 e0       	ldi	r22, 0x03	; 3
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    253c:	83 e3       	ldi	r24, 0x33	; 51
    253e:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2542:	82 e3       	ldi	r24, 0x32	; 50
    2544:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2548:	88 e2       	ldi	r24, 0x28	; 40
    254a:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    254e:	8c e0       	ldi	r24, 0x0C	; 12
    2550:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
}
    255a:	2e 96       	adiw	r28, 0x0e	; 14
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	c3 56       	subi	r28, 0x63	; 99
    257a:	d0 40       	sbci	r29, 0x00	; 0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	fe 01       	movw	r30, r28
    2588:	ed 59       	subi	r30, 0x9D	; 157
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2598:	fe 01       	movw	r30, r28
    259a:	e1 5a       	subi	r30, 0xA1	; 161
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	80 83       	st	Z, r24
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	a2 83       	std	Z+2, r26	; 0x02
    25ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	8e 01       	movw	r16, r28
    25b0:	05 5a       	subi	r16, 0xA5	; 165
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e1 5a       	subi	r30, 0xA1	; 161
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a e7       	ldi	r20, 0x7A	; 122
    25c8:	53 e4       	ldi	r21, 0x43	; 67
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	f8 01       	movw	r30, r16
    25d4:	80 83       	st	Z, r24
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	a2 83       	std	Z+2, r26	; 0x02
    25da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 5a       	subi	r30, 0xA5	; 165
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	44 f4       	brge	.+16     	; 0x260a <LCD_sendCommand+0x9e>
		__ticks = 1;
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	64 c0       	rjmp	.+200    	; 0x26d2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    260a:	fe 01       	movw	r30, r28
    260c:	e5 5a       	subi	r30, 0xA5	; 165
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	0c f0       	brlt	.+2      	; 0x262a <LCD_sendCommand+0xbe>
    2628:	43 c0       	rjmp	.+134    	; 0x26b0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262a:	fe 01       	movw	r30, r28
    262c:	e1 5a       	subi	r30, 0xA1	; 161
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8e 01       	movw	r16, r28
    264a:	07 5a       	subi	r16, 0xA7	; 167
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	f8 01       	movw	r30, r16
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	1f c0       	rjmp	.+62     	; 0x26a0 <LCD_sendCommand+0x134>
    2662:	fe 01       	movw	r30, r28
    2664:	e9 5a       	subi	r30, 0xA9	; 169
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	89 e1       	ldi	r24, 0x19	; 25
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	fe 01       	movw	r30, r28
    2672:	e9 5a       	subi	r30, 0xA9	; 169
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_sendCommand+0x10e>
    267e:	fe 01       	movw	r30, r28
    2680:	e9 5a       	subi	r30, 0xA9	; 169
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2688:	de 01       	movw	r26, r28
    268a:	a7 5a       	subi	r26, 0xA7	; 167
    268c:	bf 4f       	sbci	r27, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	e7 5a       	subi	r30, 0xA7	; 167
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	11 96       	adiw	r26, 0x01	; 1
    269c:	9c 93       	st	X, r25
    269e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5a       	subi	r30, 0xA7	; 167
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	d1 f6       	brne	.-76     	; 0x2662 <LCD_sendCommand+0xf6>
    26ae:	27 c0       	rjmp	.+78     	; 0x26fe <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	8e 01       	movw	r16, r28
    26b2:	07 5a       	subi	r16, 0xA7	; 167
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	e5 5a       	subi	r30, 0xA5	; 165
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	de 01       	movw	r26, r28
    26d4:	ab 5a       	subi	r26, 0xAB	; 171
    26d6:	bf 4f       	sbci	r27, 0xFF	; 255
    26d8:	fe 01       	movw	r30, r28
    26da:	e7 5a       	subi	r30, 0xA7	; 167
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	8d 93       	st	X+, r24
    26e4:	9c 93       	st	X, r25
    26e6:	fe 01       	movw	r30, r28
    26e8:	eb 5a       	subi	r30, 0xAB	; 171
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_sendCommand+0x184>
    26f4:	fe 01       	movw	r30, r28
    26f6:	eb 5a       	subi	r30, 0xAB	; 171
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2708:	fe 01       	movw	r30, r28
    270a:	ef 5a       	subi	r30, 0xAF	; 175
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e8       	ldi	r26, 0x80	; 128
    2714:	bf e3       	ldi	r27, 0x3F	; 63
    2716:	80 83       	st	Z, r24
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	a2 83       	std	Z+2, r26	; 0x02
    271c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	8e 01       	movw	r16, r28
    2720:	03 5b       	subi	r16, 0xB3	; 179
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	ef 5a       	subi	r30, 0xAF	; 175
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a e7       	ldi	r20, 0x7A	; 122
    2738:	53 e4       	ldi	r21, 0x43	; 67
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	f8 01       	movw	r30, r16
    2744:	80 83       	st	Z, r24
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	a2 83       	std	Z+2, r26	; 0x02
    274a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274c:	fe 01       	movw	r30, r28
    274e:	e3 5b       	subi	r30, 0xB3	; 179
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	44 f4       	brge	.+16     	; 0x277a <LCD_sendCommand+0x20e>
		__ticks = 1;
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5b       	subi	r30, 0xB5	; 181
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	64 c0       	rjmp	.+200    	; 0x2842 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    277a:	fe 01       	movw	r30, r28
    277c:	e3 5b       	subi	r30, 0xB3	; 179
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	0c f0       	brlt	.+2      	; 0x279a <LCD_sendCommand+0x22e>
    2798:	43 c0       	rjmp	.+134    	; 0x2820 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	fe 01       	movw	r30, r28
    279c:	ef 5a       	subi	r30, 0xAF	; 175
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8e 01       	movw	r16, r28
    27ba:	05 5b       	subi	r16, 0xB5	; 181
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	f8 01       	movw	r30, r16
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	1f c0       	rjmp	.+62     	; 0x2810 <LCD_sendCommand+0x2a4>
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5b       	subi	r30, 0xB7	; 183
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	89 e1       	ldi	r24, 0x19	; 25
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_sendCommand+0x27e>
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 5b       	subi	r30, 0xB7	; 183
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	de 01       	movw	r26, r28
    27fa:	a5 5b       	subi	r26, 0xB5	; 181
    27fc:	bf 4f       	sbci	r27, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e5 5b       	subi	r30, 0xB5	; 181
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	11 96       	adiw	r26, 0x01	; 1
    280c:	9c 93       	st	X, r25
    280e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2810:	fe 01       	movw	r30, r28
    2812:	e5 5b       	subi	r30, 0xB5	; 181
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	d1 f6       	brne	.-76     	; 0x27d2 <LCD_sendCommand+0x266>
    281e:	27 c0       	rjmp	.+78     	; 0x286e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	8e 01       	movw	r16, r28
    2822:	05 5b       	subi	r16, 0xB5	; 181
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	e3 5b       	subi	r30, 0xB3	; 179
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
    2842:	de 01       	movw	r26, r28
    2844:	a9 5b       	subi	r26, 0xB9	; 185
    2846:	bf 4f       	sbci	r27, 0xFF	; 255
    2848:	fe 01       	movw	r30, r28
    284a:	e5 5b       	subi	r30, 0xB5	; 181
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	8d 93       	st	X+, r24
    2854:	9c 93       	st	X, r25
    2856:	fe 01       	movw	r30, r28
    2858:	e9 5b       	subi	r30, 0xB9	; 185
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_sendCommand+0x2f4>
    2864:	fe 01       	movw	r30, r28
    2866:	e9 5b       	subi	r30, 0xB9	; 185
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    286e:	fe 01       	movw	r30, r28
    2870:	ed 59       	subi	r30, 0x9D	; 157
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	80 71       	andi	r24, 0x10	; 16
    287c:	90 70       	andi	r25, 0x00	; 0
    287e:	95 95       	asr	r25
    2880:	87 95       	ror	r24
    2882:	95 95       	asr	r25
    2884:	87 95       	ror	r24
    2886:	95 95       	asr	r25
    2888:	87 95       	ror	r24
    288a:	95 95       	asr	r25
    288c:	87 95       	ror	r24
    288e:	98 2f       	mov	r25, r24
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	49 2f       	mov	r20, r25
    2896:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    289a:	fe 01       	movw	r30, r28
    289c:	ed 59       	subi	r30, 0x9D	; 157
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	80 72       	andi	r24, 0x20	; 32
    28a8:	90 70       	andi	r25, 0x00	; 0
    28aa:	95 95       	asr	r25
    28ac:	87 95       	ror	r24
    28ae:	95 95       	asr	r25
    28b0:	87 95       	ror	r24
    28b2:	95 95       	asr	r25
    28b4:	87 95       	ror	r24
    28b6:	95 95       	asr	r25
    28b8:	87 95       	ror	r24
    28ba:	95 95       	asr	r25
    28bc:	87 95       	ror	r24
    28be:	98 2f       	mov	r25, r24
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	49 2f       	mov	r20, r25
    28c6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 59       	subi	r30, 0x9D	; 157
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	80 74       	andi	r24, 0x40	; 64
    28d8:	90 70       	andi	r25, 0x00	; 0
    28da:	08 2e       	mov	r0, r24
    28dc:	89 2f       	mov	r24, r25
    28de:	00 0c       	add	r0, r0
    28e0:	88 1f       	adc	r24, r24
    28e2:	99 0b       	sbc	r25, r25
    28e4:	00 0c       	add	r0, r0
    28e6:	88 1f       	adc	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	98 2f       	mov	r25, r24
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	62 e0       	ldi	r22, 0x02	; 2
    28f0:	49 2f       	mov	r20, r25
    28f2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    28f6:	fe 01       	movw	r30, r28
    28f8:	ed 59       	subi	r30, 0x9D	; 157
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	98 2f       	mov	r25, r24
    2900:	99 1f       	adc	r25, r25
    2902:	99 27       	eor	r25, r25
    2904:	99 1f       	adc	r25, r25
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	63 e0       	ldi	r22, 0x03	; 3
    290a:	49 2f       	mov	r20, r25
    290c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2910:	fe 01       	movw	r30, r28
    2912:	ed 5b       	subi	r30, 0xBD	; 189
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	8e 01       	movw	r16, r28
    2928:	01 5c       	subi	r16, 0xC1	; 193
    292a:	1f 4f       	sbci	r17, 0xFF	; 255
    292c:	fe 01       	movw	r30, r28
    292e:	ed 5b       	subi	r30, 0xBD	; 189
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a e7       	ldi	r20, 0x7A	; 122
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	f8 01       	movw	r30, r16
    294c:	80 83       	st	Z, r24
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	a2 83       	std	Z+2, r26	; 0x02
    2952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2954:	fe 01       	movw	r30, r28
    2956:	ff 96       	adiw	r30, 0x3f	; 63
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9e af       	std	Y+62, r25	; 0x3e
    2976:	8d af       	std	Y+61, r24	; 0x3d
    2978:	46 c0       	rjmp	.+140    	; 0x2a06 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    297a:	fe 01       	movw	r30, r28
    297c:	ff 96       	adiw	r30, 0x3f	; 63
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	64 f5       	brge	.+88     	; 0x29ee <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	fe 01       	movw	r30, r28
    2998:	ed 5b       	subi	r30, 0xBD	; 189
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e af       	std	Y+62, r25	; 0x3e
    29c2:	8d af       	std	Y+61, r24	; 0x3d
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <LCD_sendCommand+0x478>
    29c6:	89 e1       	ldi	r24, 0x19	; 25
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c af       	std	Y+60, r25	; 0x3c
    29cc:	8b af       	std	Y+59, r24	; 0x3b
    29ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    29d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_sendCommand+0x466>
    29d6:	9c af       	std	Y+60, r25	; 0x3c
    29d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8d ad       	ldd	r24, Y+61	; 0x3d
    29dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9e af       	std	Y+62, r25	; 0x3e
    29e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <LCD_sendCommand+0x45a>
    29ec:	16 c0       	rjmp	.+44     	; 0x2a1a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	fe 01       	movw	r30, r28
    29f0:	ff 96       	adiw	r30, 0x3f	; 63
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e af       	std	Y+62, r25	; 0x3e
    2a04:	8d af       	std	Y+61, r24	; 0x3d
    2a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0a:	9a af       	std	Y+58, r25	; 0x3a
    2a0c:	89 af       	std	Y+57, r24	; 0x39
    2a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_sendCommand+0x4a6>
    2a16:	9a af       	std	Y+58, r25	; 0x3a
    2a18:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	62 e0       	ldi	r22, 0x02	; 2
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e8       	ldi	r26, 0x80	; 128
    2a2a:	bf e3       	ldi	r27, 0x3F	; 63
    2a2c:	8d ab       	std	Y+53, r24	; 0x35
    2a2e:	9e ab       	std	Y+54, r25	; 0x36
    2a30:	af ab       	std	Y+55, r26	; 0x37
    2a32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6d a9       	ldd	r22, Y+53	; 0x35
    2a36:	7e a9       	ldd	r23, Y+54	; 0x36
    2a38:	8f a9       	ldd	r24, Y+55	; 0x37
    2a3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	53 e4       	ldi	r21, 0x43	; 67
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	89 ab       	std	Y+49, r24	; 0x31
    2a4e:	9a ab       	std	Y+50, r25	; 0x32
    2a50:	ab ab       	std	Y+51, r26	; 0x33
    2a52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a54:	69 a9       	ldd	r22, Y+49	; 0x31
    2a56:	7a a9       	ldd	r23, Y+50	; 0x32
    2a58:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a90:	7e a9       	ldd	r23, Y+54	; 0x36
    2a92:	8f a9       	ldd	r24, Y+55	; 0x37
    2a94:	98 ad       	ldd	r25, Y+56	; 0x38
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <LCD_sendCommand+0x56a>
    2ab8:	89 e1       	ldi	r24, 0x19	; 25
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e a7       	std	Y+46, r25	; 0x2e
    2abe:	8d a7       	std	Y+45, r24	; 0x2d
    2ac0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_sendCommand+0x558>
    2ac8:	9e a7       	std	Y+46, r25	; 0x2e
    2aca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <LCD_sendCommand+0x54c>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
    2af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af6:	98 a9       	ldd	r25, Y+48	; 0x30
    2af8:	9c a7       	std	Y+44, r25	; 0x2c
    2afa:	8b a7       	std	Y+43, r24	; 0x2b
    2afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_sendCommand+0x594>
    2b04:	9c a7       	std	Y+44, r25	; 0x2c
    2b06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	62 e0       	ldi	r22, 0x02	; 2
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	a0 e8       	ldi	r26, 0x80	; 128
    2b18:	bf e3       	ldi	r27, 0x3F	; 63
    2b1a:	8f a3       	std	Y+39, r24	; 0x27
    2b1c:	98 a7       	std	Y+40, r25	; 0x28
    2b1e:	a9 a7       	std	Y+41, r26	; 0x29
    2b20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	6f a1       	ldd	r22, Y+39	; 0x27
    2b24:	78 a5       	ldd	r23, Y+40	; 0x28
    2b26:	89 a5       	ldd	r24, Y+41	; 0x29
    2b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a e7       	ldi	r20, 0x7A	; 122
    2b30:	53 e4       	ldi	r21, 0x43	; 67
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8b a3       	std	Y+35, r24	; 0x23
    2b3c:	9c a3       	std	Y+36, r25	; 0x24
    2b3e:	ad a3       	std	Y+37, r26	; 0x25
    2b40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b42:	6b a1       	ldd	r22, Y+35	; 0x23
    2b44:	7c a1       	ldd	r23, Y+36	; 0x24
    2b46:	8d a1       	ldd	r24, Y+37	; 0x25
    2b48:	9e a1       	ldd	r25, Y+38	; 0x26
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9a a3       	std	Y+34, r25	; 0x22
    2b60:	89 a3       	std	Y+33, r24	; 0x21
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2b64:	6b a1       	ldd	r22, Y+35	; 0x23
    2b66:	7c a1       	ldd	r23, Y+36	; 0x24
    2b68:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b80:	89 a5       	ldd	r24, Y+41	; 0x29
    2b82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <LCD_sendCommand+0x658>
    2ba6:	89 e1       	ldi	r24, 0x19	; 25
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	98 a3       	std	Y+32, r25	; 0x20
    2bac:	8f 8f       	std	Y+31, r24	; 0x1f
    2bae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_sendCommand+0x646>
    2bb6:	98 a3       	std	Y+32, r25	; 0x20
    2bb8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <LCD_sendCommand+0x63a>
    2bcc:	14 c0       	rjmp	.+40     	; 0x2bf6 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
    2be2:	89 a1       	ldd	r24, Y+33	; 0x21
    2be4:	9a a1       	ldd	r25, Y+34	; 0x22
    2be6:	9e 8f       	std	Y+30, r25	; 0x1e
    2be8:	8d 8f       	std	Y+29, r24	; 0x1d
    2bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_sendCommand+0x682>
    2bf2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ed 59       	subi	r30, 0x9D	; 157
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	98 2f       	mov	r25, r24
    2c00:	91 70       	andi	r25, 0x01	; 1
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	49 2f       	mov	r20, r25
    2c08:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ed 59       	subi	r30, 0x9D	; 157
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	82 70       	andi	r24, 0x02	; 2
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	98 2f       	mov	r25, r24
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	61 e0       	ldi	r22, 0x01	; 1
    2c26:	49 2f       	mov	r20, r25
    2c28:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 59       	subi	r30, 0x9D	; 157
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	84 70       	andi	r24, 0x04	; 4
    2c3a:	90 70       	andi	r25, 0x00	; 0
    2c3c:	95 95       	asr	r25
    2c3e:	87 95       	ror	r24
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	98 2f       	mov	r25, r24
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	62 e0       	ldi	r22, 0x02	; 2
    2c4a:	49 2f       	mov	r20, r25
    2c4c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 59       	subi	r30, 0x9D	; 157
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	88 70       	andi	r24, 0x08	; 8
    2c5e:	90 70       	andi	r25, 0x00	; 0
    2c60:	95 95       	asr	r25
    2c62:	87 95       	ror	r24
    2c64:	95 95       	asr	r25
    2c66:	87 95       	ror	r24
    2c68:	95 95       	asr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	63 e0       	ldi	r22, 0x03	; 3
    2c72:	49 2f       	mov	r20, r25
    2c74:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	89 8f       	std	Y+25, r24	; 0x19
    2c82:	9a 8f       	std	Y+26, r25	; 0x1a
    2c84:	ab 8f       	std	Y+27, r26	; 0x1b
    2c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	53 e4       	ldi	r21, 0x43	; 67
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	af 8b       	std	Y+23, r26	; 0x17
    2ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_sendCommand+0x75e>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_sendCommand+0x7be>
    2d0c:	89 e1       	ldi	r24, 0x19	; 25
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9a 8b       	std	Y+18, r25	; 0x12
    2d12:	89 8b       	std	Y+17, r24	; 0x11
    2d14:	89 89       	ldd	r24, Y+17	; 0x11
    2d16:	9a 89       	ldd	r25, Y+18	; 0x12
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_sendCommand+0x7ac>
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_sendCommand+0x7a0>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6d 89       	ldd	r22, Y+21	; 0x15
    2d36:	7e 89       	ldd	r23, Y+22	; 0x16
    2d38:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	98 8b       	std	Y+16, r25	; 0x10
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	98 89       	ldd	r25, Y+16	; 0x10
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_sendCommand+0x7e8>
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e8       	ldi	r26, 0x80	; 128
    2d6c:	bf e3       	ldi	r27, 0x3F	; 63
    2d6e:	8b 87       	std	Y+11, r24	; 0x0b
    2d70:	9c 87       	std	Y+12, r25	; 0x0c
    2d72:	ad 87       	std	Y+13, r26	; 0x0d
    2d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a e7       	ldi	r20, 0x7A	; 122
    2d84:	53 e4       	ldi	r21, 0x43	; 67
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8f 83       	std	Y+7, r24	; 0x07
    2d90:	98 87       	std	Y+8, r25	; 0x08
    2d92:	a9 87       	std	Y+9, r26	; 0x09
    2d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_sendCommand+0x8ac>
    2dfa:	89 e1       	ldi	r24, 0x19	; 25
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_sendCommand+0x89a>
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_sendCommand+0x88e>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_sendCommand+0x8d6>
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e4a:	cd 59       	subi	r28, 0x9D	; 157
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	08 95       	ret

00002e62 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	c3 56       	subi	r28, 0x63	; 99
    2e70:	d0 40       	sbci	r29, 0x00	; 0
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ed 59       	subi	r30, 0x9D	; 157
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	61 e0       	ldi	r22, 0x01	; 1
    2e88:	41 e0       	ldi	r20, 0x01	; 1
    2e8a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e1 5a       	subi	r30, 0xA1	; 161
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 e8       	ldi	r26, 0x80	; 128
    2e9a:	bf e3       	ldi	r27, 0x3F	; 63
    2e9c:	80 83       	st	Z, r24
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	a2 83       	std	Z+2, r26	; 0x02
    2ea2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	8e 01       	movw	r16, r28
    2ea6:	05 5a       	subi	r16, 0xA5	; 165
    2ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e1 5a       	subi	r30, 0xA1	; 161
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a e7       	ldi	r20, 0x7A	; 122
    2ebe:	53 e4       	ldi	r21, 0x43	; 67
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	f8 01       	movw	r30, r16
    2eca:	80 83       	st	Z, r24
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	a2 83       	std	Z+2, r26	; 0x02
    2ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e5 5a       	subi	r30, 0xA5	; 165
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e8       	ldi	r20, 0x80	; 128
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eec:	88 23       	and	r24, r24
    2eee:	44 f4       	brge	.+16     	; 0x2f00 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e7 5a       	subi	r30, 0xA7	; 167
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	64 c0       	rjmp	.+200    	; 0x2fc8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2f00:	fe 01       	movw	r30, r28
    2f02:	e5 5a       	subi	r30, 0xA5	; 165
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <LCD_displayCharacter+0xbe>
    2f1e:	43 c0       	rjmp	.+134    	; 0x2fa6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	fe 01       	movw	r30, r28
    2f22:	e1 5a       	subi	r30, 0xA1	; 161
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e2       	ldi	r20, 0x20	; 32
    2f34:	51 e4       	ldi	r21, 0x41	; 65
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	8e 01       	movw	r16, r28
    2f40:	07 5a       	subi	r16, 0xA7	; 167
    2f42:	1f 4f       	sbci	r17, 0xFF	; 255
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	f8 01       	movw	r30, r16
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	80 83       	st	Z, r24
    2f56:	1f c0       	rjmp	.+62     	; 0x2f96 <LCD_displayCharacter+0x134>
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e9 5a       	subi	r30, 0xA9	; 169
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	89 e1       	ldi	r24, 0x19	; 25
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
    2f66:	fe 01       	movw	r30, r28
    2f68:	e9 5a       	subi	r30, 0xA9	; 169
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 81       	ld	r24, Z
    2f6e:	91 81       	ldd	r25, Z+1	; 0x01
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_displayCharacter+0x10e>
    2f74:	fe 01       	movw	r30, r28
    2f76:	e9 5a       	subi	r30, 0xA9	; 169
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7e:	de 01       	movw	r26, r28
    2f80:	a7 5a       	subi	r26, 0xA7	; 167
    2f82:	bf 4f       	sbci	r27, 0xFF	; 255
    2f84:	fe 01       	movw	r30, r28
    2f86:	e7 5a       	subi	r30, 0xA7	; 167
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	11 96       	adiw	r26, 0x01	; 1
    2f92:	9c 93       	st	X, r25
    2f94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	fe 01       	movw	r30, r28
    2f98:	e7 5a       	subi	r30, 0xA7	; 167
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	d1 f6       	brne	.-76     	; 0x2f58 <LCD_displayCharacter+0xf6>
    2fa4:	27 c0       	rjmp	.+78     	; 0x2ff4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa6:	8e 01       	movw	r16, r28
    2fa8:	07 5a       	subi	r16, 0xA7	; 167
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	fe 01       	movw	r30, r28
    2fae:	e5 5a       	subi	r30, 0xA5	; 165
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	80 83       	st	Z, r24
    2fc8:	de 01       	movw	r26, r28
    2fca:	ab 5a       	subi	r26, 0xAB	; 171
    2fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e7 5a       	subi	r30, 0xA7	; 167
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	91 81       	ldd	r25, Z+1	; 0x01
    2fd8:	8d 93       	st	X+, r24
    2fda:	9c 93       	st	X, r25
    2fdc:	fe 01       	movw	r30, r28
    2fde:	eb 5a       	subi	r30, 0xAB	; 171
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x184>
    2fea:	fe 01       	movw	r30, r28
    2fec:	eb 5a       	subi	r30, 0xAB	; 171
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	62 e0       	ldi	r22, 0x02	; 2
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    2ffe:	fe 01       	movw	r30, r28
    3000:	ef 5a       	subi	r30, 0xAF	; 175
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a0 e8       	ldi	r26, 0x80	; 128
    300a:	bf e3       	ldi	r27, 0x3F	; 63
    300c:	80 83       	st	Z, r24
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	a2 83       	std	Z+2, r26	; 0x02
    3012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	8e 01       	movw	r16, r28
    3016:	03 5b       	subi	r16, 0xB3	; 179
    3018:	1f 4f       	sbci	r17, 0xFF	; 255
    301a:	fe 01       	movw	r30, r28
    301c:	ef 5a       	subi	r30, 0xAF	; 175
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	4a e7       	ldi	r20, 0x7A	; 122
    302e:	53 e4       	ldi	r21, 0x43	; 67
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	f8 01       	movw	r30, r16
    303a:	80 83       	st	Z, r24
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	a2 83       	std	Z+2, r26	; 0x02
    3040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3042:	fe 01       	movw	r30, r28
    3044:	e3 5b       	subi	r30, 0xB3	; 179
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	60 81       	ld	r22, Z
    304a:	71 81       	ldd	r23, Z+1	; 0x01
    304c:	82 81       	ldd	r24, Z+2	; 0x02
    304e:	93 81       	ldd	r25, Z+3	; 0x03
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	44 f4       	brge	.+16     	; 0x3070 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3060:	fe 01       	movw	r30, r28
    3062:	e5 5b       	subi	r30, 0xB5	; 181
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
    306e:	64 c0       	rjmp	.+200    	; 0x3138 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3070:	fe 01       	movw	r30, r28
    3072:	e3 5b       	subi	r30, 0xB3	; 179
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	3f ef       	ldi	r19, 0xFF	; 255
    3082:	4f e7       	ldi	r20, 0x7F	; 127
    3084:	57 e4       	ldi	r21, 0x47	; 71
    3086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    308a:	18 16       	cp	r1, r24
    308c:	0c f0       	brlt	.+2      	; 0x3090 <LCD_displayCharacter+0x22e>
    308e:	43 c0       	rjmp	.+134    	; 0x3116 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	fe 01       	movw	r30, r28
    3092:	ef 5a       	subi	r30, 0xAF	; 175
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	60 81       	ld	r22, Z
    3098:	71 81       	ldd	r23, Z+1	; 0x01
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	93 81       	ldd	r25, Z+3	; 0x03
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8e 01       	movw	r16, r28
    30b0:	05 5b       	subi	r16, 0xB5	; 181
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	f8 01       	movw	r30, r16
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
    30c6:	1f c0       	rjmp	.+62     	; 0x3106 <LCD_displayCharacter+0x2a4>
    30c8:	fe 01       	movw	r30, r28
    30ca:	e7 5b       	subi	r30, 0xB7	; 183
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	89 e1       	ldi	r24, 0x19	; 25
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	80 83       	st	Z, r24
    30d6:	fe 01       	movw	r30, r28
    30d8:	e7 5b       	subi	r30, 0xB7	; 183
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <LCD_displayCharacter+0x27e>
    30e4:	fe 01       	movw	r30, r28
    30e6:	e7 5b       	subi	r30, 0xB7	; 183
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	de 01       	movw	r26, r28
    30f0:	a5 5b       	subi	r26, 0xB5	; 181
    30f2:	bf 4f       	sbci	r27, 0xFF	; 255
    30f4:	fe 01       	movw	r30, r28
    30f6:	e5 5b       	subi	r30, 0xB5	; 181
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	11 96       	adiw	r26, 0x01	; 1
    3102:	9c 93       	st	X, r25
    3104:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	fe 01       	movw	r30, r28
    3108:	e5 5b       	subi	r30, 0xB5	; 181
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	d1 f6       	brne	.-76     	; 0x30c8 <LCD_displayCharacter+0x266>
    3114:	27 c0       	rjmp	.+78     	; 0x3164 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3116:	8e 01       	movw	r16, r28
    3118:	05 5b       	subi	r16, 0xB5	; 181
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	e3 5b       	subi	r30, 0xB3	; 179
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	f8 01       	movw	r30, r16
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	de 01       	movw	r26, r28
    313a:	a9 5b       	subi	r26, 0xB9	; 185
    313c:	bf 4f       	sbci	r27, 0xFF	; 255
    313e:	fe 01       	movw	r30, r28
    3140:	e5 5b       	subi	r30, 0xB5	; 181
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	8d 93       	st	X+, r24
    314a:	9c 93       	st	X, r25
    314c:	fe 01       	movw	r30, r28
    314e:	e9 5b       	subi	r30, 0xB9	; 185
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <LCD_displayCharacter+0x2f4>
    315a:	fe 01       	movw	r30, r28
    315c:	e9 5b       	subi	r30, 0xB9	; 185
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3164:	fe 01       	movw	r30, r28
    3166:	ed 59       	subi	r30, 0x9D	; 157
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	80 71       	andi	r24, 0x10	; 16
    3172:	90 70       	andi	r25, 0x00	; 0
    3174:	95 95       	asr	r25
    3176:	87 95       	ror	r24
    3178:	95 95       	asr	r25
    317a:	87 95       	ror	r24
    317c:	95 95       	asr	r25
    317e:	87 95       	ror	r24
    3180:	95 95       	asr	r25
    3182:	87 95       	ror	r24
    3184:	98 2f       	mov	r25, r24
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	49 2f       	mov	r20, r25
    318c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    3190:	fe 01       	movw	r30, r28
    3192:	ed 59       	subi	r30, 0x9D	; 157
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	80 72       	andi	r24, 0x20	; 32
    319e:	90 70       	andi	r25, 0x00	; 0
    31a0:	95 95       	asr	r25
    31a2:	87 95       	ror	r24
    31a4:	95 95       	asr	r25
    31a6:	87 95       	ror	r24
    31a8:	95 95       	asr	r25
    31aa:	87 95       	ror	r24
    31ac:	95 95       	asr	r25
    31ae:	87 95       	ror	r24
    31b0:	95 95       	asr	r25
    31b2:	87 95       	ror	r24
    31b4:	98 2f       	mov	r25, r24
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	49 2f       	mov	r20, r25
    31bc:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    31c0:	fe 01       	movw	r30, r28
    31c2:	ed 59       	subi	r30, 0x9D	; 157
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	88 2f       	mov	r24, r24
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	80 74       	andi	r24, 0x40	; 64
    31ce:	90 70       	andi	r25, 0x00	; 0
    31d0:	08 2e       	mov	r0, r24
    31d2:	89 2f       	mov	r24, r25
    31d4:	00 0c       	add	r0, r0
    31d6:	88 1f       	adc	r24, r24
    31d8:	99 0b       	sbc	r25, r25
    31da:	00 0c       	add	r0, r0
    31dc:	88 1f       	adc	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	98 2f       	mov	r25, r24
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	62 e0       	ldi	r22, 0x02	; 2
    31e6:	49 2f       	mov	r20, r25
    31e8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    31ec:	fe 01       	movw	r30, r28
    31ee:	ed 59       	subi	r30, 0x9D	; 157
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	80 81       	ld	r24, Z
    31f4:	98 2f       	mov	r25, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	99 27       	eor	r25, r25
    31fa:	99 1f       	adc	r25, r25
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	63 e0       	ldi	r22, 0x03	; 3
    3200:	49 2f       	mov	r20, r25
    3202:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    3206:	fe 01       	movw	r30, r28
    3208:	ed 5b       	subi	r30, 0xBD	; 189
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e8       	ldi	r26, 0x80	; 128
    3212:	bf e3       	ldi	r27, 0x3F	; 63
    3214:	80 83       	st	Z, r24
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	a2 83       	std	Z+2, r26	; 0x02
    321a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	8e 01       	movw	r16, r28
    321e:	01 5c       	subi	r16, 0xC1	; 193
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	ed 5b       	subi	r30, 0xBD	; 189
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	4a e7       	ldi	r20, 0x7A	; 122
    3236:	53 e4       	ldi	r21, 0x43	; 67
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	f8 01       	movw	r30, r16
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    324a:	fe 01       	movw	r30, r28
    324c:	ff 96       	adiw	r30, 0x3f	; 63
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e8       	ldi	r20, 0x80	; 128
    325c:	5f e3       	ldi	r21, 0x3F	; 63
    325e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3262:	88 23       	and	r24, r24
    3264:	2c f4       	brge	.+10     	; 0x3270 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9e af       	std	Y+62, r25	; 0x3e
    326c:	8d af       	std	Y+61, r24	; 0x3d
    326e:	46 c0       	rjmp	.+140    	; 0x32fc <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3270:	fe 01       	movw	r30, r28
    3272:	ff 96       	adiw	r30, 0x3f	; 63
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	3f ef       	ldi	r19, 0xFF	; 255
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	57 e4       	ldi	r21, 0x47	; 71
    3284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	64 f5       	brge	.+88     	; 0x32e4 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328c:	fe 01       	movw	r30, r28
    328e:	ed 5b       	subi	r30, 0xBD	; 189
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9e af       	std	Y+62, r25	; 0x3e
    32b8:	8d af       	std	Y+61, r24	; 0x3d
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <LCD_displayCharacter+0x478>
    32bc:	89 e1       	ldi	r24, 0x19	; 25
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c af       	std	Y+60, r25	; 0x3c
    32c2:	8b af       	std	Y+59, r24	; 0x3b
    32c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    32c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <LCD_displayCharacter+0x466>
    32cc:	9c af       	std	Y+60, r25	; 0x3c
    32ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    32d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	9e af       	std	Y+62, r25	; 0x3e
    32d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32da:	8d ad       	ldd	r24, Y+61	; 0x3d
    32dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	69 f7       	brne	.-38     	; 0x32bc <LCD_displayCharacter+0x45a>
    32e2:	16 c0       	rjmp	.+44     	; 0x3310 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	fe 01       	movw	r30, r28
    32e6:	ff 96       	adiw	r30, 0x3f	; 63
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9e af       	std	Y+62, r25	; 0x3e
    32fa:	8d af       	std	Y+61, r24	; 0x3d
    32fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    32fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3300:	9a af       	std	Y+58, r25	; 0x3a
    3302:	89 af       	std	Y+57, r24	; 0x39
    3304:	89 ad       	ldd	r24, Y+57	; 0x39
    3306:	9a ad       	ldd	r25, Y+58	; 0x3a
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <LCD_displayCharacter+0x4a6>
    330c:	9a af       	std	Y+58, r25	; 0x3a
    330e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	62 e0       	ldi	r22, 0x02	; 2
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	a0 e8       	ldi	r26, 0x80	; 128
    3320:	bf e3       	ldi	r27, 0x3F	; 63
    3322:	8d ab       	std	Y+53, r24	; 0x35
    3324:	9e ab       	std	Y+54, r25	; 0x36
    3326:	af ab       	std	Y+55, r26	; 0x37
    3328:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332a:	6d a9       	ldd	r22, Y+53	; 0x35
    332c:	7e a9       	ldd	r23, Y+54	; 0x36
    332e:	8f a9       	ldd	r24, Y+55	; 0x37
    3330:	98 ad       	ldd	r25, Y+56	; 0x38
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	53 e4       	ldi	r21, 0x43	; 67
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	89 ab       	std	Y+49, r24	; 0x31
    3344:	9a ab       	std	Y+50, r25	; 0x32
    3346:	ab ab       	std	Y+51, r26	; 0x33
    3348:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    334a:	69 a9       	ldd	r22, Y+49	; 0x31
    334c:	7a a9       	ldd	r23, Y+50	; 0x32
    334e:	8b a9       	ldd	r24, Y+51	; 0x33
    3350:	9c a9       	ldd	r25, Y+52	; 0x34
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e8       	ldi	r20, 0x80	; 128
    3358:	5f e3       	ldi	r21, 0x3F	; 63
    335a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    335e:	88 23       	and	r24, r24
    3360:	2c f4       	brge	.+10     	; 0x336c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	98 ab       	std	Y+48, r25	; 0x30
    3368:	8f a7       	std	Y+47, r24	; 0x2f
    336a:	3f c0       	rjmp	.+126    	; 0x33ea <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    336c:	69 a9       	ldd	r22, Y+49	; 0x31
    336e:	7a a9       	ldd	r23, Y+50	; 0x32
    3370:	8b a9       	ldd	r24, Y+51	; 0x33
    3372:	9c a9       	ldd	r25, Y+52	; 0x34
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	3f ef       	ldi	r19, 0xFF	; 255
    3378:	4f e7       	ldi	r20, 0x7F	; 127
    337a:	57 e4       	ldi	r21, 0x47	; 71
    337c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3380:	18 16       	cp	r1, r24
    3382:	4c f5       	brge	.+82     	; 0x33d6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3384:	6d a9       	ldd	r22, Y+53	; 0x35
    3386:	7e a9       	ldd	r23, Y+54	; 0x36
    3388:	8f a9       	ldd	r24, Y+55	; 0x37
    338a:	98 ad       	ldd	r25, Y+56	; 0x38
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e2       	ldi	r20, 0x20	; 32
    3392:	51 e4       	ldi	r21, 0x41	; 65
    3394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	bc 01       	movw	r22, r24
    339e:	cd 01       	movw	r24, r26
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	98 ab       	std	Y+48, r25	; 0x30
    33aa:	8f a7       	std	Y+47, r24	; 0x2f
    33ac:	0f c0       	rjmp	.+30     	; 0x33cc <LCD_displayCharacter+0x56a>
    33ae:	89 e1       	ldi	r24, 0x19	; 25
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9e a7       	std	Y+46, r25	; 0x2e
    33b4:	8d a7       	std	Y+45, r24	; 0x2d
    33b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <LCD_displayCharacter+0x558>
    33be:	9e a7       	std	Y+46, r25	; 0x2e
    33c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33c4:	98 a9       	ldd	r25, Y+48	; 0x30
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	98 ab       	std	Y+48, r25	; 0x30
    33ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ce:	98 a9       	ldd	r25, Y+48	; 0x30
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	69 f7       	brne	.-38     	; 0x33ae <LCD_displayCharacter+0x54c>
    33d4:	14 c0       	rjmp	.+40     	; 0x33fe <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d6:	69 a9       	ldd	r22, Y+49	; 0x31
    33d8:	7a a9       	ldd	r23, Y+50	; 0x32
    33da:	8b a9       	ldd	r24, Y+51	; 0x33
    33dc:	9c a9       	ldd	r25, Y+52	; 0x34
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	98 ab       	std	Y+48, r25	; 0x30
    33e8:	8f a7       	std	Y+47, r24	; 0x2f
    33ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ec:	98 a9       	ldd	r25, Y+48	; 0x30
    33ee:	9c a7       	std	Y+44, r25	; 0x2c
    33f0:	8b a7       	std	Y+43, r24	; 0x2b
    33f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <LCD_displayCharacter+0x594>
    33fa:	9c a7       	std	Y+44, r25	; 0x2c
    33fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	62 e0       	ldi	r22, 0x02	; 2
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a0 e8       	ldi	r26, 0x80	; 128
    340e:	bf e3       	ldi	r27, 0x3F	; 63
    3410:	8f a3       	std	Y+39, r24	; 0x27
    3412:	98 a7       	std	Y+40, r25	; 0x28
    3414:	a9 a7       	std	Y+41, r26	; 0x29
    3416:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	6f a1       	ldd	r22, Y+39	; 0x27
    341a:	78 a5       	ldd	r23, Y+40	; 0x28
    341c:	89 a5       	ldd	r24, Y+41	; 0x29
    341e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	4a e7       	ldi	r20, 0x7A	; 122
    3426:	53 e4       	ldi	r21, 0x43	; 67
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8b a3       	std	Y+35, r24	; 0x23
    3432:	9c a3       	std	Y+36, r25	; 0x24
    3434:	ad a3       	std	Y+37, r26	; 0x25
    3436:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3438:	6b a1       	ldd	r22, Y+35	; 0x23
    343a:	7c a1       	ldd	r23, Y+36	; 0x24
    343c:	8d a1       	ldd	r24, Y+37	; 0x25
    343e:	9e a1       	ldd	r25, Y+38	; 0x26
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	2c f4       	brge	.+10     	; 0x345a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9a a3       	std	Y+34, r25	; 0x22
    3456:	89 a3       	std	Y+33, r24	; 0x21
    3458:	3f c0       	rjmp	.+126    	; 0x34d8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    345a:	6b a1       	ldd	r22, Y+35	; 0x23
    345c:	7c a1       	ldd	r23, Y+36	; 0x24
    345e:	8d a1       	ldd	r24, Y+37	; 0x25
    3460:	9e a1       	ldd	r25, Y+38	; 0x26
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	4c f5       	brge	.+82     	; 0x34c4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3472:	6f a1       	ldd	r22, Y+39	; 0x27
    3474:	78 a5       	ldd	r23, Y+40	; 0x28
    3476:	89 a5       	ldd	r24, Y+41	; 0x29
    3478:	9a a5       	ldd	r25, Y+42	; 0x2a
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e2       	ldi	r20, 0x20	; 32
    3480:	51 e4       	ldi	r21, 0x41	; 65
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9a a3       	std	Y+34, r25	; 0x22
    3498:	89 a3       	std	Y+33, r24	; 0x21
    349a:	0f c0       	rjmp	.+30     	; 0x34ba <LCD_displayCharacter+0x658>
    349c:	89 e1       	ldi	r24, 0x19	; 25
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	98 a3       	std	Y+32, r25	; 0x20
    34a2:	8f 8f       	std	Y+31, r24	; 0x1f
    34a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a6:	98 a1       	ldd	r25, Y+32	; 0x20
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <LCD_displayCharacter+0x646>
    34ac:	98 a3       	std	Y+32, r25	; 0x20
    34ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b0:	89 a1       	ldd	r24, Y+33	; 0x21
    34b2:	9a a1       	ldd	r25, Y+34	; 0x22
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	9a a3       	std	Y+34, r25	; 0x22
    34b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	89 a1       	ldd	r24, Y+33	; 0x21
    34bc:	9a a1       	ldd	r25, Y+34	; 0x22
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	69 f7       	brne	.-38     	; 0x349c <LCD_displayCharacter+0x63a>
    34c2:	14 c0       	rjmp	.+40     	; 0x34ec <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c4:	6b a1       	ldd	r22, Y+35	; 0x23
    34c6:	7c a1       	ldd	r23, Y+36	; 0x24
    34c8:	8d a1       	ldd	r24, Y+37	; 0x25
    34ca:	9e a1       	ldd	r25, Y+38	; 0x26
    34cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9a a3       	std	Y+34, r25	; 0x22
    34d6:	89 a3       	std	Y+33, r24	; 0x21
    34d8:	89 a1       	ldd	r24, Y+33	; 0x21
    34da:	9a a1       	ldd	r25, Y+34	; 0x22
    34dc:	9e 8f       	std	Y+30, r25	; 0x1e
    34de:	8d 8f       	std	Y+29, r24	; 0x1d
    34e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <LCD_displayCharacter+0x682>
    34e8:	9e 8f       	std	Y+30, r25	; 0x1e
    34ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    34ec:	fe 01       	movw	r30, r28
    34ee:	ed 59       	subi	r30, 0x9D	; 157
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	98 2f       	mov	r25, r24
    34f6:	91 70       	andi	r25, 0x01	; 1
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	49 2f       	mov	r20, r25
    34fe:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3502:	fe 01       	movw	r30, r28
    3504:	ed 59       	subi	r30, 0x9D	; 157
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	82 70       	andi	r24, 0x02	; 2
    3510:	90 70       	andi	r25, 0x00	; 0
    3512:	95 95       	asr	r25
    3514:	87 95       	ror	r24
    3516:	98 2f       	mov	r25, r24
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	61 e0       	ldi	r22, 0x01	; 1
    351c:	49 2f       	mov	r20, r25
    351e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3522:	fe 01       	movw	r30, r28
    3524:	ed 59       	subi	r30, 0x9D	; 157
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	84 70       	andi	r24, 0x04	; 4
    3530:	90 70       	andi	r25, 0x00	; 0
    3532:	95 95       	asr	r25
    3534:	87 95       	ror	r24
    3536:	95 95       	asr	r25
    3538:	87 95       	ror	r24
    353a:	98 2f       	mov	r25, r24
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	62 e0       	ldi	r22, 0x02	; 2
    3540:	49 2f       	mov	r20, r25
    3542:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3546:	fe 01       	movw	r30, r28
    3548:	ed 59       	subi	r30, 0x9D	; 157
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	88 2f       	mov	r24, r24
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	88 70       	andi	r24, 0x08	; 8
    3554:	90 70       	andi	r25, 0x00	; 0
    3556:	95 95       	asr	r25
    3558:	87 95       	ror	r24
    355a:	95 95       	asr	r25
    355c:	87 95       	ror	r24
    355e:	95 95       	asr	r25
    3560:	87 95       	ror	r24
    3562:	98 2f       	mov	r25, r24
    3564:	82 e0       	ldi	r24, 0x02	; 2
    3566:	63 e0       	ldi	r22, 0x03	; 3
    3568:	49 2f       	mov	r20, r25
    356a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a0 e8       	ldi	r26, 0x80	; 128
    3574:	bf e3       	ldi	r27, 0x3F	; 63
    3576:	89 8f       	std	Y+25, r24	; 0x19
    3578:	9a 8f       	std	Y+26, r25	; 0x1a
    357a:	ab 8f       	std	Y+27, r26	; 0x1b
    357c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	69 8d       	ldd	r22, Y+25	; 0x19
    3580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4a e7       	ldi	r20, 0x7A	; 122
    358c:	53 e4       	ldi	r21, 0x43	; 67
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	8d 8b       	std	Y+21, r24	; 0x15
    3598:	9e 8b       	std	Y+22, r25	; 0x16
    359a:	af 8b       	std	Y+23, r26	; 0x17
    359c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e8       	ldi	r20, 0x80	; 128
    35ac:	5f e3       	ldi	r21, 0x3F	; 63
    35ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b2:	88 23       	and	r24, r24
    35b4:	2c f4       	brge	.+10     	; 0x35c0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	9c 8b       	std	Y+20, r25	; 0x14
    35bc:	8b 8b       	std	Y+19, r24	; 0x13
    35be:	3f c0       	rjmp	.+126    	; 0x363e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    35c0:	6d 89       	ldd	r22, Y+21	; 0x15
    35c2:	7e 89       	ldd	r23, Y+22	; 0x16
    35c4:	8f 89       	ldd	r24, Y+23	; 0x17
    35c6:	98 8d       	ldd	r25, Y+24	; 0x18
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	4c f5       	brge	.+82     	; 0x362a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	69 8d       	ldd	r22, Y+25	; 0x19
    35da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e2       	ldi	r20, 0x20	; 32
    35e6:	51 e4       	ldi	r21, 0x41	; 65
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9c 8b       	std	Y+20, r25	; 0x14
    35fe:	8b 8b       	std	Y+19, r24	; 0x13
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <LCD_displayCharacter+0x7be>
    3602:	89 e1       	ldi	r24, 0x19	; 25
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	9a 8b       	std	Y+18, r25	; 0x12
    3608:	89 8b       	std	Y+17, r24	; 0x11
    360a:	89 89       	ldd	r24, Y+17	; 0x11
    360c:	9a 89       	ldd	r25, Y+18	; 0x12
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <LCD_displayCharacter+0x7ac>
    3612:	9a 8b       	std	Y+18, r25	; 0x12
    3614:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3616:	8b 89       	ldd	r24, Y+19	; 0x13
    3618:	9c 89       	ldd	r25, Y+20	; 0x14
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9c 8b       	std	Y+20, r25	; 0x14
    361e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3620:	8b 89       	ldd	r24, Y+19	; 0x13
    3622:	9c 89       	ldd	r25, Y+20	; 0x14
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	69 f7       	brne	.-38     	; 0x3602 <LCD_displayCharacter+0x7a0>
    3628:	14 c0       	rjmp	.+40     	; 0x3652 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362a:	6d 89       	ldd	r22, Y+21	; 0x15
    362c:	7e 89       	ldd	r23, Y+22	; 0x16
    362e:	8f 89       	ldd	r24, Y+23	; 0x17
    3630:	98 8d       	ldd	r25, Y+24	; 0x18
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9c 8b       	std	Y+20, r25	; 0x14
    363c:	8b 8b       	std	Y+19, r24	; 0x13
    363e:	8b 89       	ldd	r24, Y+19	; 0x13
    3640:	9c 89       	ldd	r25, Y+20	; 0x14
    3642:	98 8b       	std	Y+16, r25	; 0x10
    3644:	8f 87       	std	Y+15, r24	; 0x0f
    3646:	8f 85       	ldd	r24, Y+15	; 0x0f
    3648:	98 89       	ldd	r25, Y+16	; 0x10
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_displayCharacter+0x7e8>
    364e:	98 8b       	std	Y+16, r25	; 0x10
    3650:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	62 e0       	ldi	r22, 0x02	; 2
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <GPIO_writePin>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	a0 e8       	ldi	r26, 0x80	; 128
    3662:	bf e3       	ldi	r27, 0x3F	; 63
    3664:	8b 87       	std	Y+11, r24	; 0x0b
    3666:	9c 87       	std	Y+12, r25	; 0x0c
    3668:	ad 87       	std	Y+13, r26	; 0x0d
    366a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	6b 85       	ldd	r22, Y+11	; 0x0b
    366e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3670:	8d 85       	ldd	r24, Y+13	; 0x0d
    3672:	9e 85       	ldd	r25, Y+14	; 0x0e
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4a e7       	ldi	r20, 0x7A	; 122
    367a:	53 e4       	ldi	r21, 0x43	; 67
    367c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	8f 83       	std	Y+7, r24	; 0x07
    3686:	98 87       	std	Y+8, r25	; 0x08
    3688:	a9 87       	std	Y+9, r26	; 0x09
    368a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    368c:	6f 81       	ldd	r22, Y+7	; 0x07
    368e:	78 85       	ldd	r23, Y+8	; 0x08
    3690:	89 85       	ldd	r24, Y+9	; 0x09
    3692:	9a 85       	ldd	r25, Y+10	; 0x0a
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	2c f4       	brge	.+10     	; 0x36ae <LCD_displayCharacter+0x84c>
		__ticks = 1;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    36ae:	6f 81       	ldd	r22, Y+7	; 0x07
    36b0:	78 85       	ldd	r23, Y+8	; 0x08
    36b2:	89 85       	ldd	r24, Y+9	; 0x09
    36b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	3f ef       	ldi	r19, 0xFF	; 255
    36ba:	4f e7       	ldi	r20, 0x7F	; 127
    36bc:	57 e4       	ldi	r21, 0x47	; 71
    36be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36c2:	18 16       	cp	r1, r24
    36c4:	4c f5       	brge	.+82     	; 0x3718 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    36cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e2       	ldi	r20, 0x20	; 32
    36d4:	51 e4       	ldi	r21, 0x41	; 65
    36d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9e 83       	std	Y+6, r25	; 0x06
    36ec:	8d 83       	std	Y+5, r24	; 0x05
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <LCD_displayCharacter+0x8ac>
    36f0:	89 e1       	ldi	r24, 0x19	; 25
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	8b 83       	std	Y+3, r24	; 0x03
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	9c 81       	ldd	r25, Y+4	; 0x04
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	f1 f7       	brne	.-4      	; 0x36fc <LCD_displayCharacter+0x89a>
    3700:	9c 83       	std	Y+4, r25	; 0x04
    3702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	9e 83       	std	Y+6, r25	; 0x06
    370c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370e:	8d 81       	ldd	r24, Y+5	; 0x05
    3710:	9e 81       	ldd	r25, Y+6	; 0x06
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	69 f7       	brne	.-38     	; 0x36f0 <LCD_displayCharacter+0x88e>
    3716:	14 c0       	rjmp	.+40     	; 0x3740 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	6f 81       	ldd	r22, Y+7	; 0x07
    371a:	78 85       	ldd	r23, Y+8	; 0x08
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	01 97       	sbiw	r24, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <LCD_displayCharacter+0x8d6>
    373c:	9a 83       	std	Y+2, r25	; 0x02
    373e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3740:	cd 59       	subi	r28, 0x9D	; 157
    3742:	df 4f       	sbci	r29, 0xFF	; 255
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	de bf       	out	0x3e, r29	; 62
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	cd bf       	out	0x3d, r28	; 61
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	08 95       	ret

00003758 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	00 d0       	rcall	.+0      	; 0x375e <LCD_displayString+0x6>
    375e:	0f 92       	push	r0
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	9b 83       	std	Y+3, r25	; 0x03
    3766:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3768:	19 82       	std	Y+1, r1	; 0x01
    376a:	0e c0       	rjmp	.+28     	; 0x3788 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	9b 81       	ldd	r25, Y+3	; 0x03
    3776:	fc 01       	movw	r30, r24
    3778:	e2 0f       	add	r30, r18
    377a:	f3 1f       	adc	r31, r19
    377c:	80 81       	ld	r24, Z
    377e:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayCharacter>
		i++;
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	8f 5f       	subi	r24, 0xFF	; 255
    3786:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	fc 01       	movw	r30, r24
    3794:	e2 0f       	add	r30, r18
    3796:	f3 1f       	adc	r31, r19
    3798:	80 81       	ld	r24, Z
    379a:	88 23       	and	r24, r24
    379c:	39 f7       	brne	.-50     	; 0x376c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <LCD_moveCursor+0x6>
    37b0:	00 d0       	rcall	.+0      	; 0x37b2 <LCD_moveCursor+0x8>
    37b2:	0f 92       	push	r0
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
    37b8:	8a 83       	std	Y+2, r24	; 0x02
    37ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	3d 83       	std	Y+5, r19	; 0x05
    37c4:	2c 83       	std	Y+4, r18	; 0x04
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	91 05       	cpc	r25, r1
    37ce:	c1 f0       	breq	.+48     	; 0x3800 <LCD_moveCursor+0x56>
    37d0:	2c 81       	ldd	r18, Y+4	; 0x04
    37d2:	3d 81       	ldd	r19, Y+5	; 0x05
    37d4:	22 30       	cpi	r18, 0x02	; 2
    37d6:	31 05       	cpc	r19, r1
    37d8:	2c f4       	brge	.+10     	; 0x37e4 <LCD_moveCursor+0x3a>
    37da:	8c 81       	ldd	r24, Y+4	; 0x04
    37dc:	9d 81       	ldd	r25, Y+5	; 0x05
    37de:	00 97       	sbiw	r24, 0x00	; 0
    37e0:	61 f0       	breq	.+24     	; 0x37fa <LCD_moveCursor+0x50>
    37e2:	19 c0       	rjmp	.+50     	; 0x3816 <LCD_moveCursor+0x6c>
    37e4:	2c 81       	ldd	r18, Y+4	; 0x04
    37e6:	3d 81       	ldd	r19, Y+5	; 0x05
    37e8:	22 30       	cpi	r18, 0x02	; 2
    37ea:	31 05       	cpc	r19, r1
    37ec:	69 f0       	breq	.+26     	; 0x3808 <LCD_moveCursor+0x5e>
    37ee:	8c 81       	ldd	r24, Y+4	; 0x04
    37f0:	9d 81       	ldd	r25, Y+5	; 0x05
    37f2:	83 30       	cpi	r24, 0x03	; 3
    37f4:	91 05       	cpc	r25, r1
    37f6:	61 f0       	breq	.+24     	; 0x3810 <LCD_moveCursor+0x66>
    37f8:	0e c0       	rjmp	.+28     	; 0x3816 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    37fa:	8b 81       	ldd	r24, Y+3	; 0x03
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	0b c0       	rjmp	.+22     	; 0x3816 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	80 5c       	subi	r24, 0xC0	; 192
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	07 c0       	rjmp	.+14     	; 0x3816 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	80 5f       	subi	r24, 0xF0	; 240
    380c:	89 83       	std	Y+1, r24	; 0x01
    380e:	03 c0       	rjmp	.+6      	; 0x3816 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	80 5b       	subi	r24, 0xB0	; 176
    3814:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	80 68       	ori	r24, 0x80	; 128
    381a:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
}
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	00 d0       	rcall	.+0      	; 0x3834 <LCD_displayStringRowColumn+0x6>
    3834:	00 d0       	rcall	.+0      	; 0x3836 <LCD_displayStringRowColumn+0x8>
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	6a 83       	std	Y+2, r22	; 0x02
    383e:	5c 83       	std	Y+4, r21	; 0x04
    3840:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	6a 81       	ldd	r22, Y+2	; 0x02
    3846:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	cf 91       	pop	r28
    385c:	df 91       	pop	r29
    385e:	08 95       	ret

00003860 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	62 97       	sbiw	r28, 0x12	; 18
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	9a 8b       	std	Y+18, r25	; 0x12
    3876:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3878:	89 89       	ldd	r24, Y+17	; 0x11
    387a:	9a 89       	ldd	r25, Y+18	; 0x12
    387c:	9e 01       	movw	r18, r28
    387e:	2f 5f       	subi	r18, 0xFF	; 255
    3880:	3f 4f       	sbci	r19, 0xFF	; 255
    3882:	b9 01       	movw	r22, r18
    3884:	4a e0       	ldi	r20, 0x0A	; 10
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <itoa>
   LCD_displayString(buff); /* Display the string */
    388c:	ce 01       	movw	r24, r28
    388e:	01 96       	adiw	r24, 0x01	; 1
    3890:	0e 94 ac 1b 	call	0x3758	; 0x3758 <LCD_displayString>
}
    3894:	62 96       	adiw	r28, 0x12	; 18
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	cf 91       	pop	r28
    38a2:	df 91       	pop	r29
    38a4:	08 95       	ret

000038a6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_sendCommand>
}
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	08 95       	ret

000038ba <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    38ba:	df 93       	push	r29
    38bc:	cf 93       	push	r28
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <UART_init+0x6>
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <UART_init+0x8>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    38ca:	1a 82       	std	Y+2, r1	; 0x02
    38cc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    38ce:	eb e2       	ldi	r30, 0x2B	; 43
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	82 e0       	ldi	r24, 0x02	; 2
    38d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    38d6:	ea e2       	ldi	r30, 0x2A	; 42
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	88 e1       	ldi	r24, 0x18	; 24
    38dc:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    38de:	e0 e4       	ldi	r30, 0x40	; 64
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 e8       	ldi	r24, 0x80	; 128
    38e4:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XBF) | ((Config_Ptr->Mode & 0X40)<<6);//Set the mode in UMSEL
    38e6:	a0 e4       	ldi	r26, 0x40	; 64
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e0 e4       	ldi	r30, 0x40	; 64
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	28 2f       	mov	r18, r24
    38f2:	2f 7b       	andi	r18, 0xBF	; 191
    38f4:	eb 81       	ldd	r30, Y+3	; 0x03
    38f6:	fc 81       	ldd	r31, Y+4	; 0x04
    38f8:	80 81       	ld	r24, Z
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	80 74       	andi	r24, 0x40	; 64
    3900:	90 70       	andi	r25, 0x00	; 0
    3902:	00 24       	eor	r0, r0
    3904:	96 95       	lsr	r25
    3906:	87 95       	ror	r24
    3908:	07 94       	ror	r0
    390a:	96 95       	lsr	r25
    390c:	87 95       	ror	r24
    390e:	07 94       	ror	r0
    3910:	98 2f       	mov	r25, r24
    3912:	80 2d       	mov	r24, r0
    3914:	82 2b       	or	r24, r18
    3916:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity & 0X30)<<4);//Set the Parity mode in UPM1:0
    3918:	a0 e4       	ldi	r26, 0x40	; 64
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e0 e4       	ldi	r30, 0x40	; 64
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	28 2f       	mov	r18, r24
    3924:	2f 7c       	andi	r18, 0xCF	; 207
    3926:	eb 81       	ldd	r30, Y+3	; 0x03
    3928:	fc 81       	ldd	r31, Y+4	; 0x04
    392a:	81 81       	ldd	r24, Z+1	; 0x01
    392c:	88 2f       	mov	r24, r24
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	80 73       	andi	r24, 0x30	; 48
    3932:	90 70       	andi	r25, 0x00	; 0
    3934:	82 95       	swap	r24
    3936:	92 95       	swap	r25
    3938:	90 7f       	andi	r25, 0xF0	; 240
    393a:	98 27       	eor	r25, r24
    393c:	80 7f       	andi	r24, 0xF0	; 240
    393e:	98 27       	eor	r25, r24
    3940:	82 2b       	or	r24, r18
    3942:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit & 0X08)<<3);//Set the StopBit mode in USBS
    3944:	a0 e4       	ldi	r26, 0x40	; 64
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	e0 e4       	ldi	r30, 0x40	; 64
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	28 2f       	mov	r18, r24
    3950:	27 7f       	andi	r18, 0xF7	; 247
    3952:	eb 81       	ldd	r30, Y+3	; 0x03
    3954:	fc 81       	ldd	r31, Y+4	; 0x04
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	88 2f       	mov	r24, r24
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	88 70       	andi	r24, 0x08	; 8
    395e:	90 70       	andi	r25, 0x00	; 0
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	88 0f       	add	r24, r24
    396a:	99 1f       	adc	r25, r25
    396c:	82 2b       	or	r24, r18
    396e:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data!=7)
    3970:	eb 81       	ldd	r30, Y+3	; 0x03
    3972:	fc 81       	ldd	r31, Y+4	; 0x04
    3974:	83 81       	ldd	r24, Z+3	; 0x03
    3976:	87 30       	cpi	r24, 0x07	; 7
    3978:	99 f0       	breq	.+38     	; 0x39a0 <UART_init+0xe6>
	{
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data & 0X06)<<1);//Set the CharacterSize in Ucsz1:0
    397a:	a0 e4       	ldi	r26, 0x40	; 64
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	e0 e4       	ldi	r30, 0x40	; 64
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	28 2f       	mov	r18, r24
    3986:	29 7f       	andi	r18, 0xF9	; 249
    3988:	eb 81       	ldd	r30, Y+3	; 0x03
    398a:	fc 81       	ldd	r31, Y+4	; 0x04
    398c:	83 81       	ldd	r24, Z+3	; 0x03
    398e:	88 2f       	mov	r24, r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	86 70       	andi	r24, 0x06	; 6
    3994:	90 70       	andi	r25, 0x00	; 0
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	82 2b       	or	r24, r18
    399c:	8c 93       	st	X, r24
    399e:	19 c0       	rjmp	.+50     	; 0x39d2 <UART_init+0x118>
	}
	else
	{
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data & 0X06)<<1);//Set the CharacterSize in UCSZ1:0
    39a0:	a0 e4       	ldi	r26, 0x40	; 64
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	e0 e4       	ldi	r30, 0x40	; 64
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	28 2f       	mov	r18, r24
    39ac:	29 7f       	andi	r18, 0xF9	; 249
    39ae:	eb 81       	ldd	r30, Y+3	; 0x03
    39b0:	fc 81       	ldd	r31, Y+4	; 0x04
    39b2:	83 81       	ldd	r24, Z+3	; 0x03
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	86 70       	andi	r24, 0x06	; 6
    39ba:	90 70       	andi	r25, 0x00	; 0
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	82 2b       	or	r24, r18
    39c2:	8c 93       	st	X, r24
		UCSRB |=(1<<UCSZ2);
    39c4:	aa e2       	ldi	r26, 0x2A	; 42
    39c6:	b0 e0       	ldi	r27, 0x00	; 0
    39c8:	ea e2       	ldi	r30, 0x2A	; 42
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	80 81       	ld	r24, Z
    39ce:	84 60       	ori	r24, 0x04	; 4
    39d0:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( Config_Ptr->baud_rate * 8UL))) - 1);
    39d2:	eb 81       	ldd	r30, Y+3	; 0x03
    39d4:	fc 81       	ldd	r31, Y+4	; 0x04
    39d6:	84 81       	ldd	r24, Z+4	; 0x04
    39d8:	95 81       	ldd	r25, Z+5	; 0x05
    39da:	a6 81       	ldd	r26, Z+6	; 0x06
    39dc:	b7 81       	ldd	r27, Z+7	; 0x07
    39de:	88 0f       	add	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	aa 1f       	adc	r26, r26
    39e4:	bb 1f       	adc	r27, r27
    39e6:	88 0f       	add	r24, r24
    39e8:	99 1f       	adc	r25, r25
    39ea:	aa 1f       	adc	r26, r26
    39ec:	bb 1f       	adc	r27, r27
    39ee:	88 0f       	add	r24, r24
    39f0:	99 1f       	adc	r25, r25
    39f2:	aa 1f       	adc	r26, r26
    39f4:	bb 1f       	adc	r27, r27
    39f6:	9c 01       	movw	r18, r24
    39f8:	ad 01       	movw	r20, r26
    39fa:	80 e4       	ldi	r24, 0x40	; 64
    39fc:	92 e4       	ldi	r25, 0x42	; 66
    39fe:	af e0       	ldi	r26, 0x0F	; 15
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__udivmodsi4>
    3a0a:	da 01       	movw	r26, r20
    3a0c:	c9 01       	movw	r24, r18
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	9a 83       	std	Y+2, r25	; 0x02
    3a12:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a14:	e0 e4       	ldi	r30, 0x40	; 64
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1c:	89 2f       	mov	r24, r25
    3a1e:	99 27       	eor	r25, r25
    3a20:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a22:	e9 e2       	ldi	r30, 0x29	; 41
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	80 83       	st	Z, r24
}
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	0f 92       	push	r0
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a44:	eb e2       	ldi	r30, 0x2B	; 43
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	80 72       	andi	r24, 0x20	; 32
    3a50:	90 70       	andi	r25, 0x00	; 0
    3a52:	00 97       	sbiw	r24, 0x00	; 0
    3a54:	b9 f3       	breq	.-18     	; 0x3a44 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a56:	ec e2       	ldi	r30, 0x2C	; 44
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3a5e:	0f 90       	pop	r0
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a6e:	eb e2       	ldi	r30, 0x2B	; 43
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	88 23       	and	r24, r24
    3a76:	dc f7       	brge	.-10     	; 0x3a6e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3a78:	ec e2       	ldi	r30, 0x2C	; 44
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
}
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <UART_sendString+0x6>
    3a8a:	0f 92       	push	r0
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9b 83       	std	Y+3, r25	; 0x03
    3a92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a94:	19 82       	std	Y+1, r1	; 0x01
    3a96:	0e c0       	rjmp	.+28     	; 0x3ab4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	28 2f       	mov	r18, r24
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	e2 0f       	add	r30, r18
    3aa6:	f3 1f       	adc	r31, r19
    3aa8:	80 81       	ld	r24, Z
    3aaa:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <UART_sendByte>
		i++;
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	8a 81       	ldd	r24, Y+2	; 0x02
    3abc:	9b 81       	ldd	r25, Y+3	; 0x03
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e2 0f       	add	r30, r18
    3ac2:	f3 1f       	adc	r31, r19
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 23       	and	r24, r24
    3ac8:	39 f7       	brne	.-50     	; 0x3a98 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	08 95       	ret

00003ad6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <UART_receiveString+0xa>
    3ae0:	0f 92       	push	r0
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	9b 83       	std	Y+3, r25	; 0x03
    3ae8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3aea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	28 2f       	mov	r18, r24
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	9b 81       	ldd	r25, Y+3	; 0x03
    3af6:	8c 01       	movw	r16, r24
    3af8:	02 0f       	add	r16, r18
    3afa:	13 1f       	adc	r17, r19
    3afc:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    3b00:	f8 01       	movw	r30, r16
    3b02:	80 83       	st	Z, r24
    3b04:	0f c0       	rjmp	.+30     	; 0x3b24 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	8f 5f       	subi	r24, 0xFF	; 255
    3b0a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	8c 01       	movw	r16, r24
    3b18:	02 0f       	add	r16, r18
    3b1a:	13 1f       	adc	r17, r19
    3b1c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <UART_recieveByte>
    3b20:	f8 01       	movw	r30, r16
    3b22:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2e:	fc 01       	movw	r30, r24
    3b30:	e2 0f       	add	r30, r18
    3b32:	f3 1f       	adc	r31, r19
    3b34:	80 81       	ld	r24, Z
    3b36:	83 32       	cpi	r24, 0x23	; 35
    3b38:	31 f7       	brne	.-52     	; 0x3b06 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	fc 01       	movw	r30, r24
    3b46:	e2 0f       	add	r30, r18
    3b48:	f3 1f       	adc	r31, r19
    3b4a:	10 82       	st	Z, r1
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	1f 91       	pop	r17
    3b58:	0f 91       	pop	r16
    3b5a:	08 95       	ret

00003b5c <__udivmodsi4>:
    3b5c:	a1 e2       	ldi	r26, 0x21	; 33
    3b5e:	1a 2e       	mov	r1, r26
    3b60:	aa 1b       	sub	r26, r26
    3b62:	bb 1b       	sub	r27, r27
    3b64:	fd 01       	movw	r30, r26
    3b66:	0d c0       	rjmp	.+26     	; 0x3b82 <__udivmodsi4_ep>

00003b68 <__udivmodsi4_loop>:
    3b68:	aa 1f       	adc	r26, r26
    3b6a:	bb 1f       	adc	r27, r27
    3b6c:	ee 1f       	adc	r30, r30
    3b6e:	ff 1f       	adc	r31, r31
    3b70:	a2 17       	cp	r26, r18
    3b72:	b3 07       	cpc	r27, r19
    3b74:	e4 07       	cpc	r30, r20
    3b76:	f5 07       	cpc	r31, r21
    3b78:	20 f0       	brcs	.+8      	; 0x3b82 <__udivmodsi4_ep>
    3b7a:	a2 1b       	sub	r26, r18
    3b7c:	b3 0b       	sbc	r27, r19
    3b7e:	e4 0b       	sbc	r30, r20
    3b80:	f5 0b       	sbc	r31, r21

00003b82 <__udivmodsi4_ep>:
    3b82:	66 1f       	adc	r22, r22
    3b84:	77 1f       	adc	r23, r23
    3b86:	88 1f       	adc	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	1a 94       	dec	r1
    3b8c:	69 f7       	brne	.-38     	; 0x3b68 <__udivmodsi4_loop>
    3b8e:	60 95       	com	r22
    3b90:	70 95       	com	r23
    3b92:	80 95       	com	r24
    3b94:	90 95       	com	r25
    3b96:	9b 01       	movw	r18, r22
    3b98:	ac 01       	movw	r20, r24
    3b9a:	bd 01       	movw	r22, r26
    3b9c:	cf 01       	movw	r24, r30
    3b9e:	08 95       	ret

00003ba0 <__prologue_saves__>:
    3ba0:	2f 92       	push	r2
    3ba2:	3f 92       	push	r3
    3ba4:	4f 92       	push	r4
    3ba6:	5f 92       	push	r5
    3ba8:	6f 92       	push	r6
    3baa:	7f 92       	push	r7
    3bac:	8f 92       	push	r8
    3bae:	9f 92       	push	r9
    3bb0:	af 92       	push	r10
    3bb2:	bf 92       	push	r11
    3bb4:	cf 92       	push	r12
    3bb6:	df 92       	push	r13
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	ca 1b       	sub	r28, r26
    3bca:	db 0b       	sbc	r29, r27
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	09 94       	ijmp

00003bd8 <__epilogue_restores__>:
    3bd8:	2a 88       	ldd	r2, Y+18	; 0x12
    3bda:	39 88       	ldd	r3, Y+17	; 0x11
    3bdc:	48 88       	ldd	r4, Y+16	; 0x10
    3bde:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3be2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3be4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3be6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3be8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bea:	b9 84       	ldd	r11, Y+9	; 0x09
    3bec:	c8 84       	ldd	r12, Y+8	; 0x08
    3bee:	df 80       	ldd	r13, Y+7	; 0x07
    3bf0:	ee 80       	ldd	r14, Y+6	; 0x06
    3bf2:	fd 80       	ldd	r15, Y+5	; 0x05
    3bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    3bf6:	1b 81       	ldd	r17, Y+3	; 0x03
    3bf8:	aa 81       	ldd	r26, Y+2	; 0x02
    3bfa:	b9 81       	ldd	r27, Y+1	; 0x01
    3bfc:	ce 0f       	add	r28, r30
    3bfe:	d1 1d       	adc	r29, r1
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	ed 01       	movw	r28, r26
    3c0c:	08 95       	ret

00003c0e <itoa>:
    3c0e:	fb 01       	movw	r30, r22
    3c10:	9f 01       	movw	r18, r30
    3c12:	e8 94       	clt
    3c14:	42 30       	cpi	r20, 0x02	; 2
    3c16:	c4 f0       	brlt	.+48     	; 0x3c48 <itoa+0x3a>
    3c18:	45 32       	cpi	r20, 0x25	; 37
    3c1a:	b4 f4       	brge	.+44     	; 0x3c48 <itoa+0x3a>
    3c1c:	4a 30       	cpi	r20, 0x0A	; 10
    3c1e:	29 f4       	brne	.+10     	; 0x3c2a <itoa+0x1c>
    3c20:	97 fb       	bst	r25, 7
    3c22:	1e f4       	brtc	.+6      	; 0x3c2a <itoa+0x1c>
    3c24:	90 95       	com	r25
    3c26:	81 95       	neg	r24
    3c28:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2a:	64 2f       	mov	r22, r20
    3c2c:	77 27       	eor	r23, r23
    3c2e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <__udivmodhi4>
    3c32:	80 5d       	subi	r24, 0xD0	; 208
    3c34:	8a 33       	cpi	r24, 0x3A	; 58
    3c36:	0c f0       	brlt	.+2      	; 0x3c3a <itoa+0x2c>
    3c38:	89 5d       	subi	r24, 0xD9	; 217
    3c3a:	81 93       	st	Z+, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	a1 f7       	brne	.-24     	; 0x3c2a <itoa+0x1c>
    3c42:	16 f4       	brtc	.+4      	; 0x3c48 <itoa+0x3a>
    3c44:	5d e2       	ldi	r21, 0x2D	; 45
    3c46:	51 93       	st	Z+, r21
    3c48:	10 82       	st	Z, r1
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <strrev>

00003c50 <strrev>:
    3c50:	dc 01       	movw	r26, r24
    3c52:	fc 01       	movw	r30, r24
    3c54:	67 2f       	mov	r22, r23
    3c56:	71 91       	ld	r23, Z+
    3c58:	77 23       	and	r23, r23
    3c5a:	e1 f7       	brne	.-8      	; 0x3c54 <strrev+0x4>
    3c5c:	32 97       	sbiw	r30, 0x02	; 2
    3c5e:	04 c0       	rjmp	.+8      	; 0x3c68 <strrev+0x18>
    3c60:	7c 91       	ld	r23, X
    3c62:	6d 93       	st	X+, r22
    3c64:	70 83       	st	Z, r23
    3c66:	62 91       	ld	r22, -Z
    3c68:	ae 17       	cp	r26, r30
    3c6a:	bf 07       	cpc	r27, r31
    3c6c:	c8 f3       	brcs	.-14     	; 0x3c60 <strrev+0x10>
    3c6e:	08 95       	ret

00003c70 <__udivmodhi4>:
    3c70:	aa 1b       	sub	r26, r26
    3c72:	bb 1b       	sub	r27, r27
    3c74:	51 e1       	ldi	r21, 0x11	; 17
    3c76:	07 c0       	rjmp	.+14     	; 0x3c86 <__udivmodhi4_ep>

00003c78 <__udivmodhi4_loop>:
    3c78:	aa 1f       	adc	r26, r26
    3c7a:	bb 1f       	adc	r27, r27
    3c7c:	a6 17       	cp	r26, r22
    3c7e:	b7 07       	cpc	r27, r23
    3c80:	10 f0       	brcs	.+4      	; 0x3c86 <__udivmodhi4_ep>
    3c82:	a6 1b       	sub	r26, r22
    3c84:	b7 0b       	sbc	r27, r23

00003c86 <__udivmodhi4_ep>:
    3c86:	88 1f       	adc	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	5a 95       	dec	r21
    3c8c:	a9 f7       	brne	.-22     	; 0x3c78 <__udivmodhi4_loop>
    3c8e:	80 95       	com	r24
    3c90:	90 95       	com	r25
    3c92:	bc 01       	movw	r22, r24
    3c94:	cd 01       	movw	r24, r26
    3c96:	08 95       	ret

00003c98 <_exit>:
    3c98:	f8 94       	cli

00003c9a <__stop_program>:
    3c9a:	ff cf       	rjmp	.-2      	; 0x3c9a <__stop_program>
