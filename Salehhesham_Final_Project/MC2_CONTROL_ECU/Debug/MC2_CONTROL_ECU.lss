
MC2_CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002302  00002396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080017c  0080017c  000024b2  2**0
                  ALLOC
  3 .stab         00002490  00000000  00000000  000024b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e2  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00005e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00007f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000901b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000a4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ada8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 08 	call	0x1124	; 0x1124 <main>
      8a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <Buzzer_init>:

/*
 *     Description: Function to initialize the BUZZER-DRIVER.
 */
void Buzzer_init(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	/* Set The direction of the BUZZER Pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	67 e0       	ldi	r22, 0x07	; 7
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 2f 0b 	call	0x165e	; 0x165e <GPIO_setupPinDirection>

	/* Turn OFF the BUZZER Initially */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	67 e0       	ldi	r22, 0x07	; 7
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <Buzzer_on>:

/*
 *     Description: Function to Turn ON the BUZZER.
 */
void Buzzer_on(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	/* Turn ON the BUZZER Initially */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <Buzzer_off>:

/*
 *     Description: Function to Turn OFF the BUZZER.
 */
void Buzzer_off(void)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	/* Turn ON the BUZZER Initially */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	67 e0       	ldi	r22, 0x07	; 7
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <MOTOR_init>:
#include "pwm.h"
#include "DC.h"
#include <avr/io.h>

void MOTOR_init(void)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	/* Set the two needed pins for the motor*/
	GPIO_setupPinDirection(DC_PORT, DC_PIN1, PIN_OUTPUT);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 2f 0b 	call	0x165e	; 0x165e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT, DC_PIN2, PIN_OUTPUT);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 2f 0b 	call	0x165e	; 0x165e <GPIO_setupPinDirection>

	/* Motor is initially off */
	GPIO_writePin(DC_PORT, DC_PIN1 , LOGIC_LOW);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
	GPIO_writePin(DC_PORT, DC_PIN2 , LOGIC_LOW);
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	62 e0       	ldi	r22, 0x02	; 2
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 a_speed)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <DcMotor_Rotate+0x6>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <DcMotor_Rotate+0x8>
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 speed;
	switch (state)
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3d 83       	std	Y+5, r19	; 0x05
     e10:	2c 83       	std	Y+4, r18	; 0x04
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	f9 f0       	breq	.+62     	; 0xe5a <DcMotor_Rotate+0x64>
     e1c:	2c 81       	ldd	r18, Y+4	; 0x04
     e1e:	3d 81       	ldd	r19, Y+5	; 0x05
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	79 f0       	breq	.+30     	; 0xe44 <DcMotor_Rotate+0x4e>
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	9d 81       	ldd	r25, Y+5	; 0x05
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	01 f5       	brne	.+64     	; 0xe6e <DcMotor_Rotate+0x78>
	{
	case STOP :
		GPIO_writePin(DC_PORT, DC_PIN1 , LOGIC_LOW);
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
		GPIO_writePin(DC_PORT, DC_PIN2 , LOGIC_LOW);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	62 e0       	ldi	r22, 0x02	; 2
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <DcMotor_Rotate+0x78>
		break;
	case CW :
		GPIO_writePin(DC_PORT, DC_PIN1 , LOGIC_HIGH);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
		GPIO_writePin(DC_PORT, DC_PIN2 , LOGIC_LOW);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <DcMotor_Rotate+0x78>
		break;
	case A_CW :
		GPIO_writePin(DC_PORT, DC_PIN1 , LOGIC_LOW);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
		GPIO_writePin(DC_PORT, DC_PIN2 , LOGIC_HIGH);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	62 e0       	ldi	r22, 0x02	; 2
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <GPIO_writePin>
		break;
	}
	speed =  (uint8)ceil( ((float)a_speed/100)*MAX_COMP_VALUE );
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	48 ec       	ldi	r20, 0xC8	; 200
     e8e:	52 e4       	ldi	r21, 0x42	; 66
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	53 e4       	ldi	r21, 0x43	; 67
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 03 11 	call	0x2206	; 0x2206 <ceil>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	89 83       	std	Y+1, r24	; 0x01
	if(speed !=0)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	88 23       	and	r24, r24
     eca:	21 f0       	breq	.+8      	; 0xed4 <DcMotor_Rotate+0xde>
		PWM_Timer0_Start(speed) ;
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <PWM_Timer0_Start>
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DcMotor_Rotate+0xe2>
	else
		PWM_deinit();
     ed4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <PWM_deinit>
	/* We used a value that we don't know which is the max compare
	 * value. we got it from the PWM.h so the structure is still
	 * layered as the motor doesn't know the value and the eqn
	 * is independent just like the sensor reference*/

}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <check>:
********************************************************************************************************/
/*
 *      Description: Function to check if two passwords are matched or not .
 */
uint8 check (uint8 * ptr1,uint8 * ptr2)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	28 97       	sbiw	r28, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	7e 83       	std	Y+6, r23	; 0x06
     f02:	6d 83       	std	Y+5, r22	; 0x05
	uint8 k=0;
     f04:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i=0;i<5;++i)
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	1d c0       	rjmp	.+58     	; 0xf44 <check+0x5c>
	{
		if (ptr1[i]==ptr2[i])
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	40 81       	ld	r20, Z
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	fc 01       	movw	r30, r24
     f28:	e2 0f       	add	r30, r18
     f2a:	f3 1f       	adc	r31, r19
     f2c:	80 81       	ld	r24, Z
     f2e:	48 17       	cp	r20, r24
     f30:	39 f4       	brne	.+14     	; 0xf40 <check+0x58>
		{
			k++;
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	8a 83       	std	Y+2, r24	; 0x02
 *      Description: Function to check if two passwords are matched or not .
 */
uint8 check (uint8 * ptr1,uint8 * ptr2)
{
	uint8 k=0;
	for(uint8 i=0;i<5;++i)
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <check+0x5c>
		{
			k++;
		}
		else
		{
			return NMATCHED;
     f40:	1f 82       	std	Y+7, r1	; 0x07
     f42:	0a c0       	rjmp	.+20     	; 0xf58 <check+0x70>
 *      Description: Function to check if two passwords are matched or not .
 */
uint8 check (uint8 * ptr1,uint8 * ptr2)
{
	uint8 k=0;
	for(uint8 i=0;i<5;++i)
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	00 f3       	brcs	.-64     	; 0xf0a <check+0x22>
		else
		{
			return NMATCHED;
		}
	}
	if(k==5)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	19 f4       	brne	.+6      	; 0xf56 <check+0x6e>
	{
		return MATCHED;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8f 83       	std	Y+7, r24	; 0x07
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <check+0x70>
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <check+0x74>
	}
}
     f58:	8f 81       	ldd	r24, Y+7	; 0x07
     f5a:	88 87       	std	Y+8, r24	; 0x08
     f5c:	88 85       	ldd	r24, Y+8	; 0x08
     f5e:	28 96       	adiw	r28, 0x08	; 8
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <set_error>:

void set_error(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on();
     f78:	0e 94 c8 06 	call	0xd90	; 0xd90 <Buzzer_on>

	/* Change configurations to count 7.5 seconds*/
	TIM_Config.initial_value = 0;
     f7c:	10 92 69 01 	sts	0x0169, r1
     f80:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.compare_value = 58593;
     f84:	81 ee       	ldi	r24, 0xE1	; 225
     f86:	94 ee       	ldi	r25, 0xE4	; 228
     f88:	90 93 6b 01 	sts	0x016B, r25
     f8c:	80 93 6a 01 	sts	0x016A, r24
	TIM_Config.prescaler = CLK_1024;
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	80 93 6c 01 	sts	0x016C, r24

	/* Start timer to count 7.5 seconds*/
	Timer1_init(&TIM_Config);
     f96:	88 e6       	ldi	r24, 0x68	; 104
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>

	/* wait for timer to finish counting eight times!*/
	/* 60 seconds*/
	while(g_tick !=8){}
     f9e:	80 91 84 01 	lds	r24, 0x0184
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <set_error+0x2e>
	g_tick =0;
     fa6:	10 92 84 01 	sts	0x0184, r1

	Buzzer_off();
     faa:	0e 94 d4 06 	call	0xda8	; 0xda8 <Buzzer_off>

	/* Change configurations to STOP*/
	TIM_Config.initial_value = 0;
     fae:	10 92 69 01 	sts	0x0169, r1
     fb2:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.prescaler = NO_CLK;
     fb6:	10 92 6c 01 	sts	0x016C, r1

	/* Stop the timer*/
	Timer1_init(&TIM_Config);
     fba:	88 e6       	ldi	r24, 0x68	; 104
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <set_openDoor>:

void set_openDoor(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	/* Call the call-back function once manually to
	 * start opening the door*/
	openDoor();
     fd0:	0e 94 48 08 	call	0x1090	; 0x1090 <openDoor>

	/* Change configurations to count 7.5 seconds*/
	TIM_Config.prescaler = CLK_1024;
     fd4:	85 e0       	ldi	r24, 0x05	; 5
     fd6:	80 93 6c 01 	sts	0x016C, r24
	TIM_Config.initial_value = 0;
     fda:	10 92 69 01 	sts	0x0169, r1
     fde:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.compare_value = 58593;
     fe2:	81 ee       	ldi	r24, 0xE1	; 225
     fe4:	94 ee       	ldi	r25, 0xE4	; 228
     fe6:	90 93 6b 01 	sts	0x016B, r25
     fea:	80 93 6a 01 	sts	0x016A, r24

	/* Start timer to count 7.5 seconds*/
	Timer1_init(&TIM_Config);
     fee:	88 e6       	ldi	r24, 0x68	; 104
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>

	/* wait for timer to finish counting twice!*/
	/* 15 seconds*/
	while(g_tick !=2){}
     ff6:	80 91 84 01 	lds	r24, 0x0184
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <set_openDoor+0x2e>
	g_tick =0;
     ffe:	10 92 84 01 	sts	0x0184, r1
	openDoor();
    1002:	0e 94 48 08 	call	0x1090	; 0x1090 <openDoor>

	/* Change configurations to count 3 seconds*/
	TIM_Config.initial_value = 0;
    1006:	10 92 69 01 	sts	0x0169, r1
    100a:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.compare_value = 23438;
    100e:	8e e8       	ldi	r24, 0x8E	; 142
    1010:	9b e5       	ldi	r25, 0x5B	; 91
    1012:	90 93 6b 01 	sts	0x016B, r25
    1016:	80 93 6a 01 	sts	0x016A, r24

	/* Start timer to count 3 seconds*/
	Timer1_init(&TIM_Config);
    101a:	88 e6       	ldi	r24, 0x68	; 104
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>

	/* wait for timer to finish counting once!*/
	while(g_tick !=1){}
    1022:	80 91 84 01 	lds	r24, 0x0184
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	e1 f7       	brne	.-8      	; 0x1022 <set_openDoor+0x5a>
	g_tick = 0;
    102a:	10 92 84 01 	sts	0x0184, r1
	openDoor();
    102e:	0e 94 48 08 	call	0x1090	; 0x1090 <openDoor>

	/* Change configurations to count 7.5 seconds*/
	TIM_Config.initial_value = 0;
    1032:	10 92 69 01 	sts	0x0169, r1
    1036:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.compare_value = 58593;
    103a:	81 ee       	ldi	r24, 0xE1	; 225
    103c:	94 ee       	ldi	r25, 0xE4	; 228
    103e:	90 93 6b 01 	sts	0x016B, r25
    1042:	80 93 6a 01 	sts	0x016A, r24

	/* Start timer to count 7.5 seconds*/
	Timer1_init(&TIM_Config);
    1046:	88 e6       	ldi	r24, 0x68	; 104
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>

	/* wait for timer to finish counting twice!*/
	/* 15 seconds*/
	while(g_tick !=2){}
    104e:	80 91 84 01 	lds	r24, 0x0184
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	e1 f7       	brne	.-8      	; 0x104e <set_openDoor+0x86>
	g_tick =0;
    1056:	10 92 84 01 	sts	0x0184, r1
	openDoor();
    105a:	0e 94 48 08 	call	0x1090	; 0x1090 <openDoor>

	/* Change configurations to STOP*/
	TIM_Config.initial_value = 0;
    105e:	10 92 69 01 	sts	0x0169, r1
    1062:	10 92 68 01 	sts	0x0168, r1
	TIM_Config.prescaler = NO_CLK;
    1066:	10 92 6c 01 	sts	0x016C, r1

	/* Stop the timer*/
	Timer1_init(&TIM_Config);
    106a:	88 e6       	ldi	r24, 0x68	; 104
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Timer1_init>
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <ticks>:
/* Count ticks */
void ticks (void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62

	++g_tick;
    1080:	80 91 84 01 	lds	r24, 0x0184
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 84 01 	sts	0x0184, r24
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <openDoor>:


void openDoor(void)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <openDoor+0x6>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	static uint8 callNum = 1;

	switch (callNum)
    109a:	80 91 6e 01 	lds	r24, 0x016E
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3a 83       	std	Y+2, r19	; 0x02
    10a4:	29 83       	std	Y+1, r18	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	91 05       	cpc	r25, r1
    10ae:	d9 f0       	breq	.+54     	; 0x10e6 <openDoor+0x56>
    10b0:	29 81       	ldd	r18, Y+1	; 0x01
    10b2:	3a 81       	ldd	r19, Y+2	; 0x02
    10b4:	23 30       	cpi	r18, 0x03	; 3
    10b6:	31 05       	cpc	r19, r1
    10b8:	34 f4       	brge	.+12     	; 0x10c6 <openDoor+0x36>
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	61 f0       	breq	.+24     	; 0x10dc <openDoor+0x4c>
    10c4:	1e c0       	rjmp	.+60     	; 0x1102 <openDoor+0x72>
    10c6:	29 81       	ldd	r18, Y+1	; 0x01
    10c8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ca:	23 30       	cpi	r18, 0x03	; 3
    10cc:	31 05       	cpc	r19, r1
    10ce:	81 f0       	breq	.+32     	; 0x10f0 <openDoor+0x60>
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	81 f0       	breq	.+32     	; 0x10fa <openDoor+0x6a>
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <openDoor+0x72>
	{
	case 1:
		DcMotor_Rotate(CW, 100);
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	64 e6       	ldi	r22, 0x64	; 100
    10e0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DcMotor_Rotate>
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <openDoor+0x72>
		break;
	case 2:
		DcMotor_Rotate(STOP, 0);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DcMotor_Rotate>
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <openDoor+0x72>
		break;
	case 3:
		DcMotor_Rotate(A_CW, 100);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	64 e6       	ldi	r22, 0x64	; 100
    10f4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DcMotor_Rotate>
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <openDoor+0x72>
		break;
	case 4:
		DcMotor_Rotate(STOP, 0);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DcMotor_Rotate>
		break;
	}
	callNum++;
    1102:	80 91 6e 01 	lds	r24, 0x016E
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	80 93 6e 01 	sts	0x016E, r24
	if(callNum > 4)
    110c:	80 91 6e 01 	lds	r24, 0x016E
    1110:	85 30       	cpi	r24, 0x05	; 5
    1112:	18 f0       	brcs	.+6      	; 0x111a <openDoor+0x8a>
		callNum = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 6e 01 	sts	0x016E, r24
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <main>:
/********************************************************************************************************/

int main()
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	69 97       	sbiw	r28, 0x19	; 25
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);//To Enable Interrupts.
    1138:	af e5       	ldi	r26, 0x5F	; 95
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ef e5       	ldi	r30, 0x5F	; 95
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 68       	ori	r24, 0x80	; 128
    1144:	8c 93       	st	X, r24

	/* Adjust setting of the I2C-driver */
	TWI_ConfigType TWI_Config={ADD_1,FAST_MODE};
    1146:	ce 01       	movw	r24, r28
    1148:	03 96       	adiw	r24, 0x03	; 3
    114a:	99 8b       	std	Y+17, r25	; 0x11
    114c:	88 8b       	std	Y+16, r24	; 0x10
    114e:	e7 e7       	ldi	r30, 0x77	; 119
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	fb 8b       	std	Y+19, r31	; 0x13
    1154:	ea 8b       	std	Y+18, r30	; 0x12
    1156:	f5 e0       	ldi	r31, 0x05	; 5
    1158:	fc 8b       	std	Y+20, r31	; 0x14
    115a:	ea 89       	ldd	r30, Y+18	; 0x12
    115c:	fb 89       	ldd	r31, Y+19	; 0x13
    115e:	00 80       	ld	r0, Z
    1160:	8a 89       	ldd	r24, Y+18	; 0x12
    1162:	9b 89       	ldd	r25, Y+19	; 0x13
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	9b 8b       	std	Y+19, r25	; 0x13
    1168:	8a 8b       	std	Y+18, r24	; 0x12
    116a:	e8 89       	ldd	r30, Y+16	; 0x10
    116c:	f9 89       	ldd	r31, Y+17	; 0x11
    116e:	00 82       	st	Z, r0
    1170:	88 89       	ldd	r24, Y+16	; 0x10
    1172:	99 89       	ldd	r25, Y+17	; 0x11
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	99 8b       	std	Y+17, r25	; 0x11
    1178:	88 8b       	std	Y+16, r24	; 0x10
    117a:	9c 89       	ldd	r25, Y+20	; 0x14
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	9c 8b       	std	Y+20, r25	; 0x14
    1180:	ec 89       	ldd	r30, Y+20	; 0x14
    1182:	ee 23       	and	r30, r30
    1184:	51 f7       	brne	.-44     	; 0x115a <main+0x36>
	/* Adjust setting of the uart-driver */
	UART_ConfigType uart_config ={ASYNCH,DISABLE,ONEBIT,BITS_8,BAUD_96H};
    1186:	ce 01       	movw	r24, r28
    1188:	08 96       	adiw	r24, 0x08	; 8
    118a:	9e 8b       	std	Y+22, r25	; 0x16
    118c:	8d 8b       	std	Y+21, r24	; 0x15
    118e:	ef e6       	ldi	r30, 0x6F	; 111
    1190:	f1 e0       	ldi	r31, 0x01	; 1
    1192:	f8 8f       	std	Y+24, r31	; 0x18
    1194:	ef 8b       	std	Y+23, r30	; 0x17
    1196:	f8 e0       	ldi	r31, 0x08	; 8
    1198:	f9 8f       	std	Y+25, r31	; 0x19
    119a:	ef 89       	ldd	r30, Y+23	; 0x17
    119c:	f8 8d       	ldd	r31, Y+24	; 0x18
    119e:	00 80       	ld	r0, Z
    11a0:	8f 89       	ldd	r24, Y+23	; 0x17
    11a2:	98 8d       	ldd	r25, Y+24	; 0x18
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	98 8f       	std	Y+24, r25	; 0x18
    11a8:	8f 8b       	std	Y+23, r24	; 0x17
    11aa:	ed 89       	ldd	r30, Y+21	; 0x15
    11ac:	fe 89       	ldd	r31, Y+22	; 0x16
    11ae:	00 82       	st	Z, r0
    11b0:	8d 89       	ldd	r24, Y+21	; 0x15
    11b2:	9e 89       	ldd	r25, Y+22	; 0x16
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	9e 8b       	std	Y+22, r25	; 0x16
    11b8:	8d 8b       	std	Y+21, r24	; 0x15
    11ba:	99 8d       	ldd	r25, Y+25	; 0x19
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	99 8f       	std	Y+25, r25	; 0x19
    11c0:	e9 8d       	ldd	r30, Y+25	; 0x19
    11c2:	ee 23       	and	r30, r30
    11c4:	51 f7       	brne	.-44     	; 0x119a <main+0x76>
	/* Initialize the UART-Driver */
	UART_init(&uart_config);
    11c6:	ce 01       	movw	r24, r28
    11c8:	08 96       	adiw	r24, 0x08	; 8
    11ca:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <UART_init>
	/* Initialize The I2C-Driver */
	TWI_init(&TWI_Config);
    11ce:	ce 01       	movw	r24, r28
    11d0:	03 96       	adiw	r24, 0x03	; 3
    11d2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <TWI_init>
	/* Initialize The Buzzer-Driver */
	Buzzer_init();
    11d6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Buzzer_init>
	/* Initialize The DC-Motor-Driver */
	MOTOR_init();
    11da:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <MOTOR_init>
	/* Set The Function of TheCallBack Function */
	Timer1_setCallBack(ticks);
    11de:	8c e3       	ldi	r24, 0x3C	; 60
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timer1_setCallBack>
	while(1)
	{
		if(saved==0)
    11e6:	80 91 83 01 	lds	r24, 0x0183
    11ea:	88 23       	and	r24, r24
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <main+0xcc>
    11ee:	59 c0       	rjmp	.+178    	; 0x12a2 <main+0x17e>
		{
			/* Receive The first entered Password */
			UART_receiveString(pass1);
    11f0:	83 e9       	ldi	r24, 0x93	; 147
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	0e 94 67 10 	call	0x20ce	; 0x20ce <UART_receiveString>

			/* Receive The Second entered Password */
			UART_receiveString(pass2);
    11f8:	88 e8       	ldi	r24, 0x88	; 136
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 67 10 	call	0x20ce	; 0x20ce <UART_receiveString>

			/* Check if The two Passwords are equal */
			result=check(pass1, pass2);
    1200:	83 e9       	ldi	r24, 0x93	; 147
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	28 e8       	ldi	r18, 0x88	; 136
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	b9 01       	movw	r22, r18
    120a:	0e 94 74 07 	call	0xee8	; 0xee8 <check>
    120e:	80 93 92 01 	sts	0x0192, r24

			if(result)
    1212:	80 91 92 01 	lds	r24, 0x0192
    1216:	88 23       	and	r24, r24
    1218:	29 f0       	breq	.+10     	; 0x1224 <main+0x100>
			{
				UART_sendByte(result);
    121a:	80 91 92 01 	lds	r24, 0x0192
    121e:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
    1222:	04 c0       	rjmp	.+8      	; 0x122c <main+0x108>
			}
			else
			{
				UART_sendByte(result);
    1224:	80 91 92 01 	lds	r24, 0x0192
    1228:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
			}

			/* Save The Password inside EEPROM */
			for(uint8 i=0;i<5;++i)
    122c:	1a 82       	std	Y+2, r1	; 0x02
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <main+0x134>
			{
				EEPROM_writeByte(0x0311+i,pass1[i]);
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	8f 5e       	subi	r24, 0xEF	; 239
    1238:	9c 4f       	sbci	r25, 0xFC	; 252
    123a:	ac 01       	movw	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	ed 56       	subi	r30, 0x6D	; 109
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	20 81       	ld	r18, Z
    124a:	ca 01       	movw	r24, r20
    124c:	62 2f       	mov	r22, r18
    124e:	0e 94 8e 0a 	call	0x151c	; 0x151c <EEPROM_writeByte>
			{
				UART_sendByte(result);
			}

			/* Save The Password inside EEPROM */
			for(uint8 i=0;i<5;++i)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	85 30       	cpi	r24, 0x05	; 5
    125c:	48 f3       	brcs	.-46     	; 0x1230 <main+0x10c>
			{
				EEPROM_writeByte(0x0311+i,pass1[i]);
			}
			/* Get the Saved Password From EEPROM */
			for(uint8 i=0;i<5;++i)
    125e:	19 82       	std	Y+1, r1	; 0x01
    1260:	1c c0       	rjmp	.+56     	; 0x129a <main+0x176>
			{
				EEPROM_readByte(0x0316-i,pass1[i]);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	86 e1       	ldi	r24, 0x16	; 22
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	ac 01       	movw	r20, r24
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	ed 56       	subi	r30, 0x6D	; 109
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	80 81       	ld	r24, Z
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 01       	movw	r18, r24
    1286:	ca 01       	movw	r24, r20
    1288:	b9 01       	movw	r22, r18
    128a:	0e 94 cf 0a 	call	0x159e	; 0x159e <EEPROM_readByte>
				saved=1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 83 01 	sts	0x0183, r24
			for(uint8 i=0;i<5;++i)
			{
				EEPROM_writeByte(0x0311+i,pass1[i]);
			}
			/* Get the Saved Password From EEPROM */
			for(uint8 i=0;i<5;++i)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	08 f3       	brcs	.-62     	; 0x1262 <main+0x13e>
    12a0:	a2 cf       	rjmp	.-188    	; 0x11e6 <main+0xc2>
				saved=1;
			}
		}
		else
		{
			UART_receiveString(pass2);
    12a2:	88 e8       	ldi	r24, 0x88	; 136
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 67 10 	call	0x20ce	; 0x20ce <UART_receiveString>
			Option_mode=UART_recieveByte();
    12aa:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_recieveByte>
    12ae:	80 93 87 01 	sts	0x0187, r24
			result=check(pass1, pass2);
    12b2:	83 e9       	ldi	r24, 0x93	; 147
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	28 e8       	ldi	r18, 0x88	; 136
    12b8:	31 e0       	ldi	r19, 0x01	; 1
    12ba:	b9 01       	movw	r22, r18
    12bc:	0e 94 74 07 	call	0xee8	; 0xee8 <check>
    12c0:	80 93 92 01 	sts	0x0192, r24
			/* Open door mode */
			if(Option_mode=='+')
    12c4:	80 91 87 01 	lds	r24, 0x0187
    12c8:	8b 32       	cpi	r24, 0x2B	; 43
    12ca:	09 f5       	brne	.+66     	; 0x130e <main+0x1ea>
			{
				saved=1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 83 01 	sts	0x0183, r24
				if(result)
    12d2:	80 91 92 01 	lds	r24, 0x0192
    12d6:	88 23       	and	r24, r24
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <main+0x1c4>
				{
					UART_sendByte(result);
    12da:	80 91 92 01 	lds	r24, 0x0192
    12de:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
			    	set_openDoor();
    12e2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_openDoor>
    12e6:	7f cf       	rjmp	.-258    	; 0x11e6 <main+0xc2>
				}
				else
				{
					UART_sendByte(result);
    12e8:	80 91 92 01 	lds	r24, 0x0192
    12ec:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
					buzzer_state=UART_recieveByte();
    12f0:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_recieveByte>
    12f4:	80 93 82 01 	sts	0x0182, r24
					if(buzzer_state==3)
    12f8:	80 91 82 01 	lds	r24, 0x0182
    12fc:	83 30       	cpi	r24, 0x03	; 3
    12fe:	09 f0       	breq	.+2      	; 0x1302 <main+0x1de>
    1300:	72 cf       	rjmp	.-284    	; 0x11e6 <main+0xc2>
					{
						saved=1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 83 01 	sts	0x0183, r24
                        set_error();
    1308:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_error>
    130c:	6c cf       	rjmp	.-296    	; 0x11e6 <main+0xc2>
			}
			/* Change password mode */
			else
			{
				/* They are matched */
				if(result==1)
    130e:	80 91 92 01 	lds	r24, 0x0192
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	39 f4       	brne	.+14     	; 0x1324 <main+0x200>
				{
					UART_sendByte(result);
    1316:	80 91 92 01 	lds	r24, 0x0192
    131a:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
					/* To save it again */
					saved=0;
    131e:	10 92 83 01 	sts	0x0183, r1
    1322:	61 cf       	rjmp	.-318    	; 0x11e6 <main+0xc2>
				}
				else
				{
					UART_sendByte(result);
    1324:	80 91 92 01 	lds	r24, 0x0192
    1328:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
					buzzer_state=UART_recieveByte();
    132c:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_recieveByte>
    1330:	80 93 82 01 	sts	0x0182, r24
					if(buzzer_state==3)
    1334:	80 91 82 01 	lds	r24, 0x0182
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	09 f0       	breq	.+2      	; 0x133e <main+0x21a>
    133c:	54 cf       	rjmp	.-344    	; 0x11e6 <main+0xc2>
					{
						saved=1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 83 01 	sts	0x0183, r24
						set_error();
    1344:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_error>
    1348:	4e cf       	rjmp	.-356    	; 0x11e6 <main+0xc2>

0000134a <__vector_7>:
#include <avr/io.h>
#include <avr/interrupt.h>

/* Interrupt Service Routine of COMPARE mode*/
ISR(TIMER1_COMPA_vect)
{
    134a:	1f 92       	push	r1
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    1374:	80 91 85 01 	lds	r24, 0x0185
    1378:	90 91 86 01 	lds	r25, 0x0186
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	29 f0       	breq	.+10     	; 0x138a <__vector_7+0x40>
		/* Call the Call back function in the Application */
		g_Timer1_Call_Back_Ptr();}
    1380:	e0 91 85 01 	lds	r30, 0x0185
    1384:	f0 91 86 01 	lds	r31, 0x0186
    1388:	09 95       	icall
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	ff 91       	pop	r31
    1390:	ef 91       	pop	r30
    1392:	bf 91       	pop	r27
    1394:	af 91       	pop	r26
    1396:	9f 91       	pop	r25
    1398:	8f 91       	pop	r24
    139a:	7f 91       	pop	r23
    139c:	6f 91       	pop	r22
    139e:	5f 91       	pop	r21
    13a0:	4f 91       	pop	r20
    13a2:	3f 91       	pop	r19
    13a4:	2f 91       	pop	r18
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <__vector_9>:

/* Interrupt Service Routine of COMPARE mode*/
ISR(TIMER1_OVF_vect)
{
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    13da:	80 91 85 01 	lds	r24, 0x0185
    13de:	90 91 86 01 	lds	r25, 0x0186
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <__vector_9+0x40>
		/* Call the Call back function in the Application */
		g_Timer1_Call_Back_Ptr();
    13e6:	e0 91 85 01 	lds	r30, 0x0185
    13ea:	f0 91 86 01 	lds	r31, 0x0186
    13ee:	09 95       	icall
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	ff 91       	pop	r31
    13f6:	ef 91       	pop	r30
    13f8:	bf 91       	pop	r27
    13fa:	af 91       	pop	r26
    13fc:	9f 91       	pop	r25
    13fe:	8f 91       	pop	r24
    1400:	7f 91       	pop	r23
    1402:	6f 91       	pop	r22
    1404:	5f 91       	pop	r21
    1406:	4f 91       	pop	r20
    1408:	3f 91       	pop	r19
    140a:	2f 91       	pop	r18
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <Timer1_init>:

/*
 *  Description: Function to initialize the Timer driver.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <Timer1_init+0x6>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01


	/* Set the Initial Value */
	TCNT1 = Config_Ptr->initial_value;
    1424:	ac e4       	ldi	r26, 0x4C	; 76
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	9c 93       	st	X, r25
    1434:	8e 93       	st	-X, r24

	/* Set the Compared Value */
	OCR1A = Config_Ptr->compare_value;
    1436:	aa e4       	ldi	r26, 0x4A	; 74
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 81       	ldd	r30, Y+1	; 0x01
    143c:	fa 81       	ldd	r31, Y+2	; 0x02
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	9c 93       	st	X, r25
    1446:	8e 93       	st	-X, r24
	 * WGM11&WGM10 : Set 0 to select Normal or Compare Mode.
	 *    COM1A1:0 : Set 1OR0 depends on the Selected Mode .
	 *    COM1B1:0 : Set 1OR0 depends on the Selected Mode .
	 */

	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1448:	ef e4       	ldi	r30, 0x4F	; 79
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8c e0       	ldi	r24, 0x0C	; 12
    144e:	80 83       	st	Z, r24
	 * WGM12&WGM13 : Set 0 to Select Normal or Compare Mode.
	 *       ICNC1 : Set 0 to Disable The Noise Canceler.
	 *       ICES1 : Set 0 to Disable The Input Capture Select Due to putting The Top Value in it .
	 */

	TCCR1B = (TCCR1B & 0XF8) | ((Config_Ptr->prescaler & 0X07)<<0);
    1450:	ae e4       	ldi	r26, 0x4E	; 78
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ee e4       	ldi	r30, 0x4E	; 78
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	98 2f       	mov	r25, r24
    145c:	98 7f       	andi	r25, 0xF8	; 248
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	84 81       	ldd	r24, Z+4	; 0x04
    1464:	87 70       	andi	r24, 0x07	; 7
    1466:	89 2b       	or	r24, r25
    1468:	8c 93       	st	X, r24

	/* Set the Selected Mode */
	TCCR1B=  (TCCR1B & 0XE7) | ((Config_Ptr->mode & 0X01)<<3);
    146a:	ae e4       	ldi	r26, 0x4E	; 78
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ee e4       	ldi	r30, 0x4E	; 78
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	27 7e       	andi	r18, 0xE7	; 231
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	85 81       	ldd	r24, Z+5	; 0x05
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	90 70       	andi	r25, 0x00	; 0
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	82 2b       	or	r24, r18
    1494:	8c 93       	st	X, r24

	/* Enable The Interrupts of Timer1 */
	if(Config_Ptr->mode==0)
    1496:	e9 81       	ldd	r30, Y+1	; 0x01
    1498:	fa 81       	ldd	r31, Y+2	; 0x02
    149a:	85 81       	ldd	r24, Z+5	; 0x05
    149c:	88 23       	and	r24, r24
    149e:	41 f4       	brne	.+16     	; 0x14b0 <Timer1_init+0x9a>
	{
		/* Enable The Overflow Interrupt */
		TIMSK |= (1<<TOIE1);
    14a0:	a9 e5       	ldi	r26, 0x59	; 89
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e9 e5       	ldi	r30, 0x59	; 89
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	8c 93       	st	X, r24
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <Timer1_init+0xa8>
	}
	else
	{
		/* Enable The CTC Interrupt */
		TIMSK |= (1<<OCIE1A);
    14b0:	a9 e5       	ldi	r26, 0x59	; 89
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e9 e5       	ldi	r30, 0x59	; 89
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 61       	ori	r24, 0x10	; 16
    14bc:	8c 93       	st	X, r24
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <Timer1_deInit>:

/*
 *  Description: Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    14d0:	ef e4       	ldi	r30, 0x4F	; 79
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	10 82       	st	Z, r1
	TCCR1B=0;
    14d6:	ee e4       	ldi	r30, 0x4E	; 78
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
	OCR1A=0;
    14dc:	ea e4       	ldi	r30, 0x4A	; 74
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	11 82       	std	Z+1, r1	; 0x01
    14e2:	10 82       	st	Z, r1
	TCNT1=0;
    14e4:	ec e4       	ldi	r30, 0x4C	; 76
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	11 82       	std	Z+1, r1	; 0x01
    14ea:	10 82       	st	Z, r1
	TIMSK=0;
    14ec:	e9 e5       	ldi	r30, 0x59	; 89
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	10 82       	st	Z, r1
}
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <Timer1_setCallBack>:

/*
 *  Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <Timer1_setCallBack+0x6>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
	/* Put the Address of The CallBack Function in The Global Pointer */
	g_Timer1_Call_Back_Ptr=a_ptr;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	90 93 86 01 	sts	0x0186, r25
    150e:	80 93 85 01 	sts	0x0185, r24
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <EEPROM_writeByte+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <EEPROM_writeByte+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    152e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1532:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x22>
        return ERROR;
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	28 c0       	rjmp	.+80     	; 0x158e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	80 70       	andi	r24, 0x00	; 0
    1544:	97 70       	andi	r25, 0x07	; 7
    1546:	88 0f       	add	r24, r24
    1548:	89 2f       	mov	r24, r25
    154a:	88 1f       	adc	r24, r24
    154c:	99 0b       	sbc	r25, r25
    154e:	91 95       	neg	r25
    1550:	80 6a       	ori	r24, 0xA0	; 160
    1552:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1556:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    155a:	88 31       	cpi	r24, 0x18	; 24
    155c:	11 f0       	breq	.+4      	; 0x1562 <EEPROM_writeByte+0x46>
        return ERROR; 
    155e:	1c 82       	std	Y+4, r1	; 0x04
    1560:	16 c0       	rjmp	.+44     	; 0x158e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1568:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    156c:	88 32       	cpi	r24, 0x28	; 40
    156e:	11 f0       	breq	.+4      	; 0x1574 <EEPROM_writeByte+0x58>
        return ERROR;
    1570:	1c 82       	std	Y+4, r1	; 0x04
    1572:	0d c0       	rjmp	.+26     	; 0x158e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    157a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    157e:	88 32       	cpi	r24, 0x28	; 40
    1580:	11 f0       	breq	.+4      	; 0x1586 <EEPROM_writeByte+0x6a>
        return ERROR;
    1582:	1c 82       	std	Y+4, r1	; 0x04
    1584:	04 c0       	rjmp	.+8      	; 0x158e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1586:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_stop>
	
    return SUCCESS;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	8c 83       	std	Y+4, r24	; 0x04
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <EEPROM_readByte+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <EEPROM_readByte+0x8>
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	7c 83       	std	Y+4, r23	; 0x04
    15b2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15b4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15b8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_readByte+0x26>
        return ERROR;
    15c0:	1d 82       	std	Y+5, r1	; 0x05
    15c2:	44 c0       	rjmp	.+136    	; 0x164c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	80 70       	andi	r24, 0x00	; 0
    15ca:	97 70       	andi	r25, 0x07	; 7
    15cc:	88 0f       	add	r24, r24
    15ce:	89 2f       	mov	r24, r25
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 0b       	sbc	r25, r25
    15d4:	91 95       	neg	r25
    15d6:	80 6a       	ori	r24, 0xA0	; 160
    15d8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15dc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    15e0:	88 31       	cpi	r24, 0x18	; 24
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <EEPROM_readByte+0x4a>
        return ERROR;
    15e4:	1d 82       	std	Y+5, r1	; 0x05
    15e6:	32 c0       	rjmp	.+100    	; 0x164c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    15f2:	88 32       	cpi	r24, 0x28	; 40
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_readByte+0x5c>
        return ERROR;
    15f6:	1d 82       	std	Y+5, r1	; 0x05
    15f8:	29 c0       	rjmp	.+82     	; 0x164c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15fa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15fe:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    1602:	80 31       	cpi	r24, 0x10	; 16
    1604:	11 f0       	breq	.+4      	; 0x160a <EEPROM_readByte+0x6c>
        return ERROR;
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	21 c0       	rjmp	.+66     	; 0x164c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	80 70       	andi	r24, 0x00	; 0
    1610:	97 70       	andi	r25, 0x07	; 7
    1612:	88 0f       	add	r24, r24
    1614:	89 2f       	mov	r24, r25
    1616:	88 1f       	adc	r24, r24
    1618:	99 0b       	sbc	r25, r25
    161a:	91 95       	neg	r25
    161c:	81 6a       	ori	r24, 0xA1	; 161
    161e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1622:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    1626:	80 34       	cpi	r24, 0x40	; 64
    1628:	11 f0       	breq	.+4      	; 0x162e <EEPROM_readByte+0x90>
        return ERROR;
    162a:	1d 82       	std	Y+5, r1	; 0x05
    162c:	0f c0       	rjmp	.+30     	; 0x164c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    162e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <TWI_readByteWithNACK>
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1638:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <TWI_getStatus>
    163c:	88 35       	cpi	r24, 0x58	; 88
    163e:	11 f0       	breq	.+4      	; 0x1644 <EEPROM_readByte+0xa6>
        return ERROR;
    1640:	1d 82       	std	Y+5, r1	; 0x05
    1642:	04 c0       	rjmp	.+8      	; 0x164c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1644:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <TWI_stop>

    return SUCCESS;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <GPIO_setupPinDirection+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <GPIO_setupPinDirection+0x8>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	6a 83       	std	Y+2, r22	; 0x02
    1670:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 30       	cpi	r24, 0x08	; 8
    1676:	08 f0       	brcs	.+2      	; 0x167a <GPIO_setupPinDirection+0x1c>
    1678:	d5 c0       	rjmp	.+426    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	08 f0       	brcs	.+2      	; 0x1682 <GPIO_setupPinDirection+0x24>
    1680:	d1 c0       	rjmp	.+418    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3d 83       	std	Y+5, r19	; 0x05
    168a:	2c 83       	std	Y+4, r18	; 0x04
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	9d 81       	ldd	r25, Y+5	; 0x05
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <GPIO_setupPinDirection+0x3a>
    1696:	43 c0       	rjmp	.+134    	; 0x171e <GPIO_setupPinDirection+0xc0>
    1698:	2c 81       	ldd	r18, Y+4	; 0x04
    169a:	3d 81       	ldd	r19, Y+5	; 0x05
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <GPIO_setupPinDirection+0x4e>
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <GPIO_setupPinDirection+0x68>
    16aa:	bc c0       	rjmp	.+376    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
    16ac:	2c 81       	ldd	r18, Y+4	; 0x04
    16ae:	3d 81       	ldd	r19, Y+5	; 0x05
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <GPIO_setupPinDirection+0x5a>
    16b6:	5f c0       	rjmp	.+190    	; 0x1776 <GPIO_setupPinDirection+0x118>
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <GPIO_setupPinDirection+0x66>
    16c2:	85 c0       	rjmp	.+266    	; 0x17ce <GPIO_setupPinDirection+0x170>
    16c4:	af c0       	rjmp	.+350    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	a1 f4       	brne	.+40     	; 0x16f4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16cc:	aa e3       	ldi	r26, 0x3A	; 58
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e3       	ldi	r30, 0x3A	; 58
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0x8c>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0x88>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	98 c0       	rjmp	.+304    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16f4:	aa e3       	ldi	r26, 0x3A	; 58
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ea e3       	ldi	r30, 0x3A	; 58
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <GPIO_setupPinDirection+0xb4>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <GPIO_setupPinDirection+0xb0>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	83 c0       	rjmp	.+262    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	a1 f4       	brne	.+40     	; 0x174c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1724:	a7 e3       	ldi	r26, 0x37	; 55
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e7 e3       	ldi	r30, 0x37	; 55
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_setupPinDirection+0xe4>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_setupPinDirection+0xe0>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	6c c0       	rjmp	.+216    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    174c:	a7 e3       	ldi	r26, 0x37	; 55
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e7 e3       	ldi	r30, 0x37	; 55
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GPIO_setupPinDirection+0x10c>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <GPIO_setupPinDirection+0x108>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	57 c0       	rjmp	.+174    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	a1 f4       	brne	.+40     	; 0x17a4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_setupPinDirection+0x13c>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_setupPinDirection+0x138>
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	40 c0       	rjmp	.+128    	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17a4:	a4 e3       	ldi	r26, 0x34	; 52
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e4 e3       	ldi	r30, 0x34	; 52
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <GPIO_setupPinDirection+0x164>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <GPIO_setupPinDirection+0x160>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	2b c0       	rjmp	.+86     	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	a1 f4       	brne	.+40     	; 0x17fc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17d4:	a1 e3       	ldi	r26, 0x31	; 49
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_setupPinDirection+0x194>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_setupPinDirection+0x190>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17fc:	a1 e3       	ldi	r26, 0x31	; 49
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e1 e3       	ldi	r30, 0x31	; 49
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_setupPinDirection+0x1bc>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_setupPinDirection+0x1b8>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <GPIO_writePin+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <GPIO_writePin+0x8>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	6a 83       	std	Y+2, r22	; 0x02
    1846:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	08 f0       	brcs	.+2      	; 0x1850 <GPIO_writePin+0x1c>
    184e:	d5 c0       	rjmp	.+426    	; 0x19fa <GPIO_writePin+0x1c6>
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	89 30       	cpi	r24, 0x09	; 9
    1854:	08 f0       	brcs	.+2      	; 0x1858 <GPIO_writePin+0x24>
    1856:	d1 c0       	rjmp	.+418    	; 0x19fa <GPIO_writePin+0x1c6>
	{
		/* do nothing */
	}
	else
	{
		switch (port_num)
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3d 83       	std	Y+5, r19	; 0x05
    1860:	2c 83       	std	Y+4, r18	; 0x04
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <GPIO_writePin+0x3a>
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <GPIO_writePin+0xc0>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	2c f4       	brge	.+10     	; 0x1882 <GPIO_writePin+0x4e>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	71 f0       	breq	.+28     	; 0x189c <GPIO_writePin+0x68>
    1880:	bc c0       	rjmp	.+376    	; 0x19fa <GPIO_writePin+0x1c6>
    1882:	2c 81       	ldd	r18, Y+4	; 0x04
    1884:	3d 81       	ldd	r19, Y+5	; 0x05
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_writePin+0x5a>
    188c:	5f c0       	rjmp	.+190    	; 0x194c <GPIO_writePin+0x118>
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <GPIO_writePin+0x66>
    1898:	85 c0       	rjmp	.+266    	; 0x19a4 <GPIO_writePin+0x170>
    189a:	af c0       	rjmp	.+350    	; 0x19fa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	a1 f4       	brne	.+40     	; 0x18ca <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    18a2:	ab e3       	ldi	r26, 0x3B	; 59
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0x8c>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0x88>
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	98 c0       	rjmp	.+304    	; 0x19fa <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <GPIO_writePin+0xb4>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <GPIO_writePin+0xb0>
    18ec:	80 95       	com	r24
    18ee:	84 23       	and	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	83 c0       	rjmp	.+262    	; 0x19fa <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	a1 f4       	brne	.+40     	; 0x1922 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_writePin+0xe4>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_writePin+0xe0>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	6c c0       	rjmp	.+216    	; 0x19fa <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_writePin+0x10c>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_writePin+0x108>
    1944:	80 95       	com	r24
    1946:	84 23       	and	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	57 c0       	rjmp	.+174    	; 0x19fa <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	a1 f4       	brne	.+40     	; 0x197a <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1952:	a5 e3       	ldi	r26, 0x35	; 53
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e3       	ldi	r30, 0x35	; 53
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_writePin+0x13c>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_writePin+0x138>
    1974:	84 2b       	or	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	40 c0       	rjmp	.+128    	; 0x19fa <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    197a:	a5 e3       	ldi	r26, 0x35	; 53
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e5 e3       	ldi	r30, 0x35	; 53
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_writePin+0x164>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_writePin+0x160>
    199c:	80 95       	com	r24
    199e:	84 23       	and	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	2b c0       	rjmp	.+86     	; 0x19fa <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	a1 f4       	brne	.+40     	; 0x19d2 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    19aa:	a2 e3       	ldi	r26, 0x32	; 50
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e2 e3       	ldi	r30, 0x32	; 50
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_writePin+0x194>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_writePin+0x190>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    19d2:	a2 e3       	ldi	r26, 0x32	; 50
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e2 e3       	ldi	r30, 0x32	; 50
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_writePin+0x1bc>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_writePin+0x1b8>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
			break;
		}
	}
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <GPIO_readPin+0x6>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <GPIO_readPin+0x8>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <GPIO_readPin+0xa>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT)
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	85 30       	cpi	r24, 0x05	; 5
    1a20:	18 f4       	brcc	.+6      	; 0x1a28 <GPIO_readPin+0x1e>
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	89 30       	cpi	r24, 0x09	; 9
    1a26:	10 f0       	brcs	.+4      	; 0x1a2c <GPIO_readPin+0x22>
	{
		/* do nothing */
		return LOGIC_LOW;
    1a28:	1d 82       	std	Y+5, r1	; 0x05
    1a2a:	82 c0       	rjmp	.+260    	; 0x1b30 <GPIO_readPin+0x126>
	}
	else
	{
		switch (port_num)
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	4b 81       	ldd	r20, Y+3	; 0x03
    1a38:	5c 81       	ldd	r21, Y+4	; 0x04
    1a3a:	41 30       	cpi	r20, 0x01	; 1
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	79 f1       	breq	.+94     	; 0x1a9e <GPIO_readPin+0x94>
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	91 05       	cpc	r25, r1
    1a48:	34 f4       	brge	.+12     	; 0x1a56 <GPIO_readPin+0x4c>
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	21 15       	cp	r18, r1
    1a50:	31 05       	cpc	r19, r1
    1a52:	69 f0       	breq	.+26     	; 0x1a6e <GPIO_readPin+0x64>
    1a54:	6c c0       	rjmp	.+216    	; 0x1b2e <GPIO_readPin+0x124>
    1a56:	4b 81       	ldd	r20, Y+3	; 0x03
    1a58:	5c 81       	ldd	r21, Y+4	; 0x04
    1a5a:	42 30       	cpi	r20, 0x02	; 2
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	b9 f1       	breq	.+110    	; 0x1ace <GPIO_readPin+0xc4>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	91 05       	cpc	r25, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <GPIO_readPin+0x62>
    1a6a:	49 c0       	rjmp	.+146    	; 0x1afe <GPIO_readPin+0xf4>
    1a6c:	60 c0       	rjmp	.+192    	; 0x1b2e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a6e:	e9 e3       	ldi	r30, 0x39	; 57
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a9 01       	movw	r20, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_readPin+0x7c>
    1a82:	55 95       	asr	r21
    1a84:	47 95       	ror	r20
    1a86:	8a 95       	dec	r24
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_readPin+0x78>
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	81 70       	andi	r24, 0x01	; 1
    1a8e:	90 70       	andi	r25, 0x00	; 0
    1a90:	88 23       	and	r24, r24
    1a92:	19 f0       	breq	.+6      	; 0x1a9a <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    1a94:	51 e0       	ldi	r21, 0x01	; 1
    1a96:	5d 83       	std	Y+5, r21	; 0x05
    1a98:	4b c0       	rjmp	.+150    	; 0x1b30 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1a9a:	1d 82       	std	Y+5, r1	; 0x05
    1a9c:	49 c0       	rjmp	.+146    	; 0x1b30 <GPIO_readPin+0x126>
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a9e:	e6 e3       	ldi	r30, 0x36	; 54
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a9 01       	movw	r20, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_readPin+0xac>
    1ab2:	55 95       	asr	r21
    1ab4:	47 95       	ror	r20
    1ab6:	8a 95       	dec	r24
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_readPin+0xa8>
    1aba:	ca 01       	movw	r24, r20
    1abc:	81 70       	andi	r24, 0x01	; 1
    1abe:	90 70       	andi	r25, 0x00	; 0
    1ac0:	88 23       	and	r24, r24
    1ac2:	19 f0       	breq	.+6      	; 0x1aca <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    1ac4:	51 e0       	ldi	r21, 0x01	; 1
    1ac6:	5d 83       	std	Y+5, r21	; 0x05
    1ac8:	33 c0       	rjmp	.+102    	; 0x1b30 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1aca:	1d 82       	std	Y+5, r1	; 0x05
    1acc:	31 c0       	rjmp	.+98     	; 0x1b30 <GPIO_readPin+0x126>
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ace:	e3 e3       	ldi	r30, 0x33	; 51
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a9 01       	movw	r20, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <GPIO_readPin+0xdc>
    1ae2:	55 95       	asr	r21
    1ae4:	47 95       	ror	r20
    1ae6:	8a 95       	dec	r24
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <GPIO_readPin+0xd8>
    1aea:	ca 01       	movw	r24, r20
    1aec:	81 70       	andi	r24, 0x01	; 1
    1aee:	90 70       	andi	r25, 0x00	; 0
    1af0:	88 23       	and	r24, r24
    1af2:	19 f0       	breq	.+6      	; 0x1afa <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    1af4:	51 e0       	ldi	r21, 0x01	; 1
    1af6:	5d 83       	std	Y+5, r21	; 0x05
    1af8:	1b c0       	rjmp	.+54     	; 0x1b30 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1afa:	1d 82       	std	Y+5, r1	; 0x05
    1afc:	19 c0       	rjmp	.+50     	; 0x1b30 <GPIO_readPin+0x126>
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1afe:	e0 e3       	ldi	r30, 0x30	; 48
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a9 01       	movw	r20, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <GPIO_readPin+0x10c>
    1b12:	55 95       	asr	r21
    1b14:	47 95       	ror	r20
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <GPIO_readPin+0x108>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	81 70       	andi	r24, 0x01	; 1
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	88 23       	and	r24, r24
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    1b24:	51 e0       	ldi	r21, 0x01	; 1
    1b26:	5d 83       	std	Y+5, r21	; 0x05
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <GPIO_readPin+0x126>
			else
				return LOGIC_LOW;
    1b2a:	1d 82       	std	Y+5, r1	; 0x05
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <GPIO_readPin+0x126>
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <GPIO_readPin+0x12a>
			break;
		}
	}
}
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	8e 83       	std	Y+6, r24	; 0x06
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	26 96       	adiw	r28, 0x06	; 6
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_setupPortDirection+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_setupPortDirection+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	90 f5       	brcc	.+100    	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <GPIO_setupPortDirection+0x5e>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <GPIO_setupPortDirection+0x3e>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <GPIO_setupPortDirection+0x54>
    1b84:	1e c0       	rjmp	.+60     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <GPIO_setupPortDirection+0x68>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <GPIO_setupPortDirection+0x72>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b9c:	ea e3       	ldi	r30, 0x3A	; 58
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ba6:	e7 e3       	ldi	r30, 0x37	; 55
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bb0:	e4 e3       	ldi	r30, 0x34	; 52
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bba:	e1 e3       	ldi	r30, 0x31	; 49
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_writePort+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_writePort+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	85 30       	cpi	r24, 0x05	; 5
    1be4:	90 f5       	brcc	.+100    	; 0x1c4a <GPIO_writePort+0x7a>
	{
		/* do nothing */
	}
	else
	{
		switch(port_num)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3c 83       	std	Y+4, r19	; 0x04
    1bee:	2b 83       	std	Y+3, r18	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	d1 f0       	breq	.+52     	; 0x1c2e <GPIO_writePort+0x5e>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <GPIO_writePort+0x3e>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <GPIO_writePort+0x54>
    1c0c:	1e c0       	rjmp	.+60     	; 0x1c4a <GPIO_writePort+0x7a>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_writePort+0x68>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <GPIO_writePort+0x72>
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB= value;
    1c2e:	e8 e3       	ldi	r30, 0x38	; 56
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC= value;
    1c38:	e5 e3       	ldi	r30, 0x35	; 53
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD= value;
    1c42:	e2 e3       	ldi	r30, 0x32	; 50
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_readPort+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_readPort+0x8>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
	if(port_num > NUM_OF_PORTS)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	85 30       	cpi	r24, 0x05	; 5
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <GPIO_readPort+0x1a>
	{
		/* do nothing */
		return LOGIC_LOW;
    1c6e:	1c 82       	std	Y+4, r1	; 0x04
    1c70:	34 c0       	rjmp	.+104    	; 0x1cda <GPIO_readPort+0x82>
	}
	else
	{
		switch(port_num)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3b 83       	std	Y+3, r19	; 0x03
    1c7a:	2a 83       	std	Y+2, r18	; 0x02
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	d1 f0       	breq	.+52     	; 0x1cba <GPIO_readPort+0x62>
    1c86:	2a 81       	ldd	r18, Y+2	; 0x02
    1c88:	3b 81       	ldd	r19, Y+3	; 0x03
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <GPIO_readPort+0x42>
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <GPIO_readPort+0x58>
    1c98:	1f c0       	rjmp	.+62     	; 0x1cd8 <GPIO_readPort+0x80>
    1c9a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c9c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	81 f0       	breq	.+32     	; 0x1cc4 <GPIO_readPort+0x6c>
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <GPIO_readPort+0x76>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			return PINA;//it will read what was written in all 8-pins
    1cb0:	e9 e3       	ldi	r30, 0x39	; 57
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	90 81       	ld	r25, Z
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	10 c0       	rjmp	.+32     	; 0x1cda <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    1cba:	e6 e3       	ldi	r30, 0x36	; 54
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	20 81       	ld	r18, Z
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	0b c0       	rjmp	.+22     	; 0x1cda <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    1cc4:	e3 e3       	ldi	r30, 0x33	; 51
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	30 81       	ld	r19, Z
    1cca:	3c 83       	std	Y+4, r19	; 0x04
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    1cce:	e0 e3       	ldi	r30, 0x30	; 48
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8c 83       	std	Y+4, r24	; 0x04
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <GPIO_readPort+0x82>
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <GPIO_readPort+0x86>
			break;
		}
	}
}
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	9d 83       	std	Y+5, r25	; 0x05
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <PWM_Timer0_Start>:
/*********************
 * Functions
 **********************/

void PWM_Timer0_Start(uint8 dutyCycle)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	0f 92       	push	r0
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	/* WGM01 & WGM02 : Fast PWM mode
	 * COM01 : non_inverting
	 * CS01 : freq of timer = fcpu/8 */
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    1cfc:	e3 e5       	ldi	r30, 0x53	; 83
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8a e6       	ldi	r24, 0x6A	; 106
    1d02:	80 83       	st	Z, r24

	/* Initial value of timer counter is zero*/
	TCNT0 = 0;
    1d04:	e2 e5       	ldi	r30, 0x52	; 82
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	10 82       	st	Z, r1

	/* Setting the compare value controls the duty cycle of
	 * the PWM as Timer0 is an eight bit timer thereby the max
	 * compare value is 255 this is 100% duty cycle and 128 is
	 * 50% duty cycle and 64 is 25% duty cycle*/
	OCR0 = dutyCycle;
    1d0a:	ec e5       	ldi	r30, 0x5C	; 92
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	80 83       	st	Z, r24

	/* PWM pin set to output */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	63 e0       	ldi	r22, 0x03	; 3
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 2f 0b 	call	0x165e	; 0x165e <GPIO_setupPinDirection>
}
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <PWM_deinit>:

void PWM_deinit(void)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1d2c:	e3 e5       	ldi	r30, 0x53	; 83
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	10 82       	st	Z, r1
	TCNT0 = 0;
    1d32:	e2 e5       	ldi	r30, 0x52	; 82
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	10 82       	st	Z, r1
	OCR0 = 0;
    1d38:	ec e5       	ldi	r30, 0x5C	; 92
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	10 82       	st	Z, r1
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>
#include <math.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <TWI_init+0xa>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ((float)((float)F_CPU/Config_Ptr->bit_rate-16)/2);
    1d56:	00 e2       	ldi	r16, 0x20	; 32
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	81 81       	ldd	r24, Z+1	; 0x01
    1d60:	92 81       	ldd	r25, Z+2	; 0x02
    1d62:	a3 81       	ldd	r26, Z+3	; 0x03
    1d64:	b4 81       	ldd	r27, Z+4	; 0x04
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	74 e2       	ldi	r23, 0x24	; 36
    1d76:	84 ef       	ldi	r24, 0xF4	; 244
    1d78:	9a e4       	ldi	r25, 0x4A	; 74
    1d7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e4       	ldi	r21, 0x40	; 64
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 83       	st	Z, r24
	TWSR = 0x00;
    1dba:	e1 e2       	ldi	r30, 0x21	; 33
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address & 0XFE);
    1dc0:	a2 e2       	ldi	r26, 0x22	; 34
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	80 81       	ld	r24, Z
    1dca:	8e 7f       	andi	r24, 0xFE	; 254
    1dcc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1dce:	e6 e5       	ldi	r30, 0x56	; 86
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	80 83       	st	Z, r24
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <TWI_start>:

void TWI_start(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1dec:	e6 e5       	ldi	r30, 0x56	; 86
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	84 ea       	ldi	r24, 0xA4	; 164
    1df2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1df4:	e6 e5       	ldi	r30, 0x56	; 86
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 23       	and	r24, r24
    1dfc:	dc f7       	brge	.-10     	; 0x1df4 <TWI_start+0x10>
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <TWI_stop>:

void TWI_stop(void)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e0c:	e6 e5       	ldi	r30, 0x56	; 86
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	84 e9       	ldi	r24, 0x94	; 148
    1e12:	80 83       	st	Z, r24
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e26:	e3 e2       	ldi	r30, 0x23	; 35
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e2e:	e6 e5       	ldi	r30, 0x56	; 86
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	84 e8       	ldi	r24, 0x84	; 132
    1e34:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e36:	e6 e5       	ldi	r30, 0x56	; 86
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 23       	and	r24, r24
    1e3e:	dc f7       	brge	.-10     	; 0x1e36 <TWI_writeByte+0x1c>
}
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e50:	e6 e5       	ldi	r30, 0x56	; 86
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	84 ec       	ldi	r24, 0xC4	; 196
    1e56:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e58:	e6 e5       	ldi	r30, 0x56	; 86
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 23       	and	r24, r24
    1e60:	dc f7       	brge	.-10     	; 0x1e58 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1e62:	e3 e2       	ldi	r30, 0x23	; 35
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e76:	e6 e5       	ldi	r30, 0x56	; 86
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	84 e8       	ldi	r24, 0x84	; 132
    1e7c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e7e:	e6 e5       	ldi	r30, 0x56	; 86
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 23       	and	r24, r24
    1e86:	dc f7       	brge	.-10     	; 0x1e7e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e88:	e3 e2       	ldi	r30, 0x23	; 35
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
}
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	0f 92       	push	r0
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e9e:	e1 e2       	ldi	r30, 0x21	; 33
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 7f       	andi	r24, 0xF8	; 248
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <UART_init+0x6>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <UART_init+0x8>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1ec2:	1a 82       	std	Y+2, r1	; 0x02
    1ec4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1ec6:	eb e2       	ldi	r30, 0x2B	; 43
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1ece:	ea e2       	ldi	r30, 0x2A	; 42
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	88 e1       	ldi	r24, 0x18	; 24
    1ed4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1ed6:	e0 e4       	ldi	r30, 0x40	; 64
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 e8       	ldi	r24, 0x80	; 128
    1edc:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0XBF) | ((Config_Ptr->Mode & 0X40)<<6);//Set the mode in UMSEL
    1ede:	a0 e4       	ldi	r26, 0x40	; 64
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e0 e4       	ldi	r30, 0x40	; 64
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	2f 7b       	andi	r18, 0xBF	; 191
    1eec:	eb 81       	ldd	r30, Y+3	; 0x03
    1eee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	80 74       	andi	r24, 0x40	; 64
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	00 24       	eor	r0, r0
    1efc:	96 95       	lsr	r25
    1efe:	87 95       	ror	r24
    1f00:	07 94       	ror	r0
    1f02:	96 95       	lsr	r25
    1f04:	87 95       	ror	r24
    1f06:	07 94       	ror	r0
    1f08:	98 2f       	mov	r25, r24
    1f0a:	80 2d       	mov	r24, r0
    1f0c:	82 2b       	or	r24, r18
    1f0e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XCF) | ((Config_Ptr->parity & 0X30)<<4);//Set the Parity mode in UPM1:0
    1f10:	a0 e4       	ldi	r26, 0x40	; 64
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e0 e4       	ldi	r30, 0x40	; 64
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	2f 7c       	andi	r18, 0xCF	; 207
    1f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f20:	fc 81       	ldd	r31, Y+4	; 0x04
    1f22:	81 81       	ldd	r24, Z+1	; 0x01
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	80 73       	andi	r24, 0x30	; 48
    1f2a:	90 70       	andi	r25, 0x00	; 0
    1f2c:	82 95       	swap	r24
    1f2e:	92 95       	swap	r25
    1f30:	90 7f       	andi	r25, 0xF0	; 240
    1f32:	98 27       	eor	r25, r24
    1f34:	80 7f       	andi	r24, 0xF0	; 240
    1f36:	98 27       	eor	r25, r24
    1f38:	82 2b       	or	r24, r18
    1f3a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((Config_Ptr->stop_bit & 0X08)<<3);//Set the StopBit mode in USBS
    1f3c:	a0 e4       	ldi	r26, 0x40	; 64
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e0 e4       	ldi	r30, 0x40	; 64
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	28 2f       	mov	r18, r24
    1f48:	27 7f       	andi	r18, 0xF7	; 247
    1f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	88 70       	andi	r24, 0x08	; 8
    1f56:	90 70       	andi	r25, 0x00	; 0
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	82 2b       	or	r24, r18
    1f66:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data!=7)
    1f68:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6c:	83 81       	ldd	r24, Z+3	; 0x03
    1f6e:	87 30       	cpi	r24, 0x07	; 7
    1f70:	99 f0       	breq	.+38     	; 0x1f98 <UART_init+0xe6>
	{
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data & 0X06)<<1);//Set the CharacterSize in Ucsz1:0
    1f72:	a0 e4       	ldi	r26, 0x40	; 64
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e0 e4       	ldi	r30, 0x40	; 64
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	29 7f       	andi	r18, 0xF9	; 249
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	83 81       	ldd	r24, Z+3	; 0x03
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	86 70       	andi	r24, 0x06	; 6
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	82 2b       	or	r24, r18
    1f94:	8c 93       	st	X, r24
    1f96:	19 c0       	rjmp	.+50     	; 0x1fca <UART_init+0x118>
	}
	else
	{
		UCSRC = (UCSRC & 0XF9) | ((Config_Ptr->bit_data & 0X06)<<1);//Set the CharacterSize in UCSZ1:0
    1f98:	a0 e4       	ldi	r26, 0x40	; 64
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e0 e4       	ldi	r30, 0x40	; 64
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	29 7f       	andi	r18, 0xF9	; 249
    1fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1faa:	83 81       	ldd	r24, Z+3	; 0x03
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	86 70       	andi	r24, 0x06	; 6
    1fb2:	90 70       	andi	r25, 0x00	; 0
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	82 2b       	or	r24, r18
    1fba:	8c 93       	st	X, r24
		UCSRB |=(1<<UCSZ2);
    1fbc:	aa e2       	ldi	r26, 0x2A	; 42
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ea e2       	ldi	r30, 0x2A	; 42
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	84 60       	ori	r24, 0x04	; 4
    1fc8:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ( Config_Ptr->baud_rate * 8UL))) - 1);
    1fca:	eb 81       	ldd	r30, Y+3	; 0x03
    1fcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fce:	84 81       	ldd	r24, Z+4	; 0x04
    1fd0:	95 81       	ldd	r25, Z+5	; 0x05
    1fd2:	a6 81       	ldd	r26, Z+6	; 0x06
    1fd4:	b7 81       	ldd	r27, Z+7	; 0x07
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	aa 1f       	adc	r26, r26
    1fdc:	bb 1f       	adc	r27, r27
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	aa 1f       	adc	r26, r26
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	aa 1f       	adc	r26, r26
    1fec:	bb 1f       	adc	r27, r27
    1fee:	9c 01       	movw	r18, r24
    1ff0:	ad 01       	movw	r20, r26
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	92 e1       	ldi	r25, 0x12	; 18
    1ff6:	aa e7       	ldi	r26, 0x7A	; 122
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 aa 10 	call	0x2154	; 0x2154 <__udivmodsi4>
    2002:	da 01       	movw	r26, r20
    2004:	c9 01       	movw	r24, r18
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    200c:	e0 e4       	ldi	r30, 0x40	; 64
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	89 2f       	mov	r24, r25
    2016:	99 27       	eor	r25, r25
    2018:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    201a:	e9 e2       	ldi	r30, 0x29	; 41
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	80 83       	st	Z, r24
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    203c:	eb e2       	ldi	r30, 0x2B	; 43
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	80 72       	andi	r24, 0x20	; 32
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	b9 f3       	breq	.-18     	; 0x203c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    204e:	ec e2       	ldi	r30, 0x2C	; 44
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2066:	eb e2       	ldi	r30, 0x2B	; 43
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	dc f7       	brge	.-10     	; 0x2066 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2070:	ec e2       	ldi	r30, 0x2C	; 44
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
}
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <UART_sendString+0x6>
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9b 83       	std	Y+3, r25	; 0x03
    208a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01
    208e:	0e c0       	rjmp	.+28     	; 0x20ac <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	fc 01       	movw	r30, r24
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	80 81       	ld	r24, Z
    20a2:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_sendByte>
		i++;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	fc 01       	movw	r30, r24
    20b8:	e2 0f       	add	r30, r18
    20ba:	f3 1f       	adc	r31, r19
    20bc:	80 81       	ld	r24, Z
    20be:	88 23       	and	r24, r24
    20c0:	39 f7       	brne	.-50     	; 0x2090 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <UART_receiveString+0xa>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9b 83       	std	Y+3, r25	; 0x03
    20e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20e2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	8c 01       	movw	r16, r24
    20f0:	02 0f       	add	r16, r18
    20f2:	13 1f       	adc	r17, r19
    20f4:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_recieveByte>
    20f8:	f8 01       	movw	r30, r16
    20fa:	80 83       	st	Z, r24
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	8c 01       	movw	r16, r24
    2110:	02 0f       	add	r16, r18
    2112:	13 1f       	adc	r17, r19
    2114:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_recieveByte>
    2118:	f8 01       	movw	r30, r16
    211a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	9b 81       	ldd	r25, Y+3	; 0x03
    2126:	fc 01       	movw	r30, r24
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
    212c:	80 81       	ld	r24, Z
    212e:	83 32       	cpi	r24, 0x23	; 35
    2130:	31 f7       	brne	.-52     	; 0x20fe <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	10 82       	st	Z, r1
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret

00002154 <__udivmodsi4>:
    2154:	a1 e2       	ldi	r26, 0x21	; 33
    2156:	1a 2e       	mov	r1, r26
    2158:	aa 1b       	sub	r26, r26
    215a:	bb 1b       	sub	r27, r27
    215c:	fd 01       	movw	r30, r26
    215e:	0d c0       	rjmp	.+26     	; 0x217a <__udivmodsi4_ep>

00002160 <__udivmodsi4_loop>:
    2160:	aa 1f       	adc	r26, r26
    2162:	bb 1f       	adc	r27, r27
    2164:	ee 1f       	adc	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	a2 17       	cp	r26, r18
    216a:	b3 07       	cpc	r27, r19
    216c:	e4 07       	cpc	r30, r20
    216e:	f5 07       	cpc	r31, r21
    2170:	20 f0       	brcs	.+8      	; 0x217a <__udivmodsi4_ep>
    2172:	a2 1b       	sub	r26, r18
    2174:	b3 0b       	sbc	r27, r19
    2176:	e4 0b       	sbc	r30, r20
    2178:	f5 0b       	sbc	r31, r21

0000217a <__udivmodsi4_ep>:
    217a:	66 1f       	adc	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	88 1f       	adc	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	1a 94       	dec	r1
    2184:	69 f7       	brne	.-38     	; 0x2160 <__udivmodsi4_loop>
    2186:	60 95       	com	r22
    2188:	70 95       	com	r23
    218a:	80 95       	com	r24
    218c:	90 95       	com	r25
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	bd 01       	movw	r22, r26
    2194:	cf 01       	movw	r24, r30
    2196:	08 95       	ret

00002198 <__prologue_saves__>:
    2198:	2f 92       	push	r2
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	ca 1b       	sub	r28, r26
    21c2:	db 0b       	sbc	r29, r27
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	09 94       	ijmp

000021d0 <__epilogue_restores__>:
    21d0:	2a 88       	ldd	r2, Y+18	; 0x12
    21d2:	39 88       	ldd	r3, Y+17	; 0x11
    21d4:	48 88       	ldd	r4, Y+16	; 0x10
    21d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21da:	7d 84       	ldd	r7, Y+13	; 0x0d
    21dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21de:	9b 84       	ldd	r9, Y+11	; 0x0b
    21e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21e2:	b9 84       	ldd	r11, Y+9	; 0x09
    21e4:	c8 84       	ldd	r12, Y+8	; 0x08
    21e6:	df 80       	ldd	r13, Y+7	; 0x07
    21e8:	ee 80       	ldd	r14, Y+6	; 0x06
    21ea:	fd 80       	ldd	r15, Y+5	; 0x05
    21ec:	0c 81       	ldd	r16, Y+4	; 0x04
    21ee:	1b 81       	ldd	r17, Y+3	; 0x03
    21f0:	aa 81       	ldd	r26, Y+2	; 0x02
    21f2:	b9 81       	ldd	r27, Y+1	; 0x01
    21f4:	ce 0f       	add	r28, r30
    21f6:	d1 1d       	adc	r29, r1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	ed 01       	movw	r28, r26
    2204:	08 95       	ret

00002206 <ceil>:
    2206:	3b d0       	rcall	.+118    	; 0x227e <__fp_trunc>
    2208:	80 f0       	brcs	.+32     	; 0x222a <ceil+0x24>
    220a:	9f 37       	cpi	r25, 0x7F	; 127
    220c:	40 f4       	brcc	.+16     	; 0x221e <ceil+0x18>
    220e:	91 11       	cpse	r25, r1
    2210:	0e f4       	brtc	.+2      	; 0x2214 <ceil+0xe>
    2212:	4d c0       	rjmp	.+154    	; 0x22ae <__fp_szero>
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	80 e8       	ldi	r24, 0x80	; 128
    221a:	9f e3       	ldi	r25, 0x3F	; 63
    221c:	08 95       	ret
    221e:	26 f0       	brts	.+8      	; 0x2228 <ceil+0x22>
    2220:	1b 16       	cp	r1, r27
    2222:	61 1d       	adc	r22, r1
    2224:	71 1d       	adc	r23, r1
    2226:	81 1d       	adc	r24, r1
    2228:	01 c0       	rjmp	.+2      	; 0x222c <__fp_mintl>
    222a:	1b c0       	rjmp	.+54     	; 0x2262 <__fp_mpack>

0000222c <__fp_mintl>:
    222c:	88 23       	and	r24, r24
    222e:	71 f4       	brne	.+28     	; 0x224c <__fp_mintl+0x20>
    2230:	77 23       	and	r23, r23
    2232:	21 f0       	breq	.+8      	; 0x223c <__fp_mintl+0x10>
    2234:	98 50       	subi	r25, 0x08	; 8
    2236:	87 2b       	or	r24, r23
    2238:	76 2f       	mov	r23, r22
    223a:	07 c0       	rjmp	.+14     	; 0x224a <__fp_mintl+0x1e>
    223c:	66 23       	and	r22, r22
    223e:	11 f4       	brne	.+4      	; 0x2244 <__fp_mintl+0x18>
    2240:	99 27       	eor	r25, r25
    2242:	0d c0       	rjmp	.+26     	; 0x225e <__fp_mintl+0x32>
    2244:	90 51       	subi	r25, 0x10	; 16
    2246:	86 2b       	or	r24, r22
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	2a f0       	brmi	.+10     	; 0x2258 <__fp_mintl+0x2c>
    224e:	9a 95       	dec	r25
    2250:	66 0f       	add	r22, r22
    2252:	77 1f       	adc	r23, r23
    2254:	88 1f       	adc	r24, r24
    2256:	da f7       	brpl	.-10     	; 0x224e <__fp_mintl+0x22>
    2258:	88 0f       	add	r24, r24
    225a:	96 95       	lsr	r25
    225c:	87 95       	ror	r24
    225e:	97 f9       	bld	r25, 7
    2260:	08 95       	ret

00002262 <__fp_mpack>:
    2262:	9f 3f       	cpi	r25, 0xFF	; 255
    2264:	31 f0       	breq	.+12     	; 0x2272 <__fp_mpack_finite+0xc>

00002266 <__fp_mpack_finite>:
    2266:	91 50       	subi	r25, 0x01	; 1
    2268:	20 f4       	brcc	.+8      	; 0x2272 <__fp_mpack_finite+0xc>
    226a:	87 95       	ror	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b7 95       	ror	r27
    2272:	88 0f       	add	r24, r24
    2274:	91 1d       	adc	r25, r1
    2276:	96 95       	lsr	r25
    2278:	87 95       	ror	r24
    227a:	97 f9       	bld	r25, 7
    227c:	08 95       	ret

0000227e <__fp_trunc>:
    227e:	25 d0       	rcall	.+74     	; 0x22ca <__fp_splitA>
    2280:	a0 f0       	brcs	.+40     	; 0x22aa <__fp_trunc+0x2c>
    2282:	be e7       	ldi	r27, 0x7E	; 126
    2284:	b9 17       	cp	r27, r25
    2286:	88 f4       	brcc	.+34     	; 0x22aa <__fp_trunc+0x2c>
    2288:	bb 27       	eor	r27, r27
    228a:	9f 38       	cpi	r25, 0x8F	; 143
    228c:	60 f4       	brcc	.+24     	; 0x22a6 <__fp_trunc+0x28>
    228e:	16 16       	cp	r1, r22
    2290:	b1 1d       	adc	r27, r1
    2292:	67 2f       	mov	r22, r23
    2294:	78 2f       	mov	r23, r24
    2296:	88 27       	eor	r24, r24
    2298:	98 5f       	subi	r25, 0xF8	; 248
    229a:	f7 cf       	rjmp	.-18     	; 0x228a <__fp_trunc+0xc>
    229c:	86 95       	lsr	r24
    229e:	77 95       	ror	r23
    22a0:	67 95       	ror	r22
    22a2:	b1 1d       	adc	r27, r1
    22a4:	93 95       	inc	r25
    22a6:	96 39       	cpi	r25, 0x96	; 150
    22a8:	c8 f3       	brcs	.-14     	; 0x229c <__fp_trunc+0x1e>
    22aa:	08 95       	ret

000022ac <__fp_zero>:
    22ac:	e8 94       	clt

000022ae <__fp_szero>:
    22ae:	bb 27       	eor	r27, r27
    22b0:	66 27       	eor	r22, r22
    22b2:	77 27       	eor	r23, r23
    22b4:	cb 01       	movw	r24, r22
    22b6:	97 f9       	bld	r25, 7
    22b8:	08 95       	ret

000022ba <__fp_split3>:
    22ba:	57 fd       	sbrc	r21, 7
    22bc:	90 58       	subi	r25, 0x80	; 128
    22be:	44 0f       	add	r20, r20
    22c0:	55 1f       	adc	r21, r21
    22c2:	59 f0       	breq	.+22     	; 0x22da <__fp_splitA+0x10>
    22c4:	5f 3f       	cpi	r21, 0xFF	; 255
    22c6:	71 f0       	breq	.+28     	; 0x22e4 <__fp_splitA+0x1a>
    22c8:	47 95       	ror	r20

000022ca <__fp_splitA>:
    22ca:	88 0f       	add	r24, r24
    22cc:	97 fb       	bst	r25, 7
    22ce:	99 1f       	adc	r25, r25
    22d0:	61 f0       	breq	.+24     	; 0x22ea <__fp_splitA+0x20>
    22d2:	9f 3f       	cpi	r25, 0xFF	; 255
    22d4:	79 f0       	breq	.+30     	; 0x22f4 <__fp_splitA+0x2a>
    22d6:	87 95       	ror	r24
    22d8:	08 95       	ret
    22da:	12 16       	cp	r1, r18
    22dc:	13 06       	cpc	r1, r19
    22de:	14 06       	cpc	r1, r20
    22e0:	55 1f       	adc	r21, r21
    22e2:	f2 cf       	rjmp	.-28     	; 0x22c8 <__fp_split3+0xe>
    22e4:	46 95       	lsr	r20
    22e6:	f1 df       	rcall	.-30     	; 0x22ca <__fp_splitA>
    22e8:	08 c0       	rjmp	.+16     	; 0x22fa <__fp_splitA+0x30>
    22ea:	16 16       	cp	r1, r22
    22ec:	17 06       	cpc	r1, r23
    22ee:	18 06       	cpc	r1, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	f1 cf       	rjmp	.-30     	; 0x22d6 <__fp_splitA+0xc>
    22f4:	86 95       	lsr	r24
    22f6:	71 05       	cpc	r23, r1
    22f8:	61 05       	cpc	r22, r1
    22fa:	08 94       	sec
    22fc:	08 95       	ret

000022fe <_exit>:
    22fe:	f8 94       	cli

00002300 <__stop_program>:
    2300:	ff cf       	rjmp	.-2      	; 0x2300 <__stop_program>
